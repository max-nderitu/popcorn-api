[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/controllers/ContentController.js",
    "content": "// Import the necessary modules.\n// @flow\nimport type {\n  $Request,\n  $Response,\n  NextFunction\n} from 'express'\nimport type { MongooseModel } from 'mongoose'\n\nimport {\n  BaseContentController,\n  type ContentService\n} from 'pop-api'\n\n/**\n * Base class for getting content from endpoints.\n * @implements {BaseContentController}\n * @type {ContentController}\n */\nexport default class ContentController extends BaseContentController {\n\n  /**\n   * The base path for the routes.\n   * @type {string}\n   */\n  basePath: string\n\n  /**\n   * The service of the content controller.\n   * @type {ContentService}\n   */\n  service: ContentService\n\n  /**\n   * Register the default methods to the default routes.\n   * @param {!Object} router - The express router to register the routes to.\n   * @param {?PopApi} [PopApi] - The PopApi instance.\n   * @returns {undefined}\n   */\n  registerRoutes(router: any, PopApi?: any): void {\n    const t = this.basePath\n\n    router.get(`/${t}s`, this.getContents.bind(this))\n    router.get(`/${t}s/:page`, this.getPage.bind(this))\n    router.get(`/${t}/:id`, this.getContent.bind(this))\n    router.get(`/random/${t}`, this.getRandomContent.bind(this))\n  }\n\n  /**\n   * Default method to sort the items.\n   * @param {!string} sort - The property to sort on.\n   * @param {!number} order - The way to sort the property.\n   * @returns {Object} - The sort object.\n   */\n  sortContent(sort: string, order: number): Object {\n    const s = sort.toLowerCase()\n    const sortObj = {\n      score: {\n        $meta: 'textScore'\n      }\n    }\n\n    switch (s) {\n      case 'name':\n        return {\n          ...sortObj,\n          title: order\n        }\n      case 'rating':\n        return {\n          ...sortObj,\n          'rating.votes': order,\n          'rating.percentage': order\n        }\n      case 'released':\n      case 'updated':\n        return {\n          ...sortObj,\n          latest_episode: order,\n          released: order\n        }\n      case 'trending':\n        return {\n          ...sortObj,\n          'rating.watching': order\n        }\n      case 'year':\n        return {\n          ...sortObj,\n          year: order\n        }\n      default:\n        return {\n          ...sortObj,\n          'rating.votes': order,\n          'rating.precentage': order,\n          'rating.watching': order\n        }\n    }\n  }\n\n  /**\n   * Get content from one page.\n   * @param {!Object} req - The ExpressJS request object.\n   * @param {!Object} res - The ExpressJS response object.\n   * @param {!Function} next - The ExpressJS next function.\n   * @returns {Promise<Array<Object>, Error>} - The content of one\n   * page.\n   */\n  getPage(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<Array<MongooseModel> | mixed> {\n    const { page } = req.params\n    const { sort, order, genre, keywords } = req.query\n\n    const o = parseInt(order, 10) ? parseInt(order, 10) : -1\n    const s = typeof sort === 'string' ? this.sortContent(sort, o) : ''\n\n    const query = {\n      ...this.service.query\n    }\n\n    if (typeof genre === 'string' && genre.toLowerCase() !== 'all') {\n      if (genre.match(/science[-\\s]fuction/i) || genre.match(/sci[-\\s]fi/i)) {\n        query.genres = 'science-fiction'\n      } else {\n        query.genres = genre.toLowerCase()\n      }\n    }\n\n    if (typeof keywords === 'string') {\n      query.$text = {\n        $search: keywords\n      }\n    }\n\n    return this.service.getPage(s, Number(page), query)\n      .then(content => this.checkEmptyContent(res, content))\n      .catch(err => next(err))\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/controllers/ContentController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "ContentController",
    "memberof": "src/controllers/ContentController.js",
    "static": true,
    "longname": "src/controllers/ContentController.js~ContentController",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/controllers/ContentController.js",
    "importStyle": "ContentController",
    "description": "Base class for getting content from endpoints.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "ContentController"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "pop-api~BaseContentController"
    ],
    "implements": [
      "BaseContentController"
    ]
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "basePath",
    "memberof": "src/controllers/ContentController.js~ContentController",
    "static": false,
    "longname": "src/controllers/ContentController.js~ContentController#basePath",
    "access": "public",
    "description": "The base path for the routes. ",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "service",
    "memberof": "src/controllers/ContentController.js~ContentController",
    "static": false,
    "longname": "src/controllers/ContentController.js~ContentController#service",
    "access": "public",
    "description": "The service of the content controller. ",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "ContentService"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "registerRoutes",
    "memberof": "src/controllers/ContentController.js~ContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentController.js~ContentController#registerRoutes",
    "access": "public",
    "description": "Register the default methods to the default routes.  ",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "The express router to register the routes to."
      },
      {
        "nullable": true,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": true,
        "name": "PopApi",
        "description": "The PopApi instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "sortContent",
    "memberof": "src/controllers/ContentController.js~ContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentController.js~ContentController#sortContent",
    "access": "public",
    "description": "Default method to sort the items.  ",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The sort object.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sort",
        "description": "The property to sort on."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "order",
        "description": "The way to sort the property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The sort object."
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "getPage",
    "memberof": "src/controllers/ContentController.js~ContentController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ContentController.js~ContentController#getPage",
    "access": "public",
    "description": "Get content from one page.  ",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>, Error>} - The content of one\npage.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The ExpressJS request object."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The ExpressJS response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The ExpressJS next function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>, Error>"
      ],
      "spread": false,
      "description": "The content of one\npage."
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/controllers/ExportController.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { join } from 'path'\nimport { existsSync } from 'fs'\nimport type {\n  $Request,\n  $Response,\n  NextFunction\n} from 'express'\n\nimport { IController } from 'pop-api'\n\n/**\n * Class for downloading export collections.\n * @type {ExportController}\n * @implements {IController}\n */\nexport default class ExportController extends IController {\n\n  /**\n   * Register the routes for the export controller to the Express instance.\n   * @param {!Object} router - The express router to register the routes to.\n   * @param {?PopApi} [PopApi] - The PopApi instance.\n   * @returns {undefined}\n   */\n  registerRoutes(router: any, PopApi?: any): void {\n    router.get('/exports/:collection', this.getExport)\n  }\n\n  /**\n   * Download the export of a collection.\n   * @param {!Object} req - The ExpressJS request object.\n   * @param {!Object} res - The ExpressJS response object.\n   * @param {!Function} next - The ExpressJS next function.\n   * @returns {Object|Error} - The download request of an export of a\n   * collection.\n   */\n  getExport(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Object | mixed {\n    const { collection } = req.params\n\n    if (collection.match(/(anime|movie|show)s?/i)) {\n      process.env.TEMP_DIR = process.env.TEMP_DIR\n        ? process.env.TEMP_DIR\n        : join(...[\n          __dirname,\n          '..',\n          '..',\n          'tmp'\n        ])\n\n      const tempDir = process.env.TEMP_DIR\n      let jsonFile = join(...[\n        tempDir,\n        `${collection}.json`\n      ])\n      if (existsSync(jsonFile)) {\n        return res.download(jsonFile)\n      }\n\n      jsonFile = join(...[\n        tempDir,\n        `${collection}s.json`\n      ])\n      if (existsSync(jsonFile)) {\n        return res.download(jsonFile)\n      }\n\n      return next(new Error(`Error: no such file found for '${jsonFile}'`))\n    }\n\n    const msg = `Error: '${collection}' is not a valid collection to export.`\n    return next(new Error(msg))\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/controllers/ExportController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "ExportController",
    "memberof": "src/controllers/ExportController.js",
    "static": true,
    "longname": "src/controllers/ExportController.js~ExportController",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/controllers/ExportController.js",
    "importStyle": "ExportController",
    "description": "Class for downloading export collections.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "ExportController"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "pop-api~IController"
    ],
    "implements": [
      "IController"
    ]
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "registerRoutes",
    "memberof": "src/controllers/ExportController.js~ExportController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ExportController.js~ExportController#registerRoutes",
    "access": "public",
    "description": "Register the routes for the export controller to the Express instance.  ",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "The express router to register the routes to."
      },
      {
        "nullable": true,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": true,
        "name": "PopApi",
        "description": "The PopApi instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "getExport",
    "memberof": "src/controllers/ExportController.js~ExportController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/ExportController.js~ExportController#getExport",
    "access": "public",
    "description": "Download the export of a collection.  ",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|Error} - The download request of an export of a\ncollection.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The ExpressJS request object."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The ExpressJS response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The ExpressJS next function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Error"
      ],
      "spread": false,
      "description": "The download request of an export of a\ncollection."
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/controllers/IndexController.js",
    "content": "// Import the necessary modules.\n// @flow\nimport fs from 'fs'\nimport { join } from 'path'\nimport {\n  ApiError,\n  IController,\n  PopApi,\n  utils\n} from 'pop-api'\nimport type {\n  $Request,\n  $Response,\n  NextFunction\n} from 'express'\n\nimport ContentController from './ContentController'\nimport {\n  AnimeShow as Anime,\n  Movie,\n  Show\n} from '../models'\nimport {\n  name,\n  repository,\n  version\n} from '../../package.json'\n\n/**\n * Class for displaying information about the server the API is running on.\n * @type {IndexController}\n * @implements {IController}\n */\nexport default class IndexController extends IController {\n\n  /**\n   * The name of the server. Default is `serv01`.\n   * @type {string}\n   */\n  static _Server: string = 'serv01'\n\n  /**\n   * Register the routes for the index controller to the Express instance.\n   * @param {!Object} router - The express router to register the routes to.\n   * @param {?PopApi} [PopApi] - The PopApi instance.\n   * @returns {undefined}\n   */\n  registerRoutes(router: any, PopApi?: any): void {\n    router.get('/status', this.getIndex)\n    router.get('/logs/error', this.getErrorLog)\n  }\n\n  /**\n   * Get general information about the server.\n   * @param {!Object} req - The ExpressJS request object.\n   * @param {!Object} res - The ExpressJS response object.\n   * @param {!Function} next - The ExpressJS next function.\n   * @returns {Promise<Object, Error>} - General information about the server.\n   */\n  async getIndex(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Promise<Object | mixed> {\n    try {\n      const commit = await utils.executeCommand('git', [\n        'rev-parse',\n        '--short',\n        'HEAD'\n      ])\n\n      const query = ContentController.Query\n      const totalAnimes = await Anime.count(query).exec()\n      const totalMovies = await Movie.count(query).exec()\n      const totalShows = await Show.count(query).exec()\n\n      return res.json({\n        repo: repository.url,\n        server: IndexController._Server,\n        status: await PopApi.scraper.getStatus(),\n        totalAnimes,\n        totalMovies,\n        totalShows,\n        updated: await PopApi.scraper.getUpdated(),\n        uptime: process.uptime() | 0, // eslint-disable-line no-bitwise\n        version,\n        commit\n      })\n    } catch (err) {\n      return next(err)\n    }\n  }\n\n  /**\n   * Displays the 'popcorn-api.log' file.\n   * @param {!Object} req - The ExpressJS request object.\n   * @param {!Object} res - The ExpressJS response object.\n   * @param {!Function} next - The ExpressJS next function.\n   * @returns {Object|Error} - The content of the log file.\n   */\n  getErrorLog(\n    req: $Request,\n    res: $Response,\n    next: NextFunction\n  ): Object | mixed {\n    process.env.TEMP_DIR = typeof process.env.TEMP_DIR === 'string'\n      ? process.env.TEMP_DIR\n      : join(...[\n        __dirname,\n        '..',\n        '..',\n        'tmp'\n      ])\n\n    const root = process.env.TEMP_DIR\n    const file = `${name}.log`\n    const filePath = join(...[\n      process.env.TEMP_DIR,\n      file\n    ])\n\n    if (fs.existsSync(filePath)) {\n      return res.sendFile(file, {\n        root,\n        headers: {\n          'Content-Type': 'text/plain; charset=UTF-8'\n        }\n      })\n    }\n\n    return next(new ApiError({\n      message: `Could not find file: '${filePath}'`\n    }))\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/controllers/IndexController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "IndexController",
    "memberof": "src/controllers/IndexController.js",
    "static": true,
    "longname": "src/controllers/IndexController.js~IndexController",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/controllers/IndexController.js",
    "importStyle": "IndexController",
    "description": "Class for displaying information about the server the API is running on.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "IndexController"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "pop-api~IController"
    ],
    "implements": [
      "IController"
    ]
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_Server",
    "memberof": "src/controllers/IndexController.js~IndexController",
    "static": true,
    "longname": "src/controllers/IndexController.js~IndexController._Server",
    "access": "private",
    "description": "The name of the server. Default is `serv01`. ",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "registerRoutes",
    "memberof": "src/controllers/IndexController.js~IndexController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IndexController.js~IndexController#registerRoutes",
    "access": "public",
    "description": "Register the routes for the index controller to the Express instance.  ",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "The express router to register the routes to."
      },
      {
        "nullable": true,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": true,
        "name": "PopApi",
        "description": "The PopApi instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getIndex",
    "memberof": "src/controllers/IndexController.js~IndexController",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/controllers/IndexController.js~IndexController#getIndex",
    "access": "public",
    "description": "Get general information about the server.  ",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - General information about the server.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The ExpressJS request object."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The ExpressJS response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The ExpressJS next function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "General information about the server."
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "getErrorLog",
    "memberof": "src/controllers/IndexController.js~IndexController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/IndexController.js~IndexController#getErrorLog",
    "access": "public",
    "description": "Displays the 'popcorn-api.log' file.  ",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|Error} - The content of the log file.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The ExpressJS request object."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The ExpressJS response object."
      },
      {
        "nullable": false,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The ExpressJS next function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Error"
      ],
      "spread": false,
      "description": "The content of the log file."
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/controllers/index.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { ContentService } from 'pop-api'\n\nimport ContentController from './ContentController'\nimport ExportController from './ExportController'\nimport IndexController from './IndexController'\nimport {\n  AnimeShow as Anime,\n  Movie,\n  Show\n} from '../models'\n\n/**\n * Object used as a base projections for content.\n * @type {Object}\n */\nconst baseProjection: Object = {\n  _id: 1,\n  imdb_id: 1,\n  title: 1,\n  year: 1,\n  slug: 1,\n  synopsis: 1,\n  genres: 1,\n  images: 1,\n  rating: 1,\n  type: 1\n}\n\n/**\n * Object used for the projection of movies.\n * @type {Object}\n */\nconst movieProjection: Object = {\n  ...baseProjection,\n  synopsis: 1,\n  runtime: 1,\n  released: 1,\n  trailer: 1,\n  certification: 1,\n  torrents: 1\n}\n\n/**\n * Object used for the projection of shows.\n * @type {Object}\n */\nconst showProjection: Object = {\n  ...baseProjection,\n  tvdb_id: 1,\n  num_seasons: 1\n}\n\n/**\n * Object used for the projection of animes.\n * @type {Object}\n */\nconst animeProjection: Object = {\n  ...movieProjection,\n  ...showProjection\n}\n\n/**\n * Object used to query for content.\n * @type {Object}\n */\nconst query: Object = {\n  $or: [{\n    num_seasons: {\n      $gt: 0\n    }\n  }, {\n    torrents: {\n      $exists: true\n    }\n  }]\n}\n\n/**\n * The controllers used by the setup process of registering them.\n * @type {Array<Object>}\n */\nexport default [{\n  Controller: IndexController,\n  args: {}\n}, {\n  Controller: ExportController,\n  args: {}\n}, {\n  Controller: ContentController,\n  args: {\n    basePath: 'anime',\n    service: new ContentService({\n      Model: Anime,\n      projection: animeProjection,\n      query\n    })\n  }\n}, {\n  Controller: ContentController,\n  args: {\n    basePath: 'movie',\n    service: new ContentService({\n      Model: Movie,\n      projection: movieProjection,\n      query\n    })\n  }\n}, {\n  Controller: ContentController,\n  args: {\n    basePath: 'show',\n    service: new ContentService({\n      Model: Show,\n      projection: showProjection,\n      query\n    })\n  }\n}]\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/controllers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "baseProjection",
    "memberof": "src/controllers/index.js",
    "static": true,
    "longname": "src/controllers/index.js~baseProjection",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/controllers/index.js",
    "importStyle": null,
    "description": "Object used as a base projections for content.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "movieProjection",
    "memberof": "src/controllers/index.js",
    "static": true,
    "longname": "src/controllers/index.js~movieProjection",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/controllers/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "{...baseProjection: Object, \"synopsis\": number, \"runtime\": number, \"released\": number, \"trailer\": number, \"certification\": number, \"torrents\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "showProjection",
    "memberof": "src/controllers/index.js",
    "static": true,
    "longname": "src/controllers/index.js~showProjection",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/controllers/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{...baseProjection: Object, \"tvdb_id\": number, \"num_seasons\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "animeProjection",
    "memberof": "src/controllers/index.js",
    "static": true,
    "longname": "src/controllers/index.js~animeProjection",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/controllers/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "{...movieProjection: Object, ...showProjection: Object}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "query",
    "memberof": "src/controllers/index.js",
    "static": true,
    "longname": "src/controllers/index.js~query",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/controllers/index.js",
    "importStyle": null,
    "description": "Object used to query for content.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/index.js",
    "content": "// Import the necessary modules.\n// @flow\nimport dotenv from 'dotenv'\n\nimport { isMaster } from 'cluster'\nimport { join } from 'path'\nimport {\n  Database,\n  HttpServer,\n  Logger,\n  Routes,\n  PopApi\n} from 'pop-api'\nimport {\n  Cron,\n  PopApiScraper\n} from 'pop-api-scraper'\n\nimport controllers from './controllers'\nimport providers from './scraper'\nimport { Cli } from './middleware'\nimport {\n  name,\n  version\n} from '../package.json'\ndotenv.config();\n\n/** Setup the api. */\n(async () => {\n  try {\n    providers.map(p => {\n      const { Provider, args } = p\n      PopApiScraper.use(Provider, args)\n    })\n\n    process.env.TEMP_DIR = process.env.TEMP_DIR || join(...[\n      __dirname,\n      '..',\n      'tmp'\n    ])\n    const logDir = process.env.TEMP_DIR\n    await PopApi.init({\n      name,\n      version,\n      logDir,\n      controllers,\n      statusPath: join(...[logDir, 'status.json']),\n      updatedPath: join(...[logDir, 'updated.json'])\n    }, [\n      Cli,\n      Logger,\n      Database,\n      Routes,\n      HttpServer,\n      PopApiScraper,\n      Cron\n    ])\n\n    // TODO: make scraping start wth 'start' param in 'init'.\n    if (isMaster && PopApi.startScraper) {\n      PopApi.scraper.scrape()\n    }\n  } catch (err) {\n    throw err\n  }\n})()\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/middleware/Cli.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-console */\nimport bytes from 'bytes'\nimport fs from 'fs'\nimport inquirer from 'inquirer'\nimport parseTorrent from 'parse-torrent'\nimport path from 'path'\nimport webtorrentHealth from 'webtorrent-health'\nimport {\n  Cli as BaseCli,\n  Database\n} from 'pop-api'\n\nimport promptSchemas from './promptschemas.js'\nimport {\n  AnimeMovie,\n  AnimeShow,\n  Movie,\n  Show\n} from '../models'\nimport {\n  MovieHelper,\n  ShowHelper\n} from '../scraper/helpers'\nimport {\n  MovieProvider,\n  ShowProvider\n} from '../scraper/providers'\n\n/**\n * Class The class for the command line interface.\n * @type {Cli}\n */\nexport default class Cli extends BaseCli {\n\n  /**\n   * The command line parser to process the Cli inputs.\n   * @type {Command}\n   */\n  program: Object\n\n  /**\n   * The name of the Cli program.\n   * @type {string}\n   */\n  name: string\n\n  /**\n   * The verion of the Cli program.\n   * @type {string}\n   */\n  version: string\n\n  /**\n   * The name of the Cli provider. Default is `Cli`.\n   * @type {string}\n   */\n  static _Name: string = 'Cli'\n\n  /**\n   * The database middleware from `pop-api`.\n   * @type {Database}\n   */\n  _database: Database\n\n  /**\n   * Create a CLI object.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the cli to.\n   * @param {!Ojbect} options - The options for the cli.\n   * @param {?Array<string>} options.argv - The arguments to be parsed by\n   * commander.\n   * @param {!string} options.name - The name of the Cli program.\n   * @param {!string} [options.version] - The version of the Cli program.\n   */\n  constructor(PopApi: any, { argv, name, version }: Object): void {\n    super(PopApi, { name, version })\n\n    /**\n      * The database middleware from `pop-api`.\n      * @type {Database}\n      */\n    this.database = new Database(PopApi, {\n      database: name\n    })\n\n    this.run(PopApi, argv)\n  }\n\n  /**\n   * Initiate the options for the Cli.\n   * @param {!string} version - The version of the Cli program.\n   * @returns {undefined}\n   */\n  initOptions(version: string): void {\n    super.initOptions(version)\n\n    return this.program\n      .option('-s, --start', 'Start the scraping process')\n      .option('--content <type>',\n        'Add content to the MongoDB database (animemovie|animeshow|movie|show).',\n        /^(animemovie|animeshow|movie|show)$/i, false)\n      .option(\n        '--providers <env>',\n        'Add provider configurations',\n        /^(development|production|test)$/i\n      )\n      .option('--export <collection>',\n        'Export a collection to a JSON file.',\n        /^(anime|movie|show)$/i, false)\n      .option('--import <collection>', 'Import a JSON file to the database.')\n  }\n\n  /**\n   * Method for displaying the --help option\n   * @returns {undefined}\n   */\n  getHelp(): void {\n    const baseHelp = super.getHelp()\n    return baseHelp.concat([\n      `    $ ${this.name} --content <animemovie|animeshow|movie|show>`,\n      `    $ ${this.name} --provider`,\n      `    $ ${this.name} --export <anime|movie|show>`,\n      `    $ ${this.name} --import <path-to-json>`\n    ])\n  }\n\n  /**\n   * Return a torrent object for a movie.\n   * @param {!string} magnet - The magnet url to bind.\n   * @param {!Object} health - The health object for seeders and peers.\n   * @param {!Object} remote - The remote data object from 'parseTorrent'.\n   * @returns {Object} - A torrent object for a movie.\n   */\n  _movieTorrent(magnet: string, health: Object, remote: Object): Object {\n    return {\n      url: magnet,\n      seeds: health.seeds,\n      peers: health.peers,\n      size: remote.length,\n      filesize: bytes(remote.length),\n      provider: Cli._Name\n    }\n  }\n\n  /**\n   * Return a torrent object for a show.\n   * @param {!string} magnet - The magnet url to bind.\n   * @param {!Object} health - The health object for seeders and peers.\n   * @returns {Object} - A torrent object for a show.\n   */\n  _showTorrent(magnet: string, health: Object): Object {\n    return {\n      url: magnet,\n      seeds: health.seeds,\n      peers: health.peers,\n      provider: Cli._Name\n    }\n  }\n\n  /**\n   * Get a torrent object based on the type.\n   * @param {!string} link - The link to bind to the torrent object.\n   * @param {!string} type - The type of torrent object (movie|show).\n   * @returns {Promise<Object, undefined>} - A torrent object for a movie or\n   * show.\n   */\n  _getTorrent(link: string, type: string): Promise<Object | void> {\n    return new Promise((resolve, reject) => {\n      return parseTorrent.remote(link, (err, remote) => {\n        if (err) {\n          return reject(err)\n        }\n\n        const magnet = parseTorrent.toMagnetURI(remote)\n        return webtorrentHealth(magnet).then(health => {\n          const torrent = type === 'movie'\n            ? this._movieTorrent(magnet, health, remote)\n            : this._showTorrent(magnet, health)\n          return resolve(torrent)\n        })\n      })\n    })\n  }\n\n  /**\n   * Handle the --content CLI option to insert a movie torrent.\n   * @param {!string} t - The content type to add to the database.\n   * @param {!boolean} isAnime=false - True if the content is anime.\n   * @returns {Promise<Movie, Error>} - The inserted movie.\n   */\n  _moviePrompt(t: string, isAnime: boolean = false): Promise<Movie | Error> {\n    const { imdb, torrent, movieQuality, language } = promptSchemas\n    const movieSchema: Array<Object> = [\n      imdb,\n      torrent,\n      movieQuality,\n      language\n    ]\n\n    return this.database.connect().then(() => {\n      return inquirer.prompt(movieSchema).then(res => {\n        const { imdb, quality, language, torrent } = res\n        const movie = {\n          slugYear: imdb,\n          torrents: {}\n        }\n        const contentType = MovieProvider.ContentTypes.Movie\n        const movieProvider = new MovieProvider({}, {})\n        movieProvider.setConfig({\n          name: Cli._Name,\n          Helper: MovieHelper,\n          Model: isAnime ? AnimeMovie : Movie,\n          contentType\n        })\n\n        return this._getTorrent(torrent, contentType).then(res => {\n          movieProvider.attachTorrent({\n            movie,\n            quality,\n            torrent: res,\n            lang: language\n          })\n\n          return movieProvider.getContent(movie)\n        })\n      })\n    }).then(() => this.database.disconnect())\n      .then(() => process.exit(0))\n      .catch(err => {\n        console.error(`An error occurred: '${err}'`)\n        return process.exit(1)\n      })\n  }\n\n  /**\n   * Handle the --content CLI option to insert a movie torrent.\n   * @param {!string} t - The content type to add to the database.\n   * @param {!boolean} isAnime=false - True if the content is anime.\n   * @returns {Promise<Show, Error>} - The inserted show.\n   */\n  _showPrompt(t: string, isAnime: boolean = false): Promise<Show | Error> {\n    const {\n      imdb,\n      torrent,\n      showQuality,\n      season,\n      episode,\n      dateBased\n    } = promptSchemas\n    const showSchema: Array<Object> = [\n      imdb,\n      torrent,\n      showQuality,\n      season,\n      episode,\n      dateBased\n    ]\n\n    return this.database.connect().then(() => {\n      return inquirer.prompt(showSchema).then(res => {\n        const { imdb, season, episode, quality, dateBased, torrent } = res\n        const show = {\n          slug: imdb,\n          dateBased,\n          episodes: {}\n        }\n        const contentType = MovieProvider.ContentTypes.Show\n        const showProvider = new ShowProvider({}, {})\n        showProvider.setConfig({\n          name: Cli._Name,\n          Helper: ShowHelper,\n          Model: isAnime ? AnimeShow : Show,\n          contentType\n        })\n\n        return this._getTorrent(torrent, contentType).then(res => {\n          showProvider.attachTorrent({\n            show,\n            torrent: res,\n            season,\n            episode,\n            quality\n          })\n\n          return showProvider.getContent(show)\n        })\n      })\n    }).then(() => this.database.disconnect())\n      .then(() => process.exit(0))\n      .catch(err => {\n        console.error(`An error occurred: '${err}'`)\n        return process.exit(1)\n      })\n  }\n\n  /**\n   * Handle the --content CLI option.\n   * @param {!string} t - The content type to add to the database.\n   * @returns {Promise<Movie|Show, Error>|undefined} - The inserted movie or\n   * show.\n   */\n  _content(t: string): Promise<Movie | Show | Error> {\n    switch (t) {\n      case 'animemovie':\n        return this._moviePrompt(t, true)\n      case 'movie':\n        return this._moviePrompt(t)\n      case 'animeshow':\n        return this._showPrompt(t, true)\n      case 'show':\n        return this._showPrompt(t)\n      default:\n        console.error(`'${t}' is not a valid option for content!`)\n        return Promise.reject(process.exit(1))\n    }\n  }\n\n  /**\n   * Handle the --export CLI option.\n   * @param {!string} e - The collection to export.\n   * @returns {Promise<string, undefined>} - The promise to export a collection.\n   */\n  _export(e: string): Promise<string | void> {\n    process.env.TEMP_DIR = process.env.TEMP_DIR || path.join(...[\n      __dirname,\n      '..',\n      '..',\n      'tmp'\n    ])\n    const tempDir = process.env.TEMP_DIR\n\n    return this.database.exportFile(e, path.join(...[\n      tempDir,\n      `${e}s.json`\n    ]))\n      .then(() => process.exit(0))\n      .catch(err => {\n        console.error(`An error occurred: ${err}`)\n        return process.exit(1)\n      })\n  }\n\n  /**\n   * Handle the --import CLI option.\n   * @param {!string} i - The collection to import.\n   * @throws {Error} - Error: no such file found for 'JSON_FILE'\n   * @returns {Promise<string, undefined>|undefined} - The promise to import a\n   * collection.\n   */\n  _import(i: string): Promise<string | void> {\n    if (!fs.existsSync(i)) {\n      console.error(`File '${i}' does not exists!`)\n      return Promise.reject(process.exit(1))\n    }\n\n    const { confirm } = promptSchemas\n    return inquirer.prompt([confirm]).then(({ confirm }) => {\n      if (confirm) {\n        return this.database.importFile(path.basename(i, '.json'), i)\n      }\n\n      return process.exit(0)\n    }).catch(err => {\n      console.error(`An error occurred: ${err}`)\n      return process.exit(1)\n    })\n  }\n\n  /**\n   * Run the Cli program.\n   * @param {!PopApi} PopApi - The PopApi instance to bind the options to.\n   * @param {?Array<string>} argv - The arguments to be parsed by commander.\n   * @returns {undefined}\n   */\n  run(PopApi: any, argv?: Array<string>): any {\n    if (argv) {\n      this.program.parse(argv)\n    }\n\n    if (this.program.content) {\n      return this._content(this.program.content)\n    } else if (this.program.export) {\n      return this._export(this.program.export)\n    } else if (this.program.import) {\n      return this._import(this.program.import)\n    }\n\n    if (this.program.start) {\n      PopApi.startScraper = true\n    }\n\n    return super.run(PopApi)\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/middleware/Cli.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "Cli",
    "memberof": "src/middleware/Cli.js",
    "static": true,
    "longname": "src/middleware/Cli.js~Cli",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/middleware/Cli.js",
    "importStyle": "Cli",
    "description": "Class The class for the command line interface.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Cli"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "pop-api~BaseCli"
    ]
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "program",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#program",
    "access": "public",
    "description": "The command line parser to process the Cli inputs. ",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "name",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#name",
    "access": "public",
    "description": "The name of the Cli program. ",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "version",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#version",
    "access": "public",
    "description": "The verion of the Cli program. ",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_Name",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": true,
    "longname": "src/middleware/Cli.js~Cli._Name",
    "access": "private",
    "description": "The name of the Cli provider. Default is `Cli`. ",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "_database",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_database",
    "access": "private",
    "description": "The database middleware from `pop-api`. ",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#constructor",
    "access": "public",
    "description": "Create a CLI object.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the cli to."
      },
      {
        "nullable": false,
        "types": [
          "Ojbect"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options for the cli."
      },
      {
        "nullable": true,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.argv",
        "description": "The arguments to be parsed by\ncommander."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.name",
        "description": "The name of the Cli program."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.version",
        "description": "The version of the Cli program."
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "database",
    "memberof": "src/middleware/Cli.js~Cli",
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#database",
    "access": "public",
    "description": "The database middleware from `pop-api`.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "initOptions",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#initOptions",
    "access": "public",
    "description": "Initiate the options for the Cli.  ",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "The version of the Cli program."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "getHelp",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#getHelp",
    "access": "public",
    "description": "Method for displaying the --help option  ",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "_movieTorrent",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_movieTorrent",
    "access": "private",
    "description": "Return a torrent object for a movie.  ",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - A torrent object for a movie.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "magnet",
        "description": "The magnet url to bind."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "health",
        "description": "The health object for seeders and peers."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "remote",
        "description": "The remote data object from 'parseTorrent'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A torrent object for a movie."
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "_showTorrent",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_showTorrent",
    "access": "private",
    "description": "Return a torrent object for a show.  ",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - A torrent object for a show.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "magnet",
        "description": "The magnet url to bind."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "health",
        "description": "The health object for seeders and peers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A torrent object for a show."
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "_getTorrent",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_getTorrent",
    "access": "private",
    "description": "Get a torrent object based on the type.  ",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, undefined>} - A torrent object for a movie or\nshow.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "link",
        "description": "The link to bind to the torrent object."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of torrent object (movie|show)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, undefined>"
      ],
      "spread": false,
      "description": "A torrent object for a movie or\nshow."
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "_moviePrompt",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_moviePrompt",
    "access": "private",
    "description": "Handle the --content CLI option to insert a movie torrent.  ",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Movie, Error>} - The inserted movie.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "The content type to add to the database."
      },
      {
        "nullable": false,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isAnime",
        "description": "True if the content is anime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Movie, Error>"
      ],
      "spread": false,
      "description": "The inserted movie."
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "_showPrompt",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_showPrompt",
    "access": "private",
    "description": "Handle the --content CLI option to insert a movie torrent.  ",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Show, Error>} - The inserted show.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "The content type to add to the database."
      },
      {
        "nullable": false,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isAnime",
        "description": "True if the content is anime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Show, Error>"
      ],
      "spread": false,
      "description": "The inserted show."
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "_content",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_content",
    "access": "private",
    "description": "Handle the --content CLI option.  ",
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Movie|Show, Error>|undefined} - The inserted movie or\nshow.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "The content type to add to the database."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Movie|Show, Error>|undefined"
      ],
      "spread": false,
      "description": "The inserted movie or\nshow."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "_export",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_export",
    "access": "private",
    "description": "Handle the --export CLI option.  ",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string, undefined>} - The promise to export a collection.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "The collection to export."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, undefined>"
      ],
      "spread": false,
      "description": "The promise to export a collection."
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "_import",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#_import",
    "access": "private",
    "description": "Handle the --import CLI option.  ",
    "lineNumber": 351,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string, undefined>|undefined} - The promise to import a\ncollection.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "The collection to import."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string, undefined>",
        "undefined"
      ],
      "spread": false,
      "description": "The promise to import a\ncollection."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Error: no such file found for 'JSON_FILE'"
      }
    ]
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "run",
    "memberof": "src/middleware/Cli.js~Cli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middleware/Cli.js~Cli#run",
    "access": "public",
    "description": "Run the Cli program.  ",
    "lineNumber": 376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "PopApi"
        ],
        "spread": false,
        "optional": false,
        "name": "PopApi",
        "description": "The PopApi instance to bind the options to."
      },
      {
        "nullable": true,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "The arguments to be parsed by commander."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/middleware/index.js",
    "content": "// Export the necessary modules.\nexport Cli from './Cli'\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/middleware/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/middleware/promptschemas.js",
    "content": "// @flow\n\n/**\n * The available qualities for movies.\n * @type {Array<string>}\n */\nconst _movieQualities: Array<string> = ['720p', '1080p']\n\n/**\n * The available qualities for shows.\n * @type {Array<string>}\n */\nconst _showQualities: Array<string> = ['480p', ..._movieQualities]\n\n/**\n * The quality property.\n * @type {Object}\n */\nconst _baseQuality: Object = {\n  type: 'list',\n  name: 'quality'\n}\n\n/**\n * The imdb property.\n * @type {Object}\n */\nconst imdb: Object = {\n  type: 'input',\n  name: 'imdb',\n  message: 'The imdb id of the show/movie to add (tt1234567)',\n  validate(value: string): boolean | string {\n    const pass = /^(tt\\d{7})/i.test(value)\n    if (pass) {\n      return true\n    }\n\n    return 'Not a valid imdb id.'\n  }\n}\n\n/**\n * The torrent property.\n * @type {Object}\n */\nconst torrent: Object = {\n  type: 'input',\n  name: 'torrent',\n  message: 'The link to the torrent to add',\n  validate(value: string): boolean | string {\n    if (value && typeof value === 'string') {\n      return true\n    }\n\n    return 'Not a valid torrent.'\n  }\n}\n\n/**\n * The movie quality property\n * @type {Object}\n */\nconst movieQuality: Object = {\n  ..._baseQuality,\n  choices: _movieQualities,\n  message: 'The quality of the torrent (720p | 1080p)'\n}\n\n/**\n * The show quality property.\n * @type {Object}\n */\nconst showQuality: Object = {\n  ..._baseQuality,\n  choices: _showQualities,\n  message: 'The quality of the torrent (480p | 720p | 1080p)'\n}\n\n/**\n * The language property.\n * @type {Object}\n */\nconst language: Object = {\n  type: 'input',\n  name: 'language',\n  message: 'The language of the torrent to add (en, fr, jp)',\n  validate(value: string): boolean | string {\n    const pass = /^([a-zA-Z]{2})/i.test(value)\n    if (pass) {\n      return true\n    }\n\n    return 'Not a valid language'\n  }\n}\n\n/**\n * The season property.\n * @type {Object}\n */\nconst season: Object = {\n  type: 'input',\n  name: 'season',\n  message: 'The season number of the torrent',\n  validate(value: string): boolean | string {\n    const pass = /^(\\d+)/i.test(value)\n    if (pass) {\n      return true\n    }\n\n    return 'Not a valid season.'\n  }\n}\n\n/**\n * The episode property.\n * @type {Object}\n */\nconst episode: Object = {\n  type: 'input',\n  name: 'episode',\n  message: 'The episode number of the torrent',\n  validate(value: string): boolean | string {\n    const pass = /^(\\d+)/i.test(value)\n    if (pass) {\n      return true\n    }\n\n    return 'Not a valid episode.'\n  }\n}\n\n/**\n * The dateBased property.\n * @type {Object}\n */\nconst dateBased: Object = {\n  type: 'confirm',\n  name: 'confirm',\n  message: 'Is the show date based?',\n  default: false\n}\n\n/**\n * The confirm property.\n * @type {Object}\n */\nconst confirm: Object = {\n  type: 'confirm',\n  name: 'confirm',\n  message: 'Do you really want to import a collection? This can override the current data!',\n  default: false\n}\n\n/**\n * Bundle the schemas into one object.\n * @type {Object}\n */\nconst promptSchemas = {\n  imdb,\n  torrent,\n  movieQuality,\n  showQuality,\n  language,\n  season,\n  episode,\n  dateBased,\n  confirm\n}\n\n/**\n * Export the schemas.\n * @type {Object}\n */\nexport default promptSchemas\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/middleware/promptschemas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "_movieQualities",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~_movieQualities",
    "access": "private",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "_showQualities",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~_showQualities",
    "access": "private",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": "The available qualities for shows.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "_baseQuality",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~_baseQuality",
    "access": "private",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": "The quality property.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "imdb",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~imdb",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"name\": string, \"message\": string, \"validate\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "torrent",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~torrent",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": "The torrent property.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "movieQuality",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~movieQuality",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": "The movie quality property",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "showQuality",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~showQuality",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "{..._baseQuality: Object, \"choices\": *, \"message\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "language",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~language",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"name\": string, \"message\": string, \"validate\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "season",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~season",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": "The season property.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "episode",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~episode",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": "The episode property.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "dateBased",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~dateBased",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": "The dateBased property.",
    "lineNumber": 137,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "confirm",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~confirm",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"name\": string, \"message\": string, \"default\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "promptSchemas",
    "memberof": "src/middleware/promptschemas.js",
    "static": true,
    "longname": "src/middleware/promptschemas.js~promptSchemas",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/middleware/promptschemas.js",
    "importStyle": "promptSchemas",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "{\"imdb\": *, \"torrent\": *, \"movieQuality\": *, \"showQuality\": *, \"language\": *, \"season\": *, \"episode\": *, \"dateBased\": *, \"confirm\": *}"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/models/animemovie/AnimeMovieModel.js",
    "content": "// Import the necessary modules.\n// @flow\nimport MovieModel from '../movie/MovieModel'\n\n/**\n * Class for anime movie attributes and methods.\n * @extends {MovieModel}\n * @type {AnimeMovieModel}\n */\nexport default class AnimeMovieModel extends MovieModel {}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/animemovie/AnimeMovieModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "AnimeMovieModel",
    "memberof": "src/models/animemovie/AnimeMovieModel.js",
    "static": true,
    "longname": "src/models/animemovie/AnimeMovieModel.js~AnimeMovieModel",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/animemovie/AnimeMovieModel.js",
    "importStyle": "AnimeMovieModel",
    "description": "Class for anime movie attributes and methods.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "AnimeMovieModel"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "MovieModel"
    ]
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "src/models/animemovie/animeMovieSchema.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { Schema } from 'mongoose'\n\nimport { movieSchema } from '../movie/movieSchema'\n\n/**\n * The anime movie schema used by mongoose.\n * @type {Object}\n * @see http://mongoosejs.com/docs/guide.html\n */\nexport default new Schema(movieSchema, {\n  collection: 'animes'\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/animemovie/animeMovieSchema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/models/animemovie/index.js",
    "content": "// Import the necessary modules.\n// @flow\nimport mongoose from 'mongoose'\n\nimport AnimeMovieModel from './AnimeMovieModel'\nimport animeMovieSchema from './animeMovieSchema'\n\n// Define the indexes at the schema level.\nanimeMovieSchema.index({\n  title: 'text',\n  synopsis: 'text',\n  _id: 1\n})\n\n// Attach the functions from the classes to the schemas.\nanimeMovieSchema.loadClass(AnimeMovieModel)\n\n/**\n * The anime movie model.\n * @type {AnimeMovie}\n * @ignore\n */\nexport default mongoose.model(AnimeMovieModel, animeMovieSchema)\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/animemovie/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/models/animeshow/AnimeShowModel.js",
    "content": "// Import the necessary modules.\n// @flow\nimport ShowModel from '../show/ShowModel'\n\n/**\n * Class for anime show attributes and methods.\n * @extends {ShowModel}\n * @type {AnimeShowModel}\n */\nexport default class AnimeShowModel extends ShowModel {}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/animeshow/AnimeShowModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "AnimeShowModel",
    "memberof": "src/models/animeshow/AnimeShowModel.js",
    "static": true,
    "longname": "src/models/animeshow/AnimeShowModel.js~AnimeShowModel",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/animeshow/AnimeShowModel.js",
    "importStyle": "AnimeShowModel",
    "description": "Class for anime show attributes and methods.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "AnimeShowModel"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "ShowModel"
    ]
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/models/animeshow/animeShowSchema.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { Schema } from 'mongoose'\n\nimport { showSchema } from '../show/showSchema'\n\n/**\n * The anime show schema used by mongoose.\n * @type {Object}\n * @see http://mongoosejs.com/docs/guide.html\n */\nexport default new Schema(showSchema, {\n  collection: 'animes'\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/animeshow/animeShowSchema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/models/animeshow/index.js",
    "content": "// Import the necessary modules.\n// @flow\nimport mongoose from 'mongoose'\n\nimport AnimeShowModel from './AnimeShowModel'\nimport animeShowSchema from './animeShowSchema'\n\n// Define the indexes at the schema level.\nanimeShowSchema.index({\n  title: 'text',\n  synopsis: 'text',\n  _id: 1\n})\n\n// Attach the functions from the classes to the schemas.\nanimeShowSchema.loadClass(AnimeShowModel)\n\n/**\n * The anime show model.\n * @type {AhimeShow}\n * @ignore\n */\nexport default mongoose.model(AnimeShowModel, animeShowSchema)\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/animeshow/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/models/content/ContentModel.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable camelcase */\n/**\n * MongoDB object modeling designed to work in an asynchronous environment.\n * @external {Model} http://mongoosejs.com\n */\nimport { Model } from 'mongoose'\n\n/**\n * The images model type.\n * @typedef {Object} Rating\n * @property {!number} votes The votes of the rating.\n * @property {!number} watching The watching of the rating.\n * @property {!number} percentage The percentage of the rating.\n */\ntype Rating = {\n  votes: number,\n  watching: number,\n  percentage: number\n}\n\n/**\n * The images model type.\n * @typedef {Object} Images\n * @property {!string} banner The banner of the images.\n * @property {!string} fanart The fanart of the images.\n * @property {!string} poster The poster of the images.\n */\ntype Images = {\n  banner: string,\n  fanart: string,\n  poster: string\n}\n\n/**\n * The Content model.\n * @extends {Model}\n * @type {ContentModel}\n */\nexport default class ContentModel extends Model {\n\n  /**\n   * The id of the content.\n   * @type {string}\n   */\n  _id: any\n\n  /**\n   * The imdb id of the content.\n   * @type {string}\n   */\n  imdb_id: string\n\n  /**\n   * The title of the content.\n   * @type {string}\n   */\n  title: string\n\n  /**\n   * The year of the content.\n   * @type {number}\n   */\n  year: number\n\n  /**\n   * The slug of the content.\n   * @type {string}\n   */\n  slug: string\n\n  /**\n   * The synopsis of the content.\n   * @type {string}\n   */\n  synopsis: string\n\n  /**\n   * The runtime of the content.\n   * @type {number}\n   */\n  runtime: number\n\n  /**\n   * The rating of the content.\n   * @type {Rating}\n   */\n  rating: Rating\n\n  /**\n   * The images of the content.\n   * @type {Images}\n   */\n  images: Images\n\n  /**\n   * The genres of the content.\n   * @type {Array<string>}\n   */\n  genres: Array<string>\n\n  /**\n   * The type of the content.\n   * @type {string}\n   */\n  type: string\n\n  /**\n   * Create a new Content object.\n   * @param {!Object} config - The configuration object for the content.\n   * @param {!string} imdb_id - The imdb id of the content.\n   * @param {!string} title - The title of the content.\n   * @param {!number} year - The year of the content.\n   * @param {!string} slug - The slug of the content.\n   * @param {!string} synopsis - The synopsis of the content.\n   * @param {!number} runtime - The runtime of the content.\n   * @param {!Rating} rating - The rating of the content.\n   * @param {!Images} images - The images of the content.\n   * @param {!Array<string>} genres - The genres of the content.\n   * @param {!string} type - The type of the content.\n   */\n  constructor({\n    imdb_id,\n    title,\n    year,\n    slug,\n    synopsis,\n    runtime,\n    rating,\n    images,\n    genres,\n    type\n  }: Object): void {\n    super()\n\n    /**\n     * The id of the content.\n     * @type {string}\n     */\n    this._id = imdb_id\n    /**\n     * [\n     * @type {string}\n     */\n    this.imdb_id = imdb_id\n    /**\n     * The title of the content.\n     * @type {string}\n     */\n    this.title = title\n    /**\n     * The year of the content.\n     * @type {number}\n     */\n    this.year = year\n    /**\n     * The slug of the content.\n     * @type {string}\n     */\n    this.slug = slug\n    /**\n     * The synopsis of the content.\n     * @type {string}\n     */\n    this.synopsis = synopsis\n    /**\n     * The runtime of the content.\n     * @type {number}\n     */\n    this.runtime = runtime\n    /**\n     * The rating of the content.\n     * @type {Rating}\n     */\n    this.rating = rating\n    /**\n     * The images of the content.\n     * @type {Images}\n     */\n    this.images = images\n    /**\n     * The genres of the content.\n     * @type {Array<string>}\n     */\n    this.genres = genres\n    /**\n     * The type of the content.\n     * @type {string}\n     */\n    this.type = type\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/content/ContentModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "Model",
    "externalLink": "http://mongoosejs.com",
    "memberof": "src/models/content/ContentModel.js",
    "static": true,
    "longname": "src/models/content/ContentModel.js~Model",
    "access": "public",
    "description": "MongoDB object modeling designed to work in an asynchronous environment.",
    "lineNumber": 8
  },
  {
    "__docId__": 117,
    "kind": "typedef",
    "name": "Rating",
    "memberof": "src/models/content/ContentModel.js",
    "static": true,
    "longname": "src/models/content/ContentModel.js~Rating",
    "access": "public",
    "description": "The images model type.",
    "lineNumber": 17,
    "properties": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "votes",
        "description": "The votes of the rating."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "watching",
        "description": "The watching of the rating."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "percentage",
        "description": "The percentage of the rating."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Rating"
    }
  },
  {
    "__docId__": 118,
    "kind": "typedef",
    "name": "Images",
    "memberof": "src/models/content/ContentModel.js",
    "static": true,
    "longname": "src/models/content/ContentModel.js~Images",
    "access": "public",
    "description": "The images model type.",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "banner",
        "description": "The banner of the images."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fanart",
        "description": "The fanart of the images."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "poster",
        "description": "The poster of the images."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Images"
    }
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "ContentModel",
    "memberof": "src/models/content/ContentModel.js",
    "static": true,
    "longname": "src/models/content/ContentModel.js~ContentModel",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/content/ContentModel.js",
    "importStyle": "ContentModel",
    "description": "The Content model.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "ContentModel"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "Model"
    ]
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "_id",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#_id",
    "access": "private",
    "description": "The id of the content. ",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "imdb_id",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#imdb_id",
    "access": "public",
    "description": "The imdb id of the content. ",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "title",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#title",
    "access": "public",
    "description": "The title of the content. ",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "year",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#year",
    "access": "public",
    "description": "The year of the content. ",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "slug",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#slug",
    "access": "public",
    "description": "The slug of the content. ",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "synopsis",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#synopsis",
    "access": "public",
    "description": "The synopsis of the content. ",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "runtime",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#runtime",
    "access": "public",
    "description": "The runtime of the content. ",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "rating",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#rating",
    "access": "public",
    "description": "The rating of the content. ",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "Rating"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "images",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#images",
    "access": "public",
    "description": "The images of the content. ",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Images"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "genres",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#genres",
    "access": "public",
    "description": "The genres of the content. ",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "type",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#type",
    "access": "public",
    "description": "The type of the content. ",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/models/content/ContentModel.js~ContentModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/content/ContentModel.js~ContentModel#constructor",
    "access": "public",
    "description": "Create a new Content object.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration object for the content."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imdb_id",
        "description": "The imdb id of the content."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The title of the content."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "year",
        "description": "The year of the content."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the content."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "synopsis",
        "description": "The synopsis of the content."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "runtime",
        "description": "The runtime of the content."
      },
      {
        "nullable": false,
        "types": [
          "Rating"
        ],
        "spread": false,
        "optional": false,
        "name": "rating",
        "description": "The rating of the content."
      },
      {
        "nullable": false,
        "types": [
          "Images"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "The images of the content."
      },
      {
        "nullable": false,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "genres",
        "description": "The genres of the content."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the content."
      }
    ]
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/models/content/contentSchema.js",
    "content": "// @flow\n\n/**\n * Base structure of the database content.\n * @type {Object}\n * @see http://mongoosejs.com/docs/guide.html\n */\nexport const contentSchema: Object = {\n  _id: {\n    type: String,\n    required: true\n  },\n  imdb_id: String,\n  title: String,\n  year: Number,\n  slug: String,\n  synopsis: String,\n  runtime: Number,\n  rating: {\n    percentage: {\n      type: Number\n    },\n    watching: {\n      type: Number\n    },\n    votes: {\n      type: Number\n    }\n  },\n  images: {\n    banner: {\n      type: String\n    },\n    fanart: {\n      type: String\n    },\n    poster: {\n      type: String\n    }\n  },\n  genres: [String],\n  type: {\n    type: String\n  }\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/content/contentSchema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "contentSchema",
    "memberof": "src/models/content/contentSchema.js",
    "static": true,
    "longname": "src/models/content/contentSchema.js~contentSchema",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/content/contentSchema.js",
    "importStyle": "{contentSchema}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"_id\": *, \"imdb_id\": *, \"title\": *, \"year\": *, \"slug\": *, \"synopsis\": *, \"runtime\": *, \"rating\": *, \"images\": *, \"genres\": *, \"type\": *}"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/models/index.js",
    "content": "// Import the necessary modules.\nexport AnimeMovie from './animemovie'\nexport AnimeShow from './animeshow'\nexport ProviderConfig from './providerconfig'\nexport Movie from './movie'\nexport Show from './show'\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/models/movie/MovieModel.js",
    "content": "// Import the necessary modules.\n// @flow\nimport ContentModel from '../content/ContentModel'\n\n/**\n * Class for movie attributes and methods.\n * @extends {ContentModel}\n * @type {MovieModel}\n */\nexport default class MovieModel extends ContentModel {\n\n  /**\n   * The language of the movie.\n   * @type {string}\n   */\n  language: string\n\n  /**\n   * The release date of the movie.\n   * @type {number}\n   */\n  released: number\n\n  /**\n   * The trailer of the movie.\n   * @type {string}\n   */\n  trailer: string\n\n  /**\n   * The certification of the movie.\n   * @type {string}\n   */\n  certification: string\n\n  /**\n   * The torrents of the movie.\n   * @type {Object}\n   */\n  torrents: Object\n\n  /**\n   * Create a new Movie object.\n   * @param {!Object} config={} - The configuration object for the movie.\n   * @param {!string} imdb_id - The imdb id of the movie.\n   * @param {!string} title - The title of the movie.\n   * @param {!number} year - The year of the movie.\n   * @param {!string} slug - The slug of the movie.\n   * @param {!string} synopsis - The synopsis of the movie.\n   * @param {!number} runtime - The runtime of the movie.\n   * @param {!Rating} rating - The rating of the movie.\n   * @param {!Images} images - The images of the movie.\n   * @param {!Array<string>} genres - The genres of the movie.\n   * @param {!string} [type=movie] - The type of the movie.\n   * @param {!string} [language=en] - The language of the movie.\n   * @param {!number} released - The release date of the movie.\n   * @param {!string} trailer - The trailer of the movie.\n   * @param {!string} certification - The certification of the movie.\n   * @param {!Object} torrents - The torrents of the movie.\n   */\n  constructor({\n    imdb_id, // eslint-disable-line camelcase\n    title,\n    year,\n    slug,\n    synopsis,\n    runtime,\n    rating,\n    images,\n    genres,\n    type = 'movie',\n    language = 'en',\n    released,\n    trailer,\n    certification,\n    torrents\n  }: Object = {}): void {\n    super({\n      imdb_id,\n      title,\n      year,\n      slug,\n      synopsis,\n      runtime,\n      rating,\n      images,\n      genres,\n      type\n    })\n\n    /**\n     * The language of the movie.\n     * @type {string}\n     */\n    this.language = language\n    /**\n     * The release date of the movie.\n     * @type {number}\n     */\n    this.released = released\n    /**\n     * The trailer of the movie.\n     * @type {string}\n     */\n    this.trailer = trailer\n    /**\n     * The certification of the movie.\n     * @type {string}\n     */\n    this.certification = certification\n    /**\n     * The torrents of the movie.\n     * @type {Object}\n     */\n    this.torrents = torrents\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/movie/MovieModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "class",
    "name": "MovieModel",
    "memberof": "src/models/movie/MovieModel.js",
    "static": true,
    "longname": "src/models/movie/MovieModel.js~MovieModel",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/movie/MovieModel.js",
    "importStyle": "MovieModel",
    "description": "Class for movie attributes and methods.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "MovieModel"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "ContentModel"
    ]
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "language",
    "memberof": "src/models/movie/MovieModel.js~MovieModel",
    "static": false,
    "longname": "src/models/movie/MovieModel.js~MovieModel#language",
    "access": "public",
    "description": "The language of the movie. ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "released",
    "memberof": "src/models/movie/MovieModel.js~MovieModel",
    "static": false,
    "longname": "src/models/movie/MovieModel.js~MovieModel#released",
    "access": "public",
    "description": "The release date of the movie. ",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "trailer",
    "memberof": "src/models/movie/MovieModel.js~MovieModel",
    "static": false,
    "longname": "src/models/movie/MovieModel.js~MovieModel#trailer",
    "access": "public",
    "description": "The trailer of the movie. ",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "certification",
    "memberof": "src/models/movie/MovieModel.js~MovieModel",
    "static": false,
    "longname": "src/models/movie/MovieModel.js~MovieModel#certification",
    "access": "public",
    "description": "The certification of the movie. ",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "torrents",
    "memberof": "src/models/movie/MovieModel.js~MovieModel",
    "static": false,
    "longname": "src/models/movie/MovieModel.js~MovieModel#torrents",
    "access": "public",
    "description": "The torrents of the movie. ",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/models/movie/MovieModel.js~MovieModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/movie/MovieModel.js~MovieModel#constructor",
    "access": "public",
    "description": "Create a new Movie object.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "config",
        "description": "The configuration object for the movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imdb_id",
        "description": "The imdb id of the movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The title of the movie."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "year",
        "description": "The year of the movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "synopsis",
        "description": "The synopsis of the movie."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "runtime",
        "description": "The runtime of the movie."
      },
      {
        "nullable": false,
        "types": [
          "Rating"
        ],
        "spread": false,
        "optional": false,
        "name": "rating",
        "description": "The rating of the movie."
      },
      {
        "nullable": false,
        "types": [
          "Images"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "The images of the movie."
      },
      {
        "nullable": false,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "genres",
        "description": "The genres of the movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "movie",
        "defaultRaw": "movie",
        "name": "type",
        "description": "The type of the movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "en",
        "defaultRaw": "en",
        "name": "language",
        "description": "The language of the movie."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "released",
        "description": "The release date of the movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "trailer",
        "description": "The trailer of the movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "certification",
        "description": "The certification of the movie."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrents",
        "description": "The torrents of the movie."
      }
    ]
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/models/movie/index.js",
    "content": "// Import the necessary modules.\n// @flow\nimport mongoose from 'mongoose'\n\nimport MovieModel from './MovieModel'\nimport movieSchema from './movieSchema'\n\n// Define the indexes at the schema level.\nmovieSchema.index({\n  title: 'text',\n  synopsis: 'text',\n  _id: 1\n})\n\n// Attach the functions from the classes to the schemas.\nmovieSchema.loadClass(MovieModel)\n\n/**\n * The movie model.\n * @type {Movie}\n * @ignore\n */\nexport default mongoose.model(MovieModel, movieSchema)\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/movie/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/models/movie/movieSchema.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { Schema } from 'mongoose'\n\nimport { contentSchema } from '../content/contentSchema'\n\n/**\n * The schema object for the movie model.\n * @type {Object}\n */\nexport const movieSchema: Object = {\n  ...contentSchema,\n  language: String,\n  released: Number,\n  trailer: {\n    type: String,\n    default: null\n  },\n  certification: String,\n  torrents: {}\n}\n\n/**\n * The movie schema used by mongoose.\n * @type {Object}\n * @see http://mongoosejs.com/docs/guide.html\n */\nexport default new Schema(movieSchema, {\n  collection: 'movies'\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/movie/movieSchema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "movieSchema",
    "memberof": "src/models/movie/movieSchema.js",
    "static": true,
    "longname": "src/models/movie/movieSchema.js~movieSchema",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/movie/movieSchema.js",
    "importStyle": "{movieSchema}",
    "description": "The schema object for the movie model.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/models/providerconfig/ProviderConfigModel.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { Model } from 'mongoose'\n\n/**\n * Class for provider configuration attributes and methods.\n * @extends {Model}\n * @type {ProviderConfigModel}\n */\nexport default class ProviderConfigModel extends Model {\n\n  /**\n   * The id of the provider configuration.\n   * @type {string}\n   */\n  _id: string\n\n  /**\n   * The API of the provider configuration.\n   * @type {string}\n   */\n  api: string\n\n  /**\n   * The modelType of the provider configuration.\n   * @type {string}\n   */\n  modelType: string\n\n  /**\n   * The name of the provider configuration.\n   * @type {string}\n   */\n  name: string\n\n  /**\n   * The type of the provider configuration.\n   * @type {string}\n   */\n  type: string\n\n  /**\n   * The clazz of the provider configuration.\n   * @type {string}\n   */\n  clazz: string\n\n  /**\n   * The query of the provider configuration.\n   * @type {Object}\n   */\n  query: Object\n\n  /**\n   * Create a new ProviderConfig object.\n   * @param {!Object} config - The configuration object for the content.\n   * @param {!string} api - The API of the provider configuration.\n   * @param {!string} modelType - The modelType of the provider configuration.\n   * @param {!string} name - The name of the provider configuration.\n   * @param {!string} type - The type of the provider configuration.\n   * @param {!string} clazz - The clazz of the provider configuration.\n   * @param {?Object} query - The query of the provider configuration.\n   */\n  constructor({ api, modelType, name, type, clazz, query }: Object = {}): void {\n    super()\n\n    /**\n     * The id of the provider configuration.\n     * @type {string}\n     */\n    this._id = name\n    /**\n     * The API of the provider configuration.\n     * @type {string}\n     */\n    this.api = api\n    /**\n     * The modelType of the provider configuration.\n     * @type {string}\n     */\n    this.modelType = modelType\n    /**\n     * The name of the provider configuration.\n     * @type {string}\n     */\n    this.name = name\n    /**\n     * The type of the provider configuration.\n     * @type {string}\n     */\n    this.type = type\n    /**\n     * The clazz of the provider configuration.\n     * @type {string}\n     */\n    this.clazz = clazz\n    /**\n     * The query of the provider configuration.\n     * @type {Object}\n     */\n    this.query = query\n  }\n\n  /**\n   * Getter for the id of the provider configuration.\n   * @return {string} - The id of the provider configuration.\n   */\n  get id(): string {\n    return this._id\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/providerconfig/ProviderConfigModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "ProviderConfigModel",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js",
    "static": true,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/providerconfig/ProviderConfigModel.js",
    "importStyle": "ProviderConfigModel",
    "description": "Class for provider configuration attributes and methods.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "ProviderConfigModel"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "Model"
    ]
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "_id",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#_id",
    "access": "private",
    "description": "The id of the provider configuration. ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "api",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#api",
    "access": "public",
    "description": "The API of the provider configuration. ",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "modelType",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#modelType",
    "access": "public",
    "description": "The modelType of the provider configuration. ",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "name",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#name",
    "access": "public",
    "description": "The name of the provider configuration. ",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "type",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#type",
    "access": "public",
    "description": "The type of the provider configuration. ",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "clazz",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#clazz",
    "access": "public",
    "description": "The clazz of the provider configuration. ",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "query",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#query",
    "access": "public",
    "description": "The query of the provider configuration. ",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#constructor",
    "access": "public",
    "description": "Create a new ProviderConfig object.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration object for the content."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "The API of the provider configuration."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "modelType",
        "description": "The modelType of the provider configuration."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the provider configuration."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the provider configuration."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "clazz",
        "description": "The clazz of the provider configuration."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "The query of the provider configuration."
      }
    ]
  },
  {
    "__docId__": 179,
    "kind": "get",
    "name": "id",
    "memberof": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/providerconfig/ProviderConfigModel.js~ProviderConfigModel#id",
    "access": "public",
    "description": "Getter for the id of the provider configuration. ",
    "lineNumber": 108,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The id of the provider configuration."
    },
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/models/providerconfig/index.js",
    "content": "// Import the necessary modules.\n// @flow\nimport mongoose from 'mongoose'\n\nimport ProviderConfigModel from './ProviderConfigModel'\nimport providerConfigSchema from './providerConfigSchema'\n\n// Attach the functions from the classes to the schemas.\nproviderConfigSchema.loadClass(ProviderConfigModel)\n\n/**\n * The provider configuration model.\n * @type {ProviderConfig}\n * @ignore\n */\nexport default mongoose.model(\n  ProviderConfigModel, providerConfigSchema, 'providerconfigs'\n)\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/providerconfig/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/models/providerconfig/providerConfigSchema.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { Schema } from 'mongoose'\n\n/**\n * The provider configuration schema used by mongoose.\n * @type {Object}\n * @see http://mongoosejs.com/docs/guide.html\n */\nexport default new Schema({\n  _id: {\n    type: String,\n    required: true\n  },\n  api: {\n    type: String,\n    required: true\n  },\n  modelType: {\n    type: String,\n    required: true\n  },\n  name: {\n    type: String,\n    required: true\n  },\n  type: {\n    type: String,\n    required: true\n  },\n  clazz: {\n    type: String,\n    required: true\n  },\n  query: {\n    type: Object\n  }\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/providerconfig/providerConfigSchema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/models/show/ShowModel.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable camelcase */\nimport ContentModel from '../content/ContentModel'\n\n/**\n * The episode model type.\n * @typedef {Object} Episode\n * @property {!string} tvdb_id The tvdb_id of the episode.\n * @property {!number} season The season of the episode.\n * @property {!number} episode The episode of the episode.\n * @property {!string} title The title of the episode.\n * @property {!string} overview The overview of the episode.\n * @property {!boolean} date_based The date based of the episode.\n * @property {!number} first_aired The first aired time of the episode.\n * @property {!Object} torrents The torrents of the episode.\n */\ntype Episode = {\n  tvdb_id: string,\n  season: number,\n  episode: number,\n  title: string,\n  overview: string,\n  date_based: boolean,\n  first_aired: number,\n  torrents: Object\n}\n\n/**\n * Class for show attributes and methods.\n * @extends {ContentModel}\n * @type {ShowModel}\n */\nexport default class ShowModel extends ContentModel {\n\n  /**\n   * The tvdb id of the show.\n   * @type {number}\n   */\n  tvdb_id: number\n\n  /**\n   * The country of the show.\n   * @type {string}\n   */\n  country: string\n\n  /**\n   * The network of the show.\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * The air day of the show.\n   * @type {string}\n   */\n  air_day: string\n\n  /**\n   * The air time of the show.\n   * @type {number}\n   */\n  air_time: string\n\n  /**\n   * The status of the show.\n   * @type {string}\n   */\n  status: string\n\n  /**\n   * The number of seasons of the show.\n   * @type {number}\n   */\n  num_seasons: number\n\n  /**\n   * The time the show was last updated.\n   * @type {number}\n   */\n  last_updated: number\n\n  /**\n   * The latest episode of the show.\n   * @type {number}\n   */\n  latest_episode: number\n\n  /**\n   * The episodes of the show.\n   * @type {Array<Episode>}\n   */\n  episodes: Array<Episode>\n\n  /**\n   * Create a new Show object.\n   * @param {!Object} config={} - The configuration object for the show.\n   * @param {!string} imdb_id - The imdb id of the show.\n   * @param {!string} title - The title of the show.\n   * @param {!number} year - The year of the show.\n   * @param {!string} slug - The slug of the show.\n   * @param {!string} synopsis - The synopsis of the show.\n   * @param {!number} runtime - The runtime of the show.\n   * @param {!Rating} rating - The rating of the show.\n   * @param {!Images} images - The images of the show.\n   * @param {!Array<string>} genres - The genres of the show.\n   * @param {!string} [type=tvshow] - The type of the show.\n   * @param {!number} tvdb_id - The tvdb id of the show.\n   * @param {!string} country - The country of the show.\n   * @param {!string} network - The network of the show.\n   * @param {!string} air_day - The air day of the show.\n   * @param {!number} air_time - The air time of the show.\n   * @param {!string} status - The status of the show.\n   * @param {!number} num_seasons - The number of seasons of the show.\n   * @param {!number} last_updated=0 - The time the show was last updated.\n   * @param {!number} latest_episode - The latest episode of the show.\n   * @param {!Array<Episode>} episodes - The episodes of the show.\n   */\n  constructor({\n    imdb_id,\n    title,\n    year,\n    slug,\n    synopsis,\n    runtime,\n    rating,\n    images,\n    genres,\n    type = 'tvshow',\n    tvdb_id,\n    country,\n    network,\n    air_day,\n    air_time,\n    status,\n    num_seasons,\n    last_updated,\n    latest_episode = 0,\n    episodes\n  }: Object = {}): void {\n    super({\n      imdb_id,\n      title,\n      year,\n      slug,\n      synopsis,\n      runtime,\n      rating,\n      images,\n      genres,\n      type\n    })\n\n    /**\n     * The tvdb id of the show.\n     * @type {number}\n     */\n    this.tvdb_id = tvdb_id\n    /**\n     * The country of the show.\n     * @type {string}\n     */\n    this.country = country\n    /**\n     * The network of the show.\n     * @type {string}\n     */\n    this.network = network\n    /**\n     * The air day of the show.\n     * @type {string}\n     */\n    this.air_day = air_day\n    /**\n     * The air time of the show.\n     * @type {number}\n     */\n    this.air_time = air_time\n    /**\n     * The status of the show.\n     * @type {string}\n     */\n    this.status = status\n    /**\n     * The number of seasons of the show.\n     * @type {number}\n     */\n    this.num_seasons = num_seasons\n    /**\n     * The time the show was last updated.\n     * @type {number}\n     */\n    this.last_updated = last_updated\n    /**\n     * The latest episode of the show.\n     * @type {number}\n     */\n    this.latest_episode = latest_episode\n    /**\n     * The episodes of the show.\n     * @type {Array<Object>}\n     */\n    this.episodes = episodes\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/show/ShowModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "typedef",
    "name": "Episode",
    "memberof": "src/models/show/ShowModel.js",
    "static": true,
    "longname": "src/models/show/ShowModel.js~Episode",
    "access": "public",
    "description": "The episode model type.",
    "lineNumber": 18,
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tvdb_id",
        "description": "The tvdb_id of the episode."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "season",
        "description": "The season of the episode."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "episode",
        "description": "The episode of the episode."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The title of the episode."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "overview",
        "description": "The overview of the episode."
      },
      {
        "nullable": false,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "date_based",
        "description": "The date based of the episode."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first_aired",
        "description": "The first aired time of the episode."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrents",
        "description": "The torrents of the episode."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Episode"
    }
  },
  {
    "__docId__": 184,
    "kind": "class",
    "name": "ShowModel",
    "memberof": "src/models/show/ShowModel.js",
    "static": true,
    "longname": "src/models/show/ShowModel.js~ShowModel",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/show/ShowModel.js",
    "importStyle": "ShowModel",
    "description": "Class for show attributes and methods.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "ShowModel"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "ContentModel"
    ]
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "tvdb_id",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#tvdb_id",
    "access": "public",
    "description": "The tvdb id of the show. ",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "country",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#country",
    "access": "public",
    "description": "The country of the show. ",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "network",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#network",
    "access": "public",
    "description": "The network of the show. ",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "air_day",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#air_day",
    "access": "public",
    "description": "The air day of the show. ",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "air_time",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#air_time",
    "access": "public",
    "description": "The air time of the show. ",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "status",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#status",
    "access": "public",
    "description": "The status of the show. ",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "num_seasons",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#num_seasons",
    "access": "public",
    "description": "The number of seasons of the show. ",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "last_updated",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#last_updated",
    "access": "public",
    "description": "The time the show was last updated. ",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "latest_episode",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#latest_episode",
    "access": "public",
    "description": "The latest episode of the show. ",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "episodes",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#episodes",
    "access": "public",
    "description": "The episodes of the show. ",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/models/show/ShowModel.js~ShowModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/models/show/ShowModel.js~ShowModel#constructor",
    "access": "public",
    "description": "Create a new Show object.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "config",
        "description": "The configuration object for the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imdb_id",
        "description": "The imdb id of the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The title of the show."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "year",
        "description": "The year of the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "synopsis",
        "description": "The synopsis of the show."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "runtime",
        "description": "The runtime of the show."
      },
      {
        "nullable": false,
        "types": [
          "Rating"
        ],
        "spread": false,
        "optional": false,
        "name": "rating",
        "description": "The rating of the show."
      },
      {
        "nullable": false,
        "types": [
          "Images"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "The images of the show."
      },
      {
        "nullable": false,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "genres",
        "description": "The genres of the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "tvshow",
        "defaultRaw": "tvshow",
        "name": "type",
        "description": "The type of the show."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tvdb_id",
        "description": "The tvdb id of the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "country",
        "description": "The country of the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "network",
        "description": "The network of the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "air_day",
        "description": "The air day of the show."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "air_time",
        "description": "The air time of the show."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The status of the show."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num_seasons",
        "description": "The number of seasons of the show."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "last_updated",
        "description": "The time the show was last updated."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "latest_episode",
        "description": "The latest episode of the show."
      },
      {
        "nullable": false,
        "types": [
          "Array<Episode>"
        ],
        "spread": false,
        "optional": false,
        "name": "episodes",
        "description": "The episodes of the show."
      }
    ]
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/models/show/index.js",
    "content": "// Import the necessary modules.\n// @flow\nimport mongoose from 'mongoose'\n\nimport ShowModel from './ShowModel'\nimport showSchema from './showSchema'\n\n// Define the indexes at the schema level.\nshowSchema.index({\n  title: 'text',\n  synopsis: 'text',\n  _id: 1\n})\n\n// Attach the functions from the classes to the schemas.\nshowSchema.loadClass(ShowModel)\n\n/**\n * The show model.\n * @type {Show}\n * @ignore\n */\nexport default mongoose.model(ShowModel, showSchema)\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/show/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/models/show/showSchema.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { Schema } from 'mongoose'\n\nimport { contentSchema } from '../content/contentSchema'\n\n/**\n * The schema object for the show model.\n * @type {Object}\n */\nexport const showSchema: Object = {\n  ...contentSchema,\n  tvdb_id: Number,\n  country: String,\n  network: String,\n  air_day: String,\n  air_time: String,\n  status: String,\n  num_seasons: Number,\n  last_updated: Number,\n  latest_episode: {\n    type: Number,\n    default: 0\n  },\n  episodes: {\n    type: [{\n      tvdb_id: Number,\n      season: Number,\n      episode: Number,\n      title: String,\n      overview: String,\n      date_based: Boolean,\n      first_aired: Number,\n      torrents: {}\n    }]\n  }\n}\n\n/**\n * The show schema used by mongoose.\n * @type {Object}\n * @see http://mongoosejs.com/docs/guide.html\n */\nexport default new Schema(showSchema, {\n  collection: 'shows'\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/models/show/showSchema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "showSchema",
    "memberof": "src/models/show/showSchema.js",
    "static": true,
    "longname": "src/models/show/showSchema.js~showSchema",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/models/show/showSchema.js",
    "importStyle": "{showSchema}",
    "description": "The schema object for the show model.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/scraper/apiModules.js",
    "content": "// Import the necessary modules.\n// @flow\nimport dotenv from 'dotenv'\n\n/**\n * An EZTV API wrapper to get data from eztv.ag.\n * @external {Eztv} https://github.com/ChrisAlderson/eztv-api-pt\n */\nimport Eztv from 'eztv-api-pt'\n/**\n * A Fanart.tv API wrapper for NodeJS.\n * @external {Fanart} https://github.com/ChrisAlderson/fanart.tv-api\n */\nimport Fanart from 'fanart.tv-api'\n/**\n * A HorribleSubs API wrapper to get data from horriblesubs.info\n * @external {HorribleSubs} https://github.com/ChrisAlderson/horriblesubs-api\n */\nimport HorribleSubs from 'horriblesubs-api'\n/**\n * A KickassTorrents API wrapper for NodeJs.\n * @external {Kat} https://github.com/ChrisAlderson/kat-api-pt\n */\nimport Kat from 'kat-api-pt'\n/**\n * A nyaa.se API wrapper for NodeJS.\n * @external {Nyaa} https://github.com/ChrisAlderson/nyaa-api-pt\n */\nimport Nyaa from 'nyaa-api-pt'\n/**\n * An OMDB API wrapper for NodeJS.\n * @external {Omdb} https://github.com/ChrisAlderson/omdb-api-pt\n */\nimport Omdb from 'omdb-api-pt'\n/**\n * TheMovieDB API wrapper, written in node.js\n * @external {Tmdb} https://github.com/vankasteelj/tmdbapi\n */\nimport Tmdb from 'tmdbapi'\n/**\n * A Trakt.tv API wrapper for Node.js\n * @external {Trakt} https://github.com/vankasteelj/trakt.tv\n */\nimport Trakt from 'trakt.tv'\n/**\n * Node.js library for accessing TheTVDB API\n * @external {Tvdb} https://github.com/edwellbrook/node-tvdb\n */\nimport Tvdb from 'node-tvdb'\n/**\n * A NodeJS wrapper for yts.ag\n * @external {Yts} https://github.com/ChrisAlderson/yts-api-pt\n */\nimport Yts from 'yts-api-pt'\ndotenv.config()\n\n/**\n * A configured Eztv API.\n * @type {Eztv}\n * @see https://github.com/ChrisAlderson/eztv-api-pt\n */\nconst eztv = new Eztv()\neztv.getAll = eztv.getAllShows\neztv.getData = eztv.getShowData\n\n/**\n * A configured Fanart API.\n * @type {Fanart}\n * @see https://github.com/ChrisAlderson/fanart.tv-api\n */\nconst fanart = new Fanart({\n  apiKey: process.env.FANART_KEY\n})\n\n/**\n * A configured HorribleSubs API.\n * @type {HorribleSubs}\n * @see https://github.com/ChrisAlderson/horriblesubs-api\n */\nconst horribleSubs = new HorribleSubs()\nhorribleSubs.getAll = horribleSubs.getAllAnime\nhorribleSubs.getData = horribleSubs.getAnimeData\n\n/**\n * A configured Kat API.\n * @type {Kat}\n * @see https://github.com/ChrisAlderson/kat-api-pt\n */\nconst kat = new Kat()\n\n/**\n * A configured Nyaa API.\n * @type {Nyaa}\n * @see https://github.com/ChrisAlderson/nyaa-api-pt\n */\nconst nyaa = new Nyaa({\n  apiToken: process.env.NYAA_KEY\n})\n\n/**\n * A configured Omdb API.\n * @type {Omdb}\n * @see https://github.com/ChrisAlderson/omdb-api-pt\n */\nconst omdb = new Omdb({\n  apiKey: process.env.OMDB_KEY\n})\n\n/**\n * A configured Tmdb API.\n * @type {Tmdb}\n * @see https://github.com/vankasteelj/tmdbapi\n */\nconst tmdb = new Tmdb({\n  apiv3: process.env.TMDB_KEY\n})\n\n/**\n * A configured Trakt API.\n * @type {Trakt}\n * @see https://github.com/vankasteelj/trakt.tv\n */\nconst trakt = new Trakt({\n  client_id: process.env.TRAKT_KEY\n})\n\n/**\n * A configured Tvdb API.\n * @type {Tvdb}\n * @see https://github.com/edwellbrook/node-tvdb\n */\nconst tvdb = new Tvdb(process.env.TVDB_KEY)\n\n/**\n * A configured Yts API.\n * @type {Yts}\n * @see https://github.com/ChrisAlderson/yts-api-pt\n */\nconst yts = new Yts()\nyts.search = yts.getMovies\n\n/**\n * Export the API modules.\n * @type {Object}\n * @ignore\n */\nexport {\n  eztv,\n  fanart,\n  horribleSubs,\n  kat,\n  nyaa,\n  omdb,\n  tmdb,\n  trakt,\n  tvdb,\n  yts\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/apiModules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "external",
    "name": "Eztv",
    "externalLink": "https://github.com/ChrisAlderson/eztv-api-pt",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Eztv",
    "access": "public",
    "description": "An EZTV API wrapper to get data from eztv.ag.",
    "lineNumber": 9
  },
  {
    "__docId__": 211,
    "kind": "external",
    "name": "Fanart",
    "externalLink": "https://github.com/ChrisAlderson/fanart.tv-api",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Fanart",
    "access": "public",
    "description": "A Fanart.tv API wrapper for NodeJS.",
    "lineNumber": 14
  },
  {
    "__docId__": 212,
    "kind": "external",
    "name": "HorribleSubs",
    "externalLink": "https://github.com/ChrisAlderson/horriblesubs-api",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~HorribleSubs",
    "access": "public",
    "description": "A HorribleSubs API wrapper to get data from horriblesubs.info",
    "lineNumber": 19
  },
  {
    "__docId__": 213,
    "kind": "external",
    "name": "Kat",
    "externalLink": "https://github.com/ChrisAlderson/kat-api-pt",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Kat",
    "access": "public",
    "description": "A KickassTorrents API wrapper for NodeJs.",
    "lineNumber": 24
  },
  {
    "__docId__": 214,
    "kind": "external",
    "name": "Nyaa",
    "externalLink": "https://github.com/ChrisAlderson/nyaa-api-pt",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Nyaa",
    "access": "public",
    "description": "A nyaa.se API wrapper for NodeJS.",
    "lineNumber": 29
  },
  {
    "__docId__": 215,
    "kind": "external",
    "name": "Omdb",
    "externalLink": "https://github.com/ChrisAlderson/omdb-api-pt",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Omdb",
    "access": "public",
    "description": "An OMDB API wrapper for NodeJS.",
    "lineNumber": 34
  },
  {
    "__docId__": 216,
    "kind": "external",
    "name": "Tmdb",
    "externalLink": "https://github.com/vankasteelj/tmdbapi",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Tmdb",
    "access": "public",
    "description": "TheMovieDB API wrapper, written in node.js",
    "lineNumber": 39
  },
  {
    "__docId__": 217,
    "kind": "external",
    "name": "Trakt",
    "externalLink": "https://github.com/vankasteelj/trakt.tv",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Trakt",
    "access": "public",
    "description": "A Trakt.tv API wrapper for Node.js",
    "lineNumber": 44
  },
  {
    "__docId__": 218,
    "kind": "external",
    "name": "Tvdb",
    "externalLink": "https://github.com/edwellbrook/node-tvdb",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Tvdb",
    "access": "public",
    "description": "Node.js library for accessing TheTVDB API",
    "lineNumber": 49
  },
  {
    "__docId__": 219,
    "kind": "external",
    "name": "Yts",
    "externalLink": "https://github.com/ChrisAlderson/yts-api-pt",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~Yts",
    "access": "public",
    "description": "A NodeJS wrapper for yts.ag",
    "lineNumber": 54
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "eztv",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~eztv",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{eztv}",
    "description": "Export the API modules.",
    "lineNumber": 62,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "fanart",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~fanart",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{fanart}",
    "description": "Export the API modules.",
    "lineNumber": 71,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "horribleSubs",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~horribleSubs",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{horribleSubs}",
    "description": "Export the API modules.",
    "lineNumber": 80,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "kat",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~kat",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{kat}",
    "description": "Export the API modules.",
    "lineNumber": 89,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "nyaa",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~nyaa",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{nyaa}",
    "description": "Export the API modules.",
    "lineNumber": 96,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "omdb",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~omdb",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{omdb}",
    "description": "Export the API modules.",
    "lineNumber": 105,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "tmdb",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~tmdb",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{tmdb}",
    "description": "Export the API modules.",
    "lineNumber": 114,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "trakt",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~trakt",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{trakt}",
    "description": "Export the API modules.",
    "lineNumber": 123,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "tvdb",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~tvdb",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{tvdb}",
    "description": "Export the API modules.",
    "lineNumber": 132,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "yts",
    "memberof": "src/scraper/apiModules.js",
    "static": true,
    "longname": "src/scraper/apiModules.js~yts",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/apiModules.js",
    "importStyle": "{yts}",
    "description": "Export the API modules.",
    "lineNumber": 139,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/scraper/configs/bulkConfigs.js",
    "content": "// Import the necessary modules.\n// @flow\nimport {\n  AnimeShow,\n  Show\n} from '../../models'\nimport { BulkProvider } from '../providers'\nimport {\n  eztv,\n  horribleSubs\n} from '../apiModules'\nimport { ShowHelper } from '../helpers'\n\n/**\n * The configuration for EZTV.\n * @type {Object}\n */\nexport const eztvConfig: Object = {\n  name: 'EZTV',\n  api: eztv,\n  contentType: BulkProvider.ContentTypes.Show,\n  Helper: ShowHelper,\n  Model: Show\n}\n\n/**\n * The configuration for HorribleSubs.\n * @type {Object}\n */\nexport const horribleSubsConfig: Object = {\n  name: 'HorribleSubs',\n  api: horribleSubs,\n  contentType: BulkProvider.ContentTypes.Show,\n  Helper: ShowHelper,\n  Model: AnimeShow\n}\n\n/**\n * Export the configs for the BulkProvider.\n * @type {Array<Object>}\n */\nexport default [\n  eztvConfig,\n  horribleSubsConfig\n]\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/configs/bulkConfigs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "eztvConfig",
    "memberof": "src/scraper/configs/bulkConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/bulkConfigs.js~eztvConfig",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/configs/bulkConfigs.js",
    "importStyle": "{eztvConfig}",
    "description": "The configuration for EZTV.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "horribleSubsConfig",
    "memberof": "src/scraper/configs/bulkConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/bulkConfigs.js~horribleSubsConfig",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/configs/bulkConfigs.js",
    "importStyle": "{horribleSubsConfig}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": string, \"api\": *, \"contentType\": *, \"Helper\": *, \"Model\": *}"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/scraper/configs/index.js",
    "content": "// Export the necessary modules.\nexport bulkConfigs from './bulkConfigs'\nexport movieConfigs from './movieConfigs'\nexport showConfigs from './showConfigs'\nexport ytsConfigs from './ytsConfigs'\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/configs/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/scraper/configs/movieConfigs.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { Movie } from '../../models'\nimport { MovieProvider } from '../providers'\nimport { kat } from '../apiModules'\nimport { MovieHelper } from '../helpers'\n\n/**\n * The configuration for KAT movies.\n * @type {Object}\n */\nexport const katMovieConfig: Object = {\n  name: 'KAT Movies',\n  api: kat,\n  contentType: MovieProvider.ContentTypes.Movie,\n  Helper: MovieHelper,\n  Model: Movie,\n  query: {\n    category: 'movies_hd',\n    query: 'x264 BlueRay'\n  },\n  regexps: [{\n    regex: /(.*).(\\d{4}).[3Dd]\\D+(\\d{3,4}p)/i\n  }, {\n    regex: /(.*).(\\d{4}).[4k]\\D+(\\d{3,4}p)/i\n  }, {\n    regex: /(.*).(\\d{4})\\D+(\\d{3,4}p)/i\n  }]\n}\n\n/**\n * Export the configs for the MovieProvider.\n * @type {Array<Object>}\n */\nexport default [katMovieConfig]\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/configs/movieConfigs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "name": "katMovieConfig",
    "memberof": "src/scraper/configs/movieConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/movieConfigs.js~katMovieConfig",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/configs/movieConfigs.js",
    "importStyle": "{katMovieConfig}",
    "description": "The configuration for KAT movies.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/scraper/configs/showConfigs.js",
    "content": "// Import the necessary modules.\n// @flow\nimport {\n  AnimeShow\n  // Show\n} from '../../models'\nimport { ShowProvider } from '../providers'\nimport {\n  // kat,\n  nyaa\n} from '../apiModules'\nimport { ShowHelper } from '../helpers'\n\n/**\n * The regular expressions used to extract information about shows.\n * @type {Array<Object>}\n */\nconst regexps = [{\n  regex: /(.*).[sS](\\d{2})[eE](\\d{2})/i,\n  dateBased: false\n}, {\n  regex: /(.*).(\\d{1,2})[x](\\d{2})/i,\n  dateBased: false\n}, {\n  regex: /(.*).(\\d{4}).(\\d{2}.\\d{2})/i,\n  dateBased: true\n}, {\n  regex: /\\[.*\\].(\\D+).S(\\d+)...(\\d{2,3}).*\\.mkv/i,\n  dateBased: false\n}, {\n  regex: /\\[.*\\].(\\D+)...(\\d{2,3}).*\\.mkv/i,\n  dateBased: false\n}]\n\n/**\n * The base configuration for Nyaa.\n * @type {Object}\n */\nconst baseNyaaConfig: Object = {\n  api: nyaa,\n  contentType: ShowProvider.ContentTypes.Show,\n  Helper: ShowHelper,\n  Model: AnimeShow,\n  regexps\n}\n\n/**\n * The configuration for Nyaa Commie.\n * @type {Object}\n */\nexport const nyaaCommieConfig: Object = {\n  ...baseNyaaConfig,\n  name: 'Commie',\n  query: {\n    page: 1,\n    q: 'commie mkv'\n  }\n}\n\n/**\n * The configuration for Nyaa FFF.\n * @type {Object}\n */\nexport const nyaaFffConfig: Object = {\n  ...baseNyaaConfig,\n  name: 'FFF',\n  query: {\n    page: 1,\n    q: 'fff mkv'\n  }\n}\n\n/**\n * The configuration for Nyaa GG.\n * @type {Object}\n */\nexport const nyaaGgConfig: Object = {\n  ...baseNyaaConfig,\n  name: 'GG',\n  query: {\n    page: 1,\n    q: 'gg mkv'\n  }\n}\n\n// /**\n//  * The base configuration for KAT.\n//  * @type {Object}\n//  */\n// const baseKatConfig: Object = {\n//   api: kat,\n//   contentType: ShowProvider.ContentTypes.Show,\n//   Helper: ShowHelper,\n//   Model: Show,\n//   regexps\n// }\n//\n//   ...baseKatConfig,\n//   name: 'Zoner720p',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264 720p',\n//     uploader: 'z0n321'\n//   }\n// }, {\n//   ...baseKatConfig,\n//   name: 'Zoner1080p',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264 1080p',\n//     uploader: 'z0n321'\n//   }\n// }, {\n//   ...baseKatConfig,\n//   name: 'Brasse0',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264',\n//     uploader: 'brasse0'\n//   }\n// }, {\n//   ...baseKatConfig,\n//   name: 'ETHD',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264',\n//     uploader: 'ethd'\n//   }\n// }, {\n//   ...baseKatConfig,\n//   name: 'ETTV',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264',\n//     uploader: 'ettv'\n//   }\n// }, {\n//   ...baseKatConfig,\n//   name: 'KAT EZTV',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264',\n//     uploader: 'eztv'\n//   }\n// }, {\n//   ...baseKatConfig,\n//   name: 'VTV',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264',\n//     uploader: 'vtv'\n//   }\n// }, {\n//   ...baseKatConfig,\n//   name: 'Srigga',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264',\n//     uploader: 'ethd'\n//   }\n// }, {\n//   ...baseKatConfig,\n//   name: 'ZonerSD',\n//   query: {\n//     page: 1,\n//     language: 'en',\n//     verified: 1,\n//     adult_filter: 1,\n//     category: 'tv',\n//     query: 'x264 lol | fleet | killers | w4f',\n//     uploader: 'z0n321'\n//   }\n\n/**\n * Export the configs for the ShowProvider.\n * @type {Array<Object>}\n */\nexport default [\n  nyaaCommieConfig,\n  nyaaFffConfig,\n  nyaaGgConfig\n]\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/configs/showConfigs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "regexps",
    "memberof": "src/scraper/configs/showConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/showConfigs.js~regexps",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/scraper/configs/showConfigs.js",
    "importStyle": null,
    "description": "The regular expressions used to extract information about shows.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "baseNyaaConfig",
    "memberof": "src/scraper/configs/showConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/showConfigs.js~baseNyaaConfig",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/scraper/configs/showConfigs.js",
    "importStyle": null,
    "description": "The base configuration for Nyaa.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "nyaaCommieConfig",
    "memberof": "src/scraper/configs/showConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/showConfigs.js~nyaaCommieConfig",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/configs/showConfigs.js",
    "importStyle": "{nyaaCommieConfig}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "{...baseNyaaConfig: Object, \"name\": string, \"query\": *}"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "nyaaFffConfig",
    "memberof": "src/scraper/configs/showConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/showConfigs.js~nyaaFffConfig",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/configs/showConfigs.js",
    "importStyle": "{nyaaFffConfig}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "{...baseNyaaConfig: Object, \"name\": string, \"query\": *}"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "nyaaGgConfig",
    "memberof": "src/scraper/configs/showConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/showConfigs.js~nyaaGgConfig",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/configs/showConfigs.js",
    "importStyle": "{nyaaGgConfig}",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "{...baseNyaaConfig: Object, \"name\": string, \"query\": *}"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "src/scraper/configs/ytsConfigs.js",
    "content": "// Import the necessary modules.\n// @flow\nimport { Movie } from '../../models'\nimport { YtsProvider } from '../providers'\nimport { yts } from '../apiModules'\nimport { MovieHelper } from '../helpers'\n\n/**\n * The configuration for YTS.\n * @type {Object}\n */\nexport const ytsConfig: Object = {\n  name: 'YTS',\n  api: yts,\n  contentType: YtsProvider.ContentTypes.Movie,\n  Helper: MovieHelper,\n  Model: Movie,\n  query: {\n    page: 1,\n    limi: 50\n  }\n}\n\n/**\n * Export the configs for the YtsProvider.\n * @type {Array<Object>}\n */\nexport default [ytsConfig]\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/configs/ytsConfigs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "ytsConfig",
    "memberof": "src/scraper/configs/ytsConfigs.js",
    "static": true,
    "longname": "src/scraper/configs/ytsConfigs.js~ytsConfig",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/configs/ytsConfigs.js",
    "importStyle": "{ytsConfig}",
    "description": "The configuration for YTS.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/scraper/helpers/AbstractHelper.js",
    "content": "// Import the necessary modules.\n// @flow\nimport IHelper from './IHelper'\nimport type {\n  AnimeMovie,\n  AnimeShow,\n  Movie,\n  Show\n} from '../../models'\n\n/**\n * Abstract class for saving content.\n * @implements {IHelper}\n * @type {AbstractHelper}\n */\nexport default class AbstractHelper extends IHelper {\n\n  /**\n   * The default image link.\n   * @protected\n   * @type {string}\n   */\n  static Holder: string = 'images/posterholder.png'\n\n  /**\n   * The default image object.\n   * @protected\n   * @type {Object}\n   */\n  static DefaultImages: Object = {\n    banner: AbstractHelper.Holder,\n    fanart: AbstractHelper.Holder,\n    poster: AbstractHelper.Holder\n  }\n\n  /**\n   * The name of the torrent provider.\n   * @type {string}\n   */\n  name: string\n\n  /**\n   * The model to create or alter.\n   * @type {AnimeMovie|AnimeShow|Movie|Show}\n   * @see http://mongoosejs.com/docs/models.html\n   */\n  Model: AnimeMovie | AnimeShow | Movie | Show\n\n  /**\n   * Create a base helper class for content.\n   * @param {!string} name - The name of the content provider.\n   * @param {!AnimeMovie|AnimeShow|Movie|Show} Model - The model to help fill.\n   */\n  constructor({ name, Model }: Object): void {\n    super()\n\n    /**\n     * The name of the torrent provider.\n     * @type {string}\n     */\n    this.name = name\n    /**\n     * The model to create or alter.\n     * @type {AnimeMovie|AnimeShow|Movie|Show}\n     * @see http://mongoosejs.com/docs/models.html\n     */\n    this.Model = Model\n  }\n\n  /**\n   * Method to check the given images against the default ones.\n   * @override\n   * @protected\n   * @param {Object} images - The images to check.\n   * @throws {Error} - An image could not been found!\n   * @returns {Object|undefined} - Throws an error if the given images are the\n   * same, otherwise it will return the given images.\n   */\n  checkImages(images: Object): Object | void {\n    for (const i in images) {\n      if (images[i] === AbstractHelper.Holder) {\n        throw new Error('An image could not been found!')\n      }\n    }\n\n    return images\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/helpers/AbstractHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "AbstractHelper",
    "memberof": "src/scraper/helpers/AbstractHelper.js",
    "static": true,
    "longname": "src/scraper/helpers/AbstractHelper.js~AbstractHelper",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/helpers/AbstractHelper.js",
    "importStyle": "AbstractHelper",
    "description": "Abstract class for saving content.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "AbstractHelper"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "src/scraper/helpers/IHelper.js~IHelper"
    ],
    "implements": [
      "IHelper"
    ]
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "Holder",
    "memberof": "src/scraper/helpers/AbstractHelper.js~AbstractHelper",
    "static": true,
    "longname": "src/scraper/helpers/AbstractHelper.js~AbstractHelper.Holder",
    "access": "protected",
    "description": "The default image link. ",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "DefaultImages",
    "memberof": "src/scraper/helpers/AbstractHelper.js~AbstractHelper",
    "static": true,
    "longname": "src/scraper/helpers/AbstractHelper.js~AbstractHelper.DefaultImages",
    "access": "protected",
    "description": "The default image object. ",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "name",
    "memberof": "src/scraper/helpers/AbstractHelper.js~AbstractHelper",
    "static": false,
    "longname": "src/scraper/helpers/AbstractHelper.js~AbstractHelper#name",
    "access": "public",
    "description": "",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "Model",
    "memberof": "src/scraper/helpers/AbstractHelper.js~AbstractHelper",
    "static": false,
    "longname": "src/scraper/helpers/AbstractHelper.js~AbstractHelper#Model",
    "access": "public",
    "description": "The model to create or alter. ",
    "see": [
      "http://mongoosejs.com/docs/models.html "
    ],
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "union"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/scraper/helpers/AbstractHelper.js~AbstractHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/AbstractHelper.js~AbstractHelper#constructor",
    "access": "public",
    "description": "Create a base helper class for content.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the content provider."
      },
      {
        "nullable": false,
        "types": [
          "AnimeMovie",
          "AnimeShow",
          "Movie",
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "Model",
        "description": "The model to help fill."
      }
    ]
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "checkImages",
    "memberof": "src/scraper/helpers/AbstractHelper.js~AbstractHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/AbstractHelper.js~AbstractHelper#checkImages",
    "access": "protected",
    "description": "Method to check the given images against the default ones.  ",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|undefined} - Throws an error if the given images are the\nsame, otherwise it will return the given images.  "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "The images to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Throws an error if the given images are the\nsame, otherwise it will return the given images."
    },
    "override": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "An image could not been found!"
      }
    ]
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/scraper/helpers/IHelper.js",
    "content": "// Import the necessary modules.\n// @flow\nimport type ContentModel from '../../models/content/ContentModel'\n\n/**\n * Interface for saving content.\n * @interface\n * @type {IHelper}\n */\nexport default class IHelper {\n\n  /**\n   * Method to check the given images against the default ones.\n   * @abstract\n   * @param {Object} images - The images to check.\n   * @throws {Error} - An image could not been found!\n   * @returns {Object|undefined} - Throws an error if the given images are the\n   * same, otherwise it will return the given images.\n   */\n  checkImages(images: Object): Object | void {\n    throw new Error('Using default method: \\'checkImages\\'')\n  }\n\n  /**\n   * Get images for the content you want.\n   * @abstract\n   * @protected\n   * @param {!number} tmdbId - The tmdb id of the content you want the images\n   * from.\n   * @param {!string} imdbId - The imdb id of the content you want the images\n   * from.\n   * @param {!number} tvdbId - The tvdb id of the content you want the images\n   * from.\n   * @throws {Error} - Using default method: '_getImages'.\n   * @returns {Promise<Object>} - Object with banner, fanart and poster\n   * images.\n   */\n  getImages({ tmdbId, imdbId, tvdbId }: Object): Promise<Object> {\n    throw new Error('Using default method: \\'getImages\\'')\n  }\n\n  /**\n   * Get info from Trakt and make a new content object.\n   * @abstract\n   * @param {!string} slug - The slug to query trakt.tv.\n   * @throws {Error} - Using default method: 'getTraktInfo'.\n   * @returns {Promise<ContentModel, Error>} - A new content model.\n   */\n  getTraktInfo(slug: string): Promise<ContentModel | Error> {\n    throw new Error('Using default method: \\'getTraktInfo\\'')\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/helpers/IHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "IHelper",
    "memberof": "src/scraper/helpers/IHelper.js",
    "static": true,
    "longname": "src/scraper/helpers/IHelper.js~IHelper",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/helpers/IHelper.js",
    "importStyle": "IHelper",
    "description": "Interface for saving content.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "IHelper"
      ],
      "spread": false,
      "description": null
    },
    "interface": true
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "checkImages",
    "memberof": "src/scraper/helpers/IHelper.js~IHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/IHelper.js~IHelper#checkImages",
    "access": "public",
    "description": "Method to check the given images against the default ones.  ",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|undefined} - Throws an error if the given images are the\nsame, otherwise it will return the given images.  "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "The images to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Throws an error if the given images are the\nsame, otherwise it will return the given images."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "An image could not been found!"
      }
    ]
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "getImages",
    "memberof": "src/scraper/helpers/IHelper.js~IHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/IHelper.js~IHelper#getImages",
    "access": "protected",
    "description": "Get images for the content you want.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - Object with banner, fanart and poster\nimages."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tmdbId",
        "description": "The tmdb id of the content you want the images\nfrom."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imdbId",
        "description": "The imdb id of the content you want the images\nfrom."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tvdbId",
        "description": "The tvdb id of the content you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster\nimages."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: '_getImages'."
      }
    ]
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "getTraktInfo",
    "memberof": "src/scraper/helpers/IHelper.js~IHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/IHelper.js~IHelper#getTraktInfo",
    "access": "public",
    "description": "Get info from Trakt and make a new content object.  ",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<ContentModel, Error>} - A new content model.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug to query trakt.tv."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ContentModel, Error>"
      ],
      "spread": false,
      "description": "A new content model."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'getTraktInfo'."
      }
    ]
  },
  {
    "__docId__": 259,
    "kind": "file",
    "name": "src/scraper/helpers/MovieHelper.js",
    "content": "// Import the necessary modules.\n// @flow\nimport pMap from 'p-map'\n\nimport AbstractHelper from './AbstractHelper'\nimport {\n  fanart,\n  omdb,\n  tmdb,\n  trakt\n} from '../apiModules'\nimport type {\n  AnimeMovie,\n  Movie\n} from '../../models'\n\n/**\n * Class for saving movies.\n * @extends {AbstractHelper}\n * @type {MovieHelper}\n */\nexport default class MovieHelper extends AbstractHelper {\n\n  /**\n   * Update the torrents for an existing movie.\n   * @param {!AnimeMovie|Movie} movie - The new movie.\n   * @param {!AnimeMovie|Movie} found - The existing movie.\n   * @param {!string} language - The language of the torrent.\n   * @param {!string} quality - The quality of the torrent.\n   * @returns {AnimeMovie|Movie} - A movie with merged torrents.\n   */\n  _updateTorrent(\n    movie: AnimeMovie | Movie,\n    found: AnimeMovie | Movie,\n    language: string,\n    quality: string\n  ): AnimeMovie | Movie {\n    let update = false\n    let movieTorrent = movie.torrents[language]\n\n    const foundTorrent = found.torrents[language]\n\n    if (foundTorrent && movieTorrent) {\n      const foundQuality = foundTorrent[quality]\n      const movieQuality = movieTorrent[quality]\n\n      if (foundQuality && movieQuality) {\n        if (foundQuality.seeds > movieQuality.seeds ||\n            foundQuality.url === movieQuality.url) {\n          update = true\n        }\n      } else if (foundQuality && !movieQuality) {\n        update = true\n      }\n    } else if (foundTorrent && !movieTorrent) {\n      if (foundTorrent[quality]) {\n        movieTorrent = {}\n        update = true\n      }\n    }\n\n    if (update) {\n      movieTorrent[quality] = foundTorrent[quality]\n    }\n\n    return movie\n  }\n\n  /**\n   * Update a given movie.\n   * @param {!AnimeMovie|Movie} movie - The movie to update its torrent.\n   * @returns {AnimeMovie|Movie} - A newly updated movie.\n   */\n  async _updateMovie(movie: AnimeMovie | Movie): AnimeMovie | Movie {\n    try {\n      let m = movie\n      const found = await this.Model.findOne({\n        imdb_id: m._id\n      })\n\n      if (found) {\n        logger.info(`${this.name}: '${found.title}' is an existing movie.`)\n\n        if (found.torrents) {\n          Object.keys(found.torrents).map(language => {\n            m = this._updateTorrent(m, found, language, '720p')\n            m = this._updateTorrent(m, found, language, '1080p')\n          })\n        }\n\n        return await this.Model.findOneAndUpdate({\n          _id: m._id\n        }, m, {\n          upsert: true,\n          new: true\n        })\n      }\n\n      logger.info(`${this.name}: '${m.title}' is a new movie!`)\n      return await new this.Model(m).save()\n    } catch (err) {\n      logger.error(err)\n    }\n  }\n\n  /**\n   * Adds torrents to a movie.\n   * @param {!AnimeMovie|Movie} movie - The movie to add the torrents to.\n   * @param {!Object} torrents - The torrents to add to the movie.\n   * @returns {AnimeMovie|Movie} - A movie with torrents attached.\n   */\n  addTorrents(\n    movie: AnimeMovie | Movie,\n    torrents: Object\n  ): AnimeMovie | Movie {\n    return pMap(\n      Object.keys(torrents),\n      torrent => {\n        movie.torrents[torrent] = torrents[torrent]\n      }\n    ).then(() => this._updateMovie(movie))\n  }\n\n  /**\n   * Get movie images from TMDB.\n   * @param {!string} tmdbId - The tmdb id of the movie you want the images\n   * from.\n   * @returns {Object} - Object with banner, fanart and poster images.\n   */\n  _getTmdbImages(tmdbId: string): Promise<Object | Error> {\n    return tmdb.movie.images({\n      movie_id: tmdbId\n    }).then(i => {\n      const baseUrl = 'http://image.tmdb.org/t/p/w500'\n\n      const tmdbPoster = i.posters.filter(\n        poster => poster.iso_639_1 === 'en' || poster.iso_639_1 === null\n      )[0].file_path\n      const tmdbBackdrop = i.backdrops.filter(\n        backdrop => backdrop.iso_639_1 === 'en' || backdrop.iso_639_1 === null\n      )[0].file_path\n\n      const { Holder } = AbstractHelper\n      const images = {\n        banner: tmdbPoster ? `${baseUrl}${tmdbPoster}` : Holder,\n        fanart: tmdbBackdrop ? `${baseUrl}${tmdbBackdrop}` : Holder,\n        poster: tmdbPoster ? `${baseUrl}${tmdbPoster}` : Holder\n      }\n\n      return this.checkImages(images)\n    })\n  }\n\n  /**\n   * Get movie images from OMDB.\n   * @param {!string} imdbId - The imdb id of the movie you want the images\n   * from.\n   * @returns {Object} - Object with banner, fanart and poster images.\n   */\n  _getOmdbImages(imdbId: string): Promise<Object | Error> {\n    return omdb.byId({\n      imdb: imdbId,\n      type: 'movie'\n    }).then(i => {\n      const { Holder } = AbstractHelper\n      const images = {\n        banner: i.Poster ? i.Poster : Holder,\n        fanart: i.Poster ? i.Poster : Holder,\n        poster: i.Poster ? i.Poster : Holder\n      }\n\n      return this.checkImages(images)\n    })\n  }\n\n  /**\n   * Get movie images from Fanart.\n   * @param {!number} tmdbId - The tvdb id of the movie you want the images\n   * from.\n   * @returns {Object} - Object with banner, fanart and poster images.\n   */\n  _getFanartImages(tmdbId: number): Promise<Object | Error> {\n    return fanart.getMovieImages(tmdbId).then(i => {\n      const { Holder } = AbstractHelper\n      const images = {\n        banner: i.moviebanner ? i.moviebanner[0].url : Holder,\n        fanart: i.moviebackground\n          ? i.moviebackground[0].url\n          : i.hdmovieclearart\n            ? i.hdmovieclearart[0].url\n            : Holder,\n        poster: i.movieposter ? i.movieposter[0].url : Holder\n      }\n\n      return this.checkImages(images)\n    })\n  }\n\n  /**\n   * Get movie images.\n   * @override\n   * @protected\n   * @param {!number} tmdbId - The tmdb id of the movie you want the images\n   * from.\n   * @param {!string} imdbId - The imdb id of the movie you want the images\n   * from.\n   * @returns {Promise<Object>} - Object with banner, fanart and poster images.\n   */\n  getImages({ tmdbId, imdbId }: Object): Promise<Object> {\n    return this._getTmdbImages(imdbId)\n      .catch(() => this._getOmdbImages(tmdbId))\n      .catch(() => this._getFanartImages(tmdbId))\n      .catch(() => AbstractHelper.DefaultImages)\n  }\n\n  /**\n   * Get info from Trakt and make a new movie object.\n   * @override\n   * @param {!string} slug - The slug to query trakt.tv.\n   * @returns {AnimeMovie|Movie} - A new movie.\n   */\n  async getTraktInfo(slug: string): Promise<AnimeMovie | Movie | Error> {\n    try {\n      const traktMovie = await trakt.movies.summary({\n        id: slug,\n        extended: 'full'\n      })\n      const traktWatchers = await trakt.movies.watching({\n        id: slug\n      })\n\n      if (traktMovie && traktMovie.ids.imdb && traktMovie.ids.tmdb) {\n        const { imdb, slug, tmdb } = traktMovie.ids\n        const images = this.getImages({\n          imdbId: imdb,\n          tmdbId: tmdb\n        })\n\n        return {\n          imdb_id: imdb,\n          title: traktMovie.title,\n          year: traktMovie.year,\n          slug,\n          synopsis: traktMovie.overview,\n          runtime: traktMovie.runtime,\n          rating: {\n            votes: traktMovie.votes,\n            watching: traktWatchers ? traktWatchers.length : 0,\n            percentage: Math.round(traktMovie.rating * 10)\n          },\n          images,\n          genres: traktMovie.genres ? traktMovie.genres : ['unknown'],\n          language: traktMovie.language,\n          released: new Date(traktMovie.released).getTime() / 1000.0,\n          trailer: traktMovie.trailer,\n          certification: traktMovie.certification,\n          torrents: {}\n        }\n      }\n    } catch (err) {\n      logger.error(`Trakt: Could not find any data on: ${err.path || err} with slug: '${slug}'`)\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/helpers/MovieHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "class",
    "name": "MovieHelper",
    "memberof": "src/scraper/helpers/MovieHelper.js",
    "static": true,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/helpers/MovieHelper.js",
    "importStyle": "MovieHelper",
    "description": "Class for saving movies.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "MovieHelper"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "AbstractHelper"
    ]
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "_updateTorrent",
    "memberof": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper#_updateTorrent",
    "access": "private",
    "description": "Update the torrents for an existing movie.  ",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnimeMovie|Movie} - A movie with merged torrents.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "AnimeMovie",
          "Movie"
        ],
        "spread": false,
        "optional": false,
        "name": "movie",
        "description": "The new movie."
      },
      {
        "nullable": false,
        "types": [
          "AnimeMovie",
          "Movie"
        ],
        "spread": false,
        "optional": false,
        "name": "found",
        "description": "The existing movie."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language of the torrent."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "quality",
        "description": "The quality of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnimeMovie",
        "Movie"
      ],
      "spread": false,
      "description": "A movie with merged torrents."
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "_updateMovie",
    "memberof": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper#_updateMovie",
    "access": "private",
    "description": "Update a given movie.  ",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnimeMovie|Movie} - A newly updated movie.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "AnimeMovie",
          "Movie"
        ],
        "spread": false,
        "optional": false,
        "name": "movie",
        "description": "The movie to update its torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnimeMovie",
        "Movie"
      ],
      "spread": false,
      "description": "A newly updated movie."
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "addTorrents",
    "memberof": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper#addTorrents",
    "access": "public",
    "description": "Adds torrents to a movie.  ",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnimeMovie|Movie} - A movie with torrents attached.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "AnimeMovie",
          "Movie"
        ],
        "spread": false,
        "optional": false,
        "name": "movie",
        "description": "The movie to add the torrents to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrents",
        "description": "The torrents to add to the movie."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnimeMovie",
        "Movie"
      ],
      "spread": false,
      "description": "A movie with torrents attached."
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "_getTmdbImages",
    "memberof": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper#_getTmdbImages",
    "access": "private",
    "description": "Get movie images from TMDB.  ",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Object with banner, fanart and poster images.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tmdbId",
        "description": "The tmdb id of the movie you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster images."
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "_getOmdbImages",
    "memberof": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper#_getOmdbImages",
    "access": "private",
    "description": "Get movie images from OMDB.  ",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Object with banner, fanart and poster images.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imdbId",
        "description": "The imdb id of the movie you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster images."
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "_getFanartImages",
    "memberof": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper#_getFanartImages",
    "access": "private",
    "description": "Get movie images from Fanart.  ",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Object with banner, fanart and poster images.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tmdbId",
        "description": "The tvdb id of the movie you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster images."
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "getImages",
    "memberof": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper#getImages",
    "access": "protected",
    "description": "Get movie images.",
    "lineNumber": 209,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - Object with banner, fanart and poster images."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tmdbId",
        "description": "The tmdb id of the movie you want the images\nfrom."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imdbId",
        "description": "The imdb id of the movie you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster images."
    },
    "override": true
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "getTraktInfo",
    "memberof": "src/scraper/helpers/MovieHelper.js~MovieHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/scraper/helpers/MovieHelper.js~MovieHelper#getTraktInfo",
    "access": "public",
    "description": "Get info from Trakt and make a new movie object.  ",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnimeMovie|Movie} - A new movie.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug to query trakt.tv."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnimeMovie",
        "Movie"
      ],
      "spread": false,
      "description": "A new movie."
    },
    "override": true
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/scraper/helpers/ShowHelper.js",
    "content": "// Import the necessary modules.\n// @flow\nimport pMap from 'p-map'\n\nimport AbstractHelper from './AbstractHelper'\nimport {\n  fanart,\n  tmdb,\n  trakt,\n  tvdb\n} from '../apiModules'\nimport type {\n  AnimeShow,\n  Show\n} from '../../models'\n\n/**\n * Class for saving shows.\n * @extends {AbstractHelper}\n * @type {ShowHelper}\n */\nexport default class ShowHelper extends AbstractHelper {\n\n  /**\n   * Update the number of seasons of a given show.\n   * @param {!AnimeShow|Show} show - The show to update the number of seasons.\n   * @returns {AnimeShow|Show} - A newly updated show.\n   */\n  async _updateNumSeasons(show: AnimeShow | Show): AnimeShow | Show {\n    const saved = await this.Model.findOneAndUpdate({\n      _id: show.imdb_id\n    }, new this.Model(show), {\n      new: true,\n      upsert: true\n    })\n\n    const distinct = await this.Model.distinct('episodes.season', {\n      _id: saved.imdb_id\n    }).exec()\n    saved.num_seasons = distinct.length\n\n    return this.Model.findOneAndUpdate({\n      _id: saved.imdb_id\n    }, new this.Model(saved), {\n      new: true,\n      upsert: true\n    })\n  }\n\n  /**\n   * Update the torrents for an existing show.\n   * @param {!Object} matching - The matching episode of new the show.\n   * @param {!Object} found - The matching episode existing show.\n   * @param {!AnimeShow|Show} show - The show to merge the episodes to.\n   * @param {!string} quality - The quality of the torrent.\n   * @returns {AnimeShow|Show} - A show with merged torrents.\n   */\n  _updateEpisode(\n    matching: Object,\n    found: Object,\n    show: AnimeShow | Show,\n    quality: string\n  ): AnimeShow | Show {\n    const index = show.episodes.indexOf(matching)\n\n    const foundTorrents = found.torrents[quality]\n    let matchingTorrents = matching.torrents[quality]\n\n    if (foundTorrents && matchingTorrents) {\n      let update = false\n\n      if (\n        foundTorrents.seeds > matchingTorrents.seeds ||\n        foundTorrents.url === matchingTorrents.url\n      ) {\n        update = true\n      }\n\n      if (update) {\n        if (quality === '480p') {\n          matching.torrents['0'] = foundTorrents\n        }\n\n        matchingTorrents = foundTorrents\n      }\n    } else if (foundTorrents && !matchingTorrents) {\n      if (quality === '480p') {\n        matching.torrents['0'] = foundTorrents\n      }\n\n      matchingTorrents = foundTorrents\n    }\n\n    show.episodes.splice(index, 1, matching)\n    return show\n  }\n\n  /**\n   * Update a given show with it's associated episodes.\n   * @param {!AnimeShow|Show} show - The show to update its episodes.\n   * @returns {AnimeShow|Show} - A newly updated show.\n   */\n  async _updateEpisodes(show: AnimeShow | Show): AnimeShow | Show {\n    try {\n      let s = show\n      const found = await this.Model.findOne({\n        _id: s.imdb_id\n      })\n      if (!found) {\n        logger.info(`${this.name}: '${s.title}' is a new show!`)\n        const newShow = await new this.Model(s).save()\n        return await this._updateNumSeasons(newShow)\n      }\n\n      logger.info(`${this.name}: '${found.title}' is an existing show.`)\n\n      found.episodes.map(e => {\n        const matching = s.episodes.find(\n          s => s.season === e.season && s.episode === e.episode\n        )\n\n        if (e.first_aired > s.latest_episode) {\n          s.latest_episode = e.first_aired\n        }\n\n        if (!matching) {\n          return s.episodes.push(e)\n        }\n\n        s = this._updateEpisode(matching, e, s, '480p')\n        s = this._updateEpisode(matching, e, s, '720p')\n        s = this._updateEpisode(matching, e, s, '1080p')\n      })\n\n      return await this._updateNumSeasons(s)\n    } catch (err) {\n      logger.error(err)\n    }\n  }\n\n  /**\n   * Adds one seasonal season to a show.\n   * @param {!AnimeShow|Show} show - The show to add the torrents to.\n   * @param {!Object} episodes - The episodes containing the torrents.\n   * @param {!number} season - The season number.\n   * @param {!string} slug - The slug of the show.\n   * @returns {undefined}\n   */\n  _addSeasonalSeason(\n    show: AnimeShow | Show,\n    episodes: Object,\n    season: number,\n    slug: string\n  ): void {\n    return trakt.seasons.season({\n      id: slug,\n      season,\n      extended: 'full'\n    }).then(traktEpisodes => {\n      traktEpisodes.map(e => {\n        if (!episodes[season][e.number]) {\n          return\n        }\n\n        const episode = {\n          tvdb_id: parseInt(e.ids['tvdb'], 10),\n          season: parseInt(e.season, 10),\n          episode: parseInt(e.number, 10),\n          title: e.title,\n          overview: e.overview,\n          date_based: false,\n          first_aired: new Date(e.first_aired).getTime() / 1000.0,\n          torrents: episodes[season][e.number]\n        }\n\n        if (episode.first_aired > show.latest_episode) {\n          show.latest_episode = episode.first_aired\n        }\n\n        episode.torrents[0] = episodes[season][e.number]['480p']\n          ? episodes[season][e.number]['480p']\n          : episodes[season][e.number]['720p']\n\n        show.episodes.push(episode)\n      })\n    }).catch(err =>\n      logger.error(`Trakt: Could not find any data on: ${err.path || err} with slug: '${slug}'`)\n    )\n  }\n\n  /**\n   * Adds one datebased season to a show.\n   * @param {!AnimeShow|Show} show - The show to add the torrents to.\n   * @param {!Object} episodes - The episodes containing the torrents.\n   * @param {!number} season - The season number.\n   * @returns {Promise<AnimeShow|Show|undefined>} - The show with a datebased\n   * season attached.\n   */\n  async _addDateBasedSeason(\n    show: AnimeShow | Show,\n    episodes: Object,\n    season: number\n  ): Promise<AnimeShow | Show | void> {\n    try {\n      if (!show.tvdb_id || !episodes[season]) {\n        return\n      }\n\n      const tvdbShow = await tvdb.getSeriesAllById(show.tvdb_id)\n      tvdbShow.episodes.map(tvdbEpisode => {\n        Object.keys(episodes[season]).map(e => {\n          const d = new Date(tvdbEpisode.firstAired)\n            .toISOString()\n            .substring(0, 10)\n          if (`${season}-${e.replace(/\\./, '-')}` !== d) {\n            return\n          }\n\n          const episode = {\n            tvdb_id: parseInt(tvdbEpisode.id, 10),\n            season: parseInt(tvdbEpisode.airedEpisodeNumber, 10),\n            episode: parseInt(tvdbEpisode.airedSeason, 10),\n            title: tvdbEpisode.episodeName,\n            overview: tvdbEpisode.overview,\n            date_based: true,\n            first_aired: new Date(tvdbEpisode.firstAired).getTime() / 1000.0,\n            torrents: episodes[season][e]\n          }\n\n          if (episode.first_aired > show.latest_episode) {\n            show.latest_episode = episode.first_aired\n          }\n\n          if (!episode.season) {\n            return\n          }\n\n          episode.torrents[0] = episodes[season][e]['480p']\n            ? episodes[season][e]['480p']\n            : episodes[season][e]['720p']\n\n          show.episodes.push(episode)\n        })\n      })\n    } catch (err) {\n      logger.error(`TVDB: Could not find any data on: ${err.path || err} with tvdb_id: '${show.tvdb_id}'`)\n    }\n  }\n\n  /**\n   * Adds episodes to a show.\n   * @param {!AnimeShow|Show} show - The show to add the torrents to.\n   * @param {!Object} episodes - The episodes containing the torrents.\n   * @param {!string} slug - The slug of the show.\n   * @returns {Show} - A show with updated torrents.\n   */\n  addEpisodes(\n    show: AnimeShow | Show,\n    episodes: Object,\n    slug: string\n  ): Show {\n    let { dateBased } = episodes\n    delete episodes.dateBased\n    dateBased = dateBased || show.dateBased\n\n    return pMap(Object.keys(episodes), season => {\n      if (dateBased) {\n        return this._addDateBasedSeason(show, episodes, season)\n      }\n\n      return this._addSeasonalSeason(show, episodes, season, slug)\n    }).then(() => this._updateEpisodes(show))\n      .catch(err => logger.error(err))\n  }\n\n  /**\n   * Get TV show images from TMDB.\n   * @param {!number} tmdbId - The tmdb id of the show you want the images\n   * from.\n   * @returns {Object} - Object with banner, fanart and poster images.\n   */\n  _getTmdbImages(tmdbId: number): Object {\n    return tmdb.tv.images({\n      tv_id: tmdbId\n    }).then(i => {\n      const baseUrl = 'http://image.tmdb.org/t/p/w500'\n\n      const tmdbPoster = i.posters.filter(\n        poster => poster.iso_639_1 === 'en' || poster.iso_639_1 === null\n      )[0].file_path\n      const tmdbBackdrop = i.backdrops.filter(\n        backdrop => backdrop.iso_639_1 === 'en' || backdrop.iso_639_1 === null\n      )[0].file_path\n\n      const { Holder } = AbstractHelper\n      const images = {\n        banner: tmdbPoster ? `${baseUrl}${tmdbPoster}` : Holder,\n        fanart: tmdbBackdrop ? `${baseUrl}${tmdbBackdrop}` : Holder,\n        poster: tmdbPoster ? `${baseUrl}${tmdbPoster}` : Holder\n      }\n\n      return this.checkImages(images)\n    })\n  }\n\n  /**\n   * Get TV show images from TVDB.\n   * @param {!number} tvdbId - The tvdb id of the show you want the images\n   * from.\n   * @returns {Object} - Object with banner, fanart and poster images.\n   */\n  _getTvdbImages(tvdbId: number): Object {\n    return tvdb.getSeriesById(tvdbId).then(i => {\n      const baseUrl = 'http://thetvdb.com/banners/'\n\n      const { Holder } = AbstractHelper\n      const images = {\n        banner: i.banner ? `${baseUrl}${i.banner}` : Holder,\n        fanart: i.banner ? `${baseUrl}${i.banner}` : Holder,\n        poster: i.banner ? `${baseUrl}${i.banner}` : Holder\n      }\n\n      return this.checkImages(images)\n    })\n  }\n\n  /**\n   * Get TV show images from Fanart.\n   * @param {!number} tvdbId - The tvdb id of the show you want the images\n   * from.\n   * @returns {Object} - Object with banner, fanart and poster images.\n   */\n  _getFanartImages(tvdbId: number): Object {\n    return fanart.getShowImages(tvdbId).then(i => {\n      const { Holder } = AbstractHelper\n      const images = {\n        banner: i.tvbanner ? i.tvbanner[0].url : Holder,\n        fanart: i.showbackground\n          ? i.showbackground[0].url\n          : i.clearart\n            ? i.clearart[0].url\n            : Holder,\n        poster: i.tvposter ? i.tvposter[0].url : Holder\n      }\n\n      return this.checkImages(images)\n    })\n  }\n\n  /**\n   * Get TV show images.\n   * @override\n   * @protected\n   * @param {!number} tmdbId - The tmdb id of the show you want the images\n   * from.\n   * @param {!number} tvdbId - The tvdb id of the show you want the images\n   * from.\n   * @returns {Promise<Object>} - Object with banner, fanart and poster images.\n   */\n  getImages({ tmdbId, tvdbId }: Object): Promise<Object> {\n    return this._getTmdbImages(tmdbId)\n      .catch(() => this._getTvdbImages(tvdbId))\n      .catch(() => this._getFanartImages(tmdbId))\n      .catch(() => AbstractHelper.DefaultImages)\n  }\n\n  /**\n   * Get info from Trakt and make a new show object.\n   * @override\n   * @param {!string} id - The slug to query https://trakt.tv/.\n   * @returns {Show} - A new show without the episodes attached.\n   */\n  async getTraktInfo(id: string): Show {\n    try {\n      const traktShow = await trakt.shows.summary({\n        id,\n        extended: 'full'\n      })\n      const traktWatchers = await trakt.shows.watching({ id })\n\n      if (!traktShow) {\n        return logger.warn(`No show found for slug: '${id}'`)\n      }\n\n      const { ids } = traktShow\n      const { imdb, tmdb, slug, tvdb } = ids\n      if (!imdb || !tmdb || !tvdb) {\n        return logger.warn(`No ids found for slug: '${id}'`)\n      }\n\n      const images = await this.getImages({\n        tmdbId: tmdb,\n        tvdbId: tvdb\n      })\n\n      return {\n        imdb_id: imdb,\n        title: traktShow.title,\n        year: traktShow.year,\n        slug,\n        synopsis: traktShow.overview,\n        runtime: traktShow.runtime,\n        rating: {\n          votes: traktShow.votes,\n          watching: traktWatchers ? traktWatchers.length : 0,\n          percentage: Math.round(traktShow.rating * 10)\n        },\n        images,\n        genres: traktShow.genres ? traktShow.genres : ['unknown'],\n        tvdb_id: tvdb,\n        country: traktShow.country,\n        network: traktShow.network,\n        air_day: traktShow.airs.day,\n        air_time: traktShow.airs.time,\n        status: traktShow.status,\n        num_seasons: 0,\n        last_updated: Number(new Date()),\n        latest_episode: 0,\n        episodes: []\n      }\n    } catch (err) {\n      logger.error(`Trakt: Could not find any data on: ${err.path || err} with slug: '${id}'`)\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/helpers/ShowHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "ShowHelper",
    "memberof": "src/scraper/helpers/ShowHelper.js",
    "static": true,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/helpers/ShowHelper.js",
    "importStyle": "ShowHelper",
    "description": "Class for saving shows.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "ShowHelper"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "AbstractHelper"
    ]
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "_updateNumSeasons",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#_updateNumSeasons",
    "access": "private",
    "description": "Update the number of seasons of a given show.  ",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnimeShow|Show} - A newly updated show.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "AnimeShow",
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to update the number of seasons."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnimeShow",
        "Show"
      ],
      "spread": false,
      "description": "A newly updated show."
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "_updateEpisode",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#_updateEpisode",
    "access": "private",
    "description": "Update the torrents for an existing show.  ",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnimeShow|Show} - A show with merged torrents.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "matching",
        "description": "The matching episode of new the show."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "found",
        "description": "The matching episode existing show."
      },
      {
        "nullable": false,
        "types": [
          "AnimeShow",
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to merge the episodes to."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "quality",
        "description": "The quality of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnimeShow",
        "Show"
      ],
      "spread": false,
      "description": "A show with merged torrents."
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "_updateEpisodes",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#_updateEpisodes",
    "access": "private",
    "description": "Update a given show with it's associated episodes.  ",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnimeShow|Show} - A newly updated show.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "AnimeShow",
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to update its episodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnimeShow",
        "Show"
      ],
      "spread": false,
      "description": "A newly updated show."
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "_addSeasonalSeason",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#_addSeasonalSeason",
    "access": "private",
    "description": "Adds one seasonal season to a show.  ",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "AnimeShow",
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to add the torrents to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "episodes",
        "description": "The episodes containing the torrents."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "season",
        "description": "The season number."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the show."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "_addDateBasedSeason",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#_addDateBasedSeason",
    "access": "private",
    "description": "Adds one datebased season to a show.  ",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<AnimeShow|Show|undefined>} - The show with a datebased\nseason attached.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "AnimeShow",
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to add the torrents to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "episodes",
        "description": "The episodes containing the torrents."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "season",
        "description": "The season number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AnimeShow|Show|undefined>"
      ],
      "spread": false,
      "description": "The show with a datebased\nseason attached."
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "addEpisodes",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#addEpisodes",
    "access": "public",
    "description": "Adds episodes to a show.  ",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A show with updated torrents.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "AnimeShow",
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to add the torrents to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "episodes",
        "description": "The episodes containing the torrents."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the show."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A show with updated torrents."
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "_getTmdbImages",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#_getTmdbImages",
    "access": "private",
    "description": "Get TV show images from TMDB.  ",
    "lineNumber": 282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Object with banner, fanart and poster images.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tmdbId",
        "description": "The tmdb id of the show you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster images."
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "_getTvdbImages",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#_getTvdbImages",
    "access": "private",
    "description": "Get TV show images from TVDB.  ",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Object with banner, fanart and poster images.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tvdbId",
        "description": "The tvdb id of the show you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster images."
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "_getFanartImages",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#_getFanartImages",
    "access": "private",
    "description": "Get TV show images from Fanart.  ",
    "lineNumber": 333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Object with banner, fanart and poster images.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tvdbId",
        "description": "The tvdb id of the show you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster images."
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "getImages",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#getImages",
    "access": "protected",
    "description": "Get TV show images.",
    "lineNumber": 360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - Object with banner, fanart and poster images."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tmdbId",
        "description": "The tmdb id of the show you want the images\nfrom."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "tvdbId",
        "description": "The tvdb id of the show you want the images\nfrom."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Object with banner, fanart and poster images."
    },
    "override": true
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "getTraktInfo",
    "memberof": "src/scraper/helpers/ShowHelper.js~ShowHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/scraper/helpers/ShowHelper.js~ShowHelper#getTraktInfo",
    "access": "public",
    "description": "Get info from Trakt and make a new show object.  ",
    "lineNumber": 373,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A new show without the episodes attached.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The slug to query https://trakt.tv/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A new show without the episodes attached."
    },
    "override": true
  },
  {
    "__docId__": 282,
    "kind": "file",
    "name": "src/scraper/helpers/index.js",
    "content": "// Export the necessary modules.\nexport MovieHelper from './MovieHelper'\nexport ShowHelper from './ShowHelper'\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/helpers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 283,
    "kind": "file",
    "name": "src/scraper/index.js",
    "content": "// Import the necessary modules.\n// @flow\nimport {\n  bulkConfigs,\n  movieConfigs,\n  showConfigs,\n  ytsConfigs\n} from './configs'\nimport {\n  BulkProvider,\n  MovieProvider,\n  ShowProvider,\n  YtsProvider\n} from './providers'\n\n/**\n * The max concurreny web requests at a time.\n * @type {number}\n */\nconst maxWebRequests: number = 2\n\n/**\n * Export the providers to be attached to the PopApiScraper.\n * @type {Array<Object>}\n */\nexport default [{\n  Provider: BulkProvider,\n  args: {\n    maxWebRequests,\n    configs: bulkConfigs\n  }\n}, {\n  Provider: MovieProvider,\n  args: {\n    maxWebRequests,\n    configs: movieConfigs\n  }\n}, {\n  Provider: ShowProvider,\n  args: {\n    maxWebRequests,\n    configs: showConfigs\n  }\n}, {\n  Provider: YtsProvider,\n  args: {\n    maxWebRequests,\n    configs: ytsConfigs\n  }\n}]\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "maxWebRequests",
    "memberof": "src/scraper/index.js",
    "static": true,
    "longname": "src/scraper/index.js~maxWebRequests",
    "access": "public",
    "export": false,
    "importPath": "popcorn-api/src/scraper/index.js",
    "importStyle": null,
    "description": "The max concurreny web requests at a time.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "src/scraper/providers/BaseProvider.js",
    "content": "// Import the necessary modules.\n// @flow\nimport pMap from 'p-map'\nimport pTimes from 'p-times'\nimport { AbstractProvider } from 'pop-api-scraper'\n\nimport type {\n  MovieHelper,\n  ShowHelper\n} from '../helpers'\n\n/**\n * Class for scraping content from various sources.\n * @implements {AbstractProvider}\n * @type {BaseProvider}\n */\nexport default class BaseProvider extends AbstractProvider {\n\n  /**\n   * Map of the available content types to scrape.\n   * @type {Object}\n   */\n  static ContentTypes: Object = {\n    Movie: 'movie',\n    Show: 'show'\n  }\n\n  /**\n   * The api of the torrent provider.\n   * @type {Object}\n   */\n  api: Object\n\n  /**\n   * The name of the torrent provider.\n   * @type {string}\n   */\n  name: string\n\n  /**\n   * The helper class for adding movies.\n   * @type {MovieHelper|ShowHelper}\n   */\n  helper: MovieHelper | ShowHelper\n\n  /**\n   * The type of content to scrape.\n   * @type {string}\n   */\n  contentType: string\n\n  /**\n   * The max allowed concurrent web requests.\n   * @type {number}\n   */\n  maxWebRequests: number\n\n  /**\n   * The query object for the api.\n   * @type {Object}\n   */\n  query: Object\n\n  /**\n   * The regular expressions used to extract information about movies.\n   * @type {Array<Object>}\n   */\n  regexps: Array<Object>\n\n  /**\n   * Gets information about a movie from Trakt.tv and insert the movie into the\n   * MongoDB database.\n   * @protected\n   * @param {!Object} content - The content information.\n   * @throws {Error} - 'movie' is not a valid value for Types!\n   * @returns {Promise<Object, Error>} - A movie object.\n   */\n  _getMovieContent(content: Object): Promise<Object> {\n    const { episodes, slug } = content\n    if (episodes && episodes[0]) {\n      delete episodes[0]\n    }\n\n    return this.helper.getTraktInfo(slug).then(res => {\n      if (res && res.imdb_id) {\n        return this.helper.addEpisodes(res, episodes, slug)\n      }\n    })\n  }\n\n  /**\n   * Gets information about a show from Trakt.tv and insert the show into the\n   * MongoDB database.\n   * @protected\n   * @param {!Object} content - The show information.\n   * @throws {Error} - 'show' is not a valid value for Types!\n   * @returns {Promise<Object, Error>} - A show object.\n   */\n  _getShowContent(content: Object): Promise<Object> {\n    const { slugYear, torrents } = content\n    return this.helper.getTraktInfo(slugYear).then(res => {\n      if (res && res.imdb_id) {\n        return this.helper.addTorrents(res, torrents)\n      }\n    })\n  }\n\n  /**\n   * Gets information about content from Trakt.tv and inserts the content into\n   * the MongoDB database.\n   * @protected\n   * @param {!Object} content - The content information.\n   * @throws {Error} - 'CONTENT_TYPE' is not a valid value for Types!\n   * @returns {Promise<Object>} - A content object.\n   */\n  getContent(content: Object): Promise<Object> {\n    if (this.contentType === BaseProvider.ContentTypes.Movie) {\n      return this._getShowContent(content)\n    } else if (this.contentType === BaseProvider.ContentTypes.Show) {\n      return this._getMovieContent(content)\n    }\n\n    const err = new Error(`'${this.contentType}' is not a valid value for ContentTypes!`)\n    return Promise.reject(err)\n  }\n\n  /**\n   * Extract content information based on a regex.\n   * @abstract\n   * @protected\n   * @param {!Object} options - The options to extract content information.\n   * @param {!Object} options.torrent - The torrent to extract the content\n   * information.\n   * @param {!Object} options.regex - The regex object to extract the content\n   * information.\n   * @param {?string} [lang] - The language of the torrent.\n   * @throws {Error} - Using default method: 'extractContent'\n   * @returns {Object|undefined} - Information about the content from the\n   * torrent.\n   */\n  extractContent({ torrent, regex, lang }: Object): Object | void {\n    throw new Error('Using default method: \\'extractContent\\'')\n  }\n\n  /**\n   * Get content info from a given torrent.\n   * @protected\n   * @param {!Object} options - The options to get content info from a torrent.\n   * @param {!Object} options.torrent - A torrent object to extract content\n   * information from.\n   * @param {!string} [optiosn.lang=en] - The language of the torrent.\n   * @returns {Object|undefined} - Information about the content from the\n   * torrent.\n   */\n  getContentData({ torrent, lang = 'en' }: Object): Object | void {\n    const regex = this.regexps.find(\n      r => r.regex.test(torrent.title) || r.regex.test(torrent.name)\n    )\n\n    if (regex) {\n      return this.extractContent({\n        torrent,\n        regex,\n        lang\n      })\n    }\n\n    logger.warn(`${this.name}: Could not find data from torrent: '${torrent.title}'`)\n  }\n\n  /**\n   * Attach the torrent object to the content.\n   * @abstract\n   * @protected\n   * @param {!Object} options - The options to attach a torrent to the content.\n   * @param {!Object} options.content - The content to attach a torrent to.\n   * @param {!Object} options.torrent - The torrent object ot attach.\n   * @param {!string} options.quality - The quality of the torrent.\n   * @param {?number} options.season - The season number for the torrent.\n   * @param {?number} options.episode - The episode number for the torrent.\n   * @param {!string} [options.lang] - The language of the torrent.\n   * @throws {Error} - Using default method: 'attachTorrent'\n   * @returns {Object} - The content with the newly attached torrent.\n   */\n  attachTorrent({\n    content,\n    torrent,\n    quality,\n    season,\n    episode,\n    lang\n  }: Object): Object {\n    throw new Error('Using default method: \\'attachTorrent\\'')\n  }\n\n  /**\n   * Put all the found content from the torrents in an array.\n   * @abstract\n   * @protected\n   * @param {!Object} options - The options to get the content.\n   * @param {!Array<Object>} options.torrents - A list of torrents to extract\n   * content information from.\n   * @param {!string} [options.lang=en] - The language of the torrents.\n   * @throws {Error} - Using default method: 'getAllContent'\n   * @returns {Promise<Array<Object>, Error>} - A list of object with\n   * content information extracted from the torrents.\n   */\n  getAllContent({\n    torrents,\n    lang = 'en'\n  }: Object): Promise<Array<Object>> {\n    throw new Error('Using default method: \\'getAllContent\\'')\n  }\n\n  /**\n   * Get all the torrents of a given torrent provider.\n   * @protected\n   * @param {!number} totalPages - The total pages of the query.\n   * @returns {Promise<Array<Object>>} - A list of all the queried torrents.\n   */\n  getAllTorrents(totalPages: number): Promise<Array<Object>> {\n    let torrents = []\n    return pTimes(totalPages, async page => {\n      this.query.page = page + 1\n\n      logger.info(`${this.name}: Started searching ${this.name} on page ${page + 1} out of ${totalPages}`)\n      const res = await this.api.search(this.query)\n      const data = res.results\n        ? res.results // Kat & ET\n        : res.data\n          ? res.data.movies // YTS\n          : res.torrents\n            ? res.torrents // Nyaa\n            : []\n\n      torrents = torrents.concat(data)\n    }, {\n      concurrency: 1\n    }).then(() => {\n      logger.info(`${this.name}: Found ${torrents.length} torrents.`)\n      return torrents\n    })\n  }\n\n  /**\n   * Get the total pages to scrape for the provider query.\n   * @protected\n   * @returns {Promise<number>} - The number of total pages to scrape.\n   */\n  getTotalPages(): Promise<number> {\n    return this.api.search(this.query).then(res => {\n      if (res.data) { // Yts\n        return Math.ceil(res.data.movie_count / 50)\n      } else if (res.total_pages) { // Kat & ET\n        return res.total_pages\n      }\n\n      return Math.ceil(res.totalRecordCount / res.queryRecordCount) // Nyaa\n    })\n  }\n\n  /**\n   * Set the configuration to scrape with.\n   * @protected\n   * @param {!Object} config - The config to get content with.\n   * @param {!string} config.name - The name of the config.\n   * @param {!Object} config.api - The API module ot get the content with.\n   * @param {!string} config.contentType - The type of content to scrape.\n   * @param {!MongooseModel} config.Model - The model for the content to\n   * scrape.\n   * @param {!IHelper} config.Helper - The helper class to save the content to\n   * the database.\n   * @param {?Object} config.query - The query to get the content with for the\n   * api.\n   * @param {?Array<Ojbect>} config.regexps - The regular expressions used to\n   * extract information from a torrent.\n   * @returns {undefined}\n   */\n  setConfig({\n    name,\n    api,\n    contentType,\n    Model,\n    Helper,\n    query,\n    regexps\n  }: Object): void {\n    this.name = name\n    this.api = api\n    this.contentType = contentType\n    this.helper = new Helper({\n      Model,\n      name\n    })\n    this.query = query\n    this.regexps = regexps\n  }\n\n  /**\n   * Get the contents for a configuration.\n   * @override\n   * @param {!Object} config - The config to get content with.\n   * @param {!string} config.name - The name of the config.\n   * @param {!Object} config.api - The API module ot get the content with.\n   * @param {!string} config.contentType - The type of content to scrape.\n   * @param {!MongooseModel} config.Model - The model for the content to\n   * scrape.\n   * @param {!IHelper} config.Helper - The helper class to save the content to\n   * the database.\n   * @param {?Object} config.query - The query to get the content with for the\n   * api.\n   * @param {?Array<Ojbect>} config.regexps - The regular expressions used to\n   * extract information from a torrent.\n   * @returns {Promise<Array<Object>|undefined, Error>} - The results of a\n   * configuration.\n   */\n  async scrapeConfig({\n    name,\n    api,\n    contentType,\n    Model,\n    Helper,\n    query,\n    regexps\n  }: Object): Promise<Array<Object> | void> {\n    try {\n      this.setConfig({ name, api, contentType, Model, Helper, query, regexps })\n\n      const totalPages = await this.getTotalPages()\n      if (!totalPages) {\n        return logger.error(\n          `${this.name}: totalPages returned: '${totalPages}'`\n        )\n      }\n\n      logger.info(`${this.name}: Total pages ${totalPages}`)\n\n      const torrents = await this.getAllTorrents(totalPages)\n\n      const { language } = this.query\n      const allContent = await this.getAllContent({\n        torrents,\n        language\n      })\n\n      return await pMap(allContent, content => this.getContent(content), {\n        concurrency: this.maxWebRequests\n      })\n    } catch (err) {\n      logger.error(err)\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/providers/BaseProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "BaseProvider",
    "memberof": "src/scraper/providers/BaseProvider.js",
    "static": true,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/providers/BaseProvider.js",
    "importStyle": "BaseProvider",
    "description": "Class for scraping content from various sources.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "BaseProvider"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "pop-api-scraper~AbstractProvider"
    ],
    "implements": [
      "AbstractProvider"
    ]
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "ContentTypes",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "static": true,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider.ContentTypes",
    "access": "public",
    "description": "Map of the available content types to scrape. ",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "api",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#api",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "name",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#name",
    "access": "public",
    "description": "The name of the torrent provider. ",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "helper",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#helper",
    "access": "public",
    "description": "The helper class for adding movies. ",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "union"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "contentType",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#contentType",
    "access": "public",
    "description": "The type of content to scrape. ",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "maxWebRequests",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#maxWebRequests",
    "access": "public",
    "description": "The max allowed concurrent web requests. ",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "query",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#query",
    "access": "public",
    "description": "The query object for the api. ",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "regexps",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#regexps",
    "access": "public",
    "description": "The regular expressions used to extract information about movies. ",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "_getMovieContent",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#_getMovieContent",
    "access": "protected",
    "description": "Gets information about a movie from Trakt.tv and insert the movie into the\nMongoDB database.  ",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - A movie object.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The content information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "A movie object."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "'movie' is not a valid value for Types!"
      }
    ]
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "_getShowContent",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#_getShowContent",
    "access": "protected",
    "description": "Gets information about a show from Trakt.tv and insert the show into the\nMongoDB database.  ",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object, Error>} - A show object.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The show information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, Error>"
      ],
      "spread": false,
      "description": "A show object."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "'show' is not a valid value for Types!"
      }
    ]
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "getContent",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#getContent",
    "access": "protected",
    "description": "Gets information about content from Trakt.tv and inserts the content into\nthe MongoDB database.  ",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - A content object.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The content information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "A content object."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "'CONTENT_TYPE' is not a valid value for Types!"
      }
    ]
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "extractContent",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#extractContent",
    "access": "protected",
    "description": "Extract content information based on a regex.",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|undefined} - Information about the content from the\ntorrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to extract content information."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "The torrent to extract the content\ninformation."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.regex",
        "description": "The regex object to extract the content\ninformation."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "lang",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Information about the content from the\ntorrent."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'extractContent'"
      }
    ]
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "getContentData",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#getContentData",
    "access": "protected",
    "description": "Get content info from a given torrent.",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|undefined} - Information about the content from the\ntorrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to get content info from a torrent."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "A torrent object to extract content\ninformation from."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "en",
        "defaultRaw": "en",
        "name": "optiosn.lang",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Information about the content from the\ntorrent."
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "attachTorrent",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#attachTorrent",
    "access": "protected",
    "description": "Attach the torrent object to the content.",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The content with the newly attached torrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to attach a torrent to the content."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.content",
        "description": "The content to attach a torrent to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "The torrent object ot attach."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.quality",
        "description": "The quality of the torrent."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.season",
        "description": "The season number for the torrent."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.episode",
        "description": "The episode number for the torrent."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.lang",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The content with the newly attached torrent."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'attachTorrent'"
      }
    ]
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "getAllContent",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#getAllContent",
    "access": "protected",
    "description": "Put all the found content from the torrents in an array.",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>, Error>} - A list of object with\ncontent information extracted from the torrents."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to get the content."
      },
      {
        "nullable": false,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrents",
        "description": "A list of torrents to extract\ncontent information from."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "en",
        "defaultRaw": "en",
        "name": "options.lang",
        "description": "The language of the torrents."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>, Error>"
      ],
      "spread": false,
      "description": "A list of object with\ncontent information extracted from the torrents."
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'getAllContent'"
      }
    ]
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "getAllTorrents",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#getAllTorrents",
    "access": "protected",
    "description": "Get all the torrents of a given torrent provider.  ",
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>>} - A list of all the queried torrents.  "
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "totalPages",
        "description": "The total pages of the query."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>>"
      ],
      "spread": false,
      "description": "A list of all the queried torrents."
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "getTotalPages",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#getTotalPages",
    "access": "protected",
    "description": "Get the total pages to scrape for the provider query.  ",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>} - The number of total pages to scrape.  "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": "The number of total pages to scrape."
    },
    "params": []
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "setConfig",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#setConfig",
    "access": "protected",
    "description": "Set the configuration to scrape with.",
    "lineNumber": 279,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The config to get content with."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.name",
        "description": "The name of the config."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.api",
        "description": "The API module ot get the content with."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.contentType",
        "description": "The type of content to scrape."
      },
      {
        "nullable": false,
        "types": [
          "MongooseModel"
        ],
        "spread": false,
        "optional": false,
        "name": "config.Model",
        "description": "The model for the content to\nscrape."
      },
      {
        "nullable": false,
        "types": [
          "IHelper"
        ],
        "spread": false,
        "optional": false,
        "name": "config.Helper",
        "description": "The helper class to save the content to\nthe database."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.query",
        "description": "The query to get the content with for the\napi."
      },
      {
        "nullable": true,
        "types": [
          "Array<Ojbect>"
        ],
        "spread": false,
        "optional": false,
        "name": "config.regexps",
        "description": "The regular expressions used to\nextract information from a torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "scrapeConfig",
    "memberof": "src/scraper/providers/BaseProvider.js~BaseProvider",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/scraper/providers/BaseProvider.js~BaseProvider#scrapeConfig",
    "access": "public",
    "description": "Get the contents for a configuration.",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>|undefined, Error>} - The results of a\nconfiguration."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The config to get content with."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.name",
        "description": "The name of the config."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.api",
        "description": "The API module ot get the content with."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.contentType",
        "description": "The type of content to scrape."
      },
      {
        "nullable": false,
        "types": [
          "MongooseModel"
        ],
        "spread": false,
        "optional": false,
        "name": "config.Model",
        "description": "The model for the content to\nscrape."
      },
      {
        "nullable": false,
        "types": [
          "IHelper"
        ],
        "spread": false,
        "optional": false,
        "name": "config.Helper",
        "description": "The helper class to save the content to\nthe database."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.query",
        "description": "The query to get the content with for the\napi."
      },
      {
        "nullable": true,
        "types": [
          "Array<Ojbect>"
        ],
        "spread": false,
        "optional": false,
        "name": "config.regexps",
        "description": "The regular expressions used to\nextract information from a torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>|undefined, Error>"
      ],
      "spread": false,
      "description": "The results of a\nconfiguration."
    },
    "override": true
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "src/scraper/providers/BulkProvider.js",
    "content": "// import the necessary modules.\n// @flow\nimport pMap from 'p-map'\n\nimport BaseProvider from './BaseProvider'\n\n/**\n * Class for scraping content from EZTV and HorribleSubs.\n * @extends {BaseProvider}\n * @type {BulkProvider}\n */\nexport default class BulkProvider extends BaseProvider {\n\n  /**\n   * Get the contents for a configuration.\n   * @param {!Object} config - The config to get content with.\n   * @param {!string} config.name - The name of the config.\n   * @param {!Object} config.api - The API module ot get the content with.\n   * @param {!string} config.contentType - The type of content to scrape.\n   * @param {!MongooseModel} config.Model - The model for the content to\n   * scrape.\n   * @param {!IHelper} config.Helper - The helper class to save the content to\n   * the database.\n   * @returns {Promise<Array<Object>, Error>} - The results of a configuration.\n   */\n  scrapeConfig({\n    name,\n    api,\n    contentType,\n    Model,\n    Helper\n  }: Object): Promise<Array<Object>> {\n    this.setConfig({ name, api, contentType, Model, Helper })\n\n    logger.info(`${this.name}: Started scraping...`)\n    return this.api.getAll().then(contents => {\n      logger.info(\n        `${this.name}: Found ${contents.length} ${this.contentType}s.`\n      )\n\n      return pMap(contents, c => {\n        return this.api.getData(c)\n          .then(content => this.getContent(content))\n          .catch(err => logger.error(err))\n      }, {\n        concurrency: this.maxWebRequests\n      })\n    })\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/providers/BulkProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "class",
    "name": "BulkProvider",
    "memberof": "src/scraper/providers/BulkProvider.js",
    "static": true,
    "longname": "src/scraper/providers/BulkProvider.js~BulkProvider",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/providers/BulkProvider.js",
    "importStyle": "BulkProvider",
    "description": "Class for scraping content from EZTV and HorribleSubs.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "BulkProvider"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "BaseProvider"
    ]
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "scrapeConfig",
    "memberof": "src/scraper/providers/BulkProvider.js~BulkProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/BulkProvider.js~BulkProvider#scrapeConfig",
    "access": "public",
    "description": "Get the contents for a configuration.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>, Error>} - The results of a configuration."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The config to get content with."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.name",
        "description": "The name of the config."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.api",
        "description": "The API module ot get the content with."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.contentType",
        "description": "The type of content to scrape."
      },
      {
        "nullable": false,
        "types": [
          "MongooseModel"
        ],
        "spread": false,
        "optional": false,
        "name": "config.Model",
        "description": "The model for the content to\nscrape."
      },
      {
        "nullable": false,
        "types": [
          "IHelper"
        ],
        "spread": false,
        "optional": false,
        "name": "config.Helper",
        "description": "The helper class to save the content to\nthe database."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>, Error>"
      ],
      "spread": false,
      "description": "The results of a configuration."
    }
  },
  {
    "__docId__": 315,
    "kind": "file",
    "name": "src/scraper/providers/MovieProvider.js",
    "content": "// Import the necessary modules.\n// @flow\nimport pMap from 'p-map'\nimport bytes from 'bytes'\n\nimport BaseProvider from './BaseProvider'\nimport movieMap from './maps/movieMap'\n\n/**\n * Class for scraping movie content from various sources.\n * @extends {BaseProvider}\n * @type {MovieProvider}\n */\nexport default class MovieProvider extends BaseProvider {\n\n  /**\n   * Extract content information based on a regex.\n   * @override\n   * @protected\n   * @param {!Object} options - The options to extract content information.\n   * @param {!Object} options.torrent - The torrent to extract the content\n   * information.\n   * @param {!Object} options.regex - The regex object to extract the content\n   * information.\n   * @param {?string} [lang] - The language of the torrent.\n   * @returns {Object|undefined} - Information about the content from the\n   * torrent.\n   */\n  extractContent({ torrent, regex, lang }: Object): Object | void {\n    let movieTitle\n    let slug\n\n    const {\n      title, size, seeds, peers, magnet, torrentLink, fileSize\n    } = torrent\n\n    movieTitle = title.match(regex.regex)[1]\n    if (movieTitle.endsWith(' ')) {\n      movieTitle = movieTitle.substring(0, movieTitle.length - 1)\n    }\n    movieTitle = movieTitle.replace(/\\./g, ' ')\n\n    slug = movieTitle.replace(/[^a-zA-Z0-9 ]/gi, '')\n      .replace(/\\s+/g, '-')\n      .toLowerCase()\n    if (slug.endsWith('-')) {\n      slug = slug.substring(0, slug.length - 1)\n    }\n    slug = slug in movieMap ? movieMap[slug] : slug\n\n    const year = parseInt(title.match(regex.regex)[2], 10)\n    const quality = title.match(regex.regex)[3]\n\n    const torrentObj = {\n      url: magnet || torrentLink,\n      seeds: seeds || 0,\n      peers: peers || 0,\n      size: bytes(size),\n      filesize: size || fileSize,\n      provider: this.name\n    }\n    const movie = {\n      movieTitle,\n      slug,\n      slugYear: `${slug}-${year}`,\n      year,\n      quality,\n      language: lang,\n      type: this.contentType,\n      torrents: {}\n    }\n\n    return this.attachTorrent({\n      movie,\n      quality,\n      lang,\n      torrent: torrentObj\n    })\n  }\n\n  /**\n   * Attach the torrent object to the content.\n   * @overridd\n   * @protected\n   * @param {!Object} options - The options to attach a torrent to the content.\n   * @param {!Object} options.movie - The content to attach a torrent to.\n   * @param {!Object} options.torrent - The torrent object ot attach.\n   * @param {!string} options.quality - The quality of the torrent.\n   * @param {!string} [options.lang] - The language of the torrent.\n   * @returns {Object} - The content with the newly attached torrent.\n   */\n  attachTorrent({ movie, torrent, quality, lang }: Object): Object {\n    if (!movie.torrents[lang]) {\n      movie.torrents[lang] = {}\n    }\n    if (!movie.torrents[lang][quality]) {\n      movie.torrents[lang][quality] = torrent\n    }\n\n    return movie\n  }\n\n  /**\n   * Put all the found content from the torrents in an array.\n   * @override\n   * @protected\n   * @param {!Object} options - The options to get the content.\n   * @param {!Array<Object>} options.torrents - A list of torrents to extract\n   * content information from.\n   * @param {!string} [options.lang=en] - The language of the torrents.\n   * @returns {Promise<Array<Object>, Error>} - A list of object with\n   * content information extracted from the torrents.\n   */\n  getAllContent({\n    torrents,\n    lang = 'en'\n  }: Object): Promise<Array<Object>> {\n    const movies = new Map()\n\n    return pMap(torrents, t => {\n      if (!t) {\n        return\n      }\n\n      const movie = this.getContentData({\n        lang,\n        torrent: t\n      })\n\n      if (!movie) {\n        return\n      }\n\n      const { slug, language, quality } = movie\n      if (!movies.has(slug)) {\n        return movies.set(slug, movie)\n      }\n\n      const torrent = movie.torrents[language][quality]\n      const created = this.attachTorrent({\n        torrent,\n        quality,\n        language,\n        movie\n      })\n\n      return movies.set(slug, created)\n    }, {\n      concurrency: 1\n    }).then(() => Array.from(movies.values()))\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/providers/MovieProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "class",
    "name": "MovieProvider",
    "memberof": "src/scraper/providers/MovieProvider.js",
    "static": true,
    "longname": "src/scraper/providers/MovieProvider.js~MovieProvider",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/providers/MovieProvider.js",
    "importStyle": "MovieProvider",
    "description": "Class for scraping movie content from various sources.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "MovieProvider"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "BaseProvider"
    ]
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "extractContent",
    "memberof": "src/scraper/providers/MovieProvider.js~MovieProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/MovieProvider.js~MovieProvider#extractContent",
    "access": "protected",
    "description": "Extract content information based on a regex.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|undefined} - Information about the content from the\ntorrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to extract content information."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "The torrent to extract the content\ninformation."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.regex",
        "description": "The regex object to extract the content\ninformation."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "lang",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Information about the content from the\ntorrent."
    },
    "override": true
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "attachTorrent",
    "memberof": "src/scraper/providers/MovieProvider.js~MovieProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/MovieProvider.js~MovieProvider#attachTorrent",
    "access": "protected",
    "description": "Attach the torrent object to the content.",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@overridd",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The content with the newly attached torrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to attach a torrent to the content."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.movie",
        "description": "The content to attach a torrent to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "The torrent object ot attach."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.quality",
        "description": "The quality of the torrent."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.lang",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The content with the newly attached torrent."
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "getAllContent",
    "memberof": "src/scraper/providers/MovieProvider.js~MovieProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/MovieProvider.js~MovieProvider#getAllContent",
    "access": "protected",
    "description": "Put all the found content from the torrents in an array.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>, Error>} - A list of object with\ncontent information extracted from the torrents."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to get the content."
      },
      {
        "nullable": false,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrents",
        "description": "A list of torrents to extract\ncontent information from."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "en",
        "defaultRaw": "en",
        "name": "options.lang",
        "description": "The language of the torrents."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>, Error>"
      ],
      "spread": false,
      "description": "A list of object with\ncontent information extracted from the torrents."
    },
    "override": true
  },
  {
    "__docId__": 320,
    "kind": "file",
    "name": "src/scraper/providers/ShowProvider.js",
    "content": "// Import the necessary modules.\n// @flow\nimport pMap from 'p-map'\n\nimport BaseProvider from './BaseProvider'\nimport showMap from './maps/showMap'\n\n/**\n * Class for scraping show content from various sources.\n * @extends {BaseProvider}\n * @type {ShowProvider}\n */\nexport default class ShowProvider extends BaseProvider {\n\n  /**\n   * Extract content information based on a regex.\n   * @override\n   * @protected\n   * @param {!Object} options - The options to extract content information.\n   * @param {!Object} options.torrent - The torrent to extract the content\n   * information.\n   * @param {!Object} options.regex - The regex object to extract the content\n   * information.\n   * @returns {Object|undefined} - Information about the content from the\n   * torrent.\n   */\n  extractContent({ torrent, regex }: Object): Object | void {\n    let episode\n    let season\n    let slug\n\n    const { title, name } = torrent\n    const t = regex.regex.test(title)\n      ? title\n      : regex.regex.test(name)\n        ? name\n        : null\n    if (!t) {\n      return\n    }\n    const match = t.match(regex.regex)\n\n    const showTitle = match[1].replace(/\\./g, ' ')\n    slug = showTitle.replace(/[^a-zA-Z0-9\\- ]/gi, '')\n      .replace(/\\s+/g, '-')\n      .toLowerCase()\n    slug = slug in showMap ? showMap[slug] : slug\n\n    season = 1\n    season = regex.dateBased ? parseInt(match[2], 10) : match[2]\n\n    episode = match.length >= 4\n      ? parseInt(match[3], 10)\n      : parseInt(match[2], 10)\n    episode = regex.dateBased ? parseInt(match[3], 10) : match[3]\n\n    const quality = t.match(/(\\d{3,4})p/) !== null\n      ? t.match(/(\\d{3,4})p/)[0]\n      : '480p'\n\n    const torrentObj = {\n      url: torrent.magnet ? torrent.magnet : torrent.torrent_link,\n      seeds: torrent.seeds ? torrent.seeds : 0,\n      peers: torrent.peers ? torrent.peers : 0,\n      provider: this.name\n    }\n\n    const show = {\n      showTitle,\n      slug,\n      season,\n      episode,\n      quality,\n      dateBased: regex.dateBased,\n      episodes: {},\n      type: this.contentType\n    }\n\n    return this.attachTorrent({\n      show,\n      season,\n      episode,\n      quality,\n      torrent: torrentObj\n    })\n  }\n\n  /**\n   * Attach the torrent object to the content.\n   * @override\n   * @protected\n   * @param {!Object} options - The options to attach a torrent to the content.\n   * @param {!Object} options.show - The content to attach a torrent to.\n   * @param {!Object} options.torrent - The torrent object ot attach.\n   * @param {!string} options.quality - The quality of the torrent.\n   * @param {?number} options.season - The season number for the torrent.\n   * @param {?number} options.episode - The episode number for the torrent.\n   * @throws {Error} - Using default method: 'attachTorrent'\n   * @returns {Object} - The content with the newly attached torrent.\n   */\n  attachTorrent({\n    show,\n    torrent,\n    season,\n    episode,\n    quality\n  }: Object): Object {\n    if (!show.episodes[season]) {\n      show.episodes[season] = {}\n    }\n    if (!show.episodes[season][episode]) {\n      show.episodes[season][episode] = {}\n    }\n\n    const qualityObj = show.episodes[season][episode][quality]\n    if (\n      (!qualityObj || show.showTitle.toLowerCase().indexOf('repack') > -1) ||\n      (qualityObj && qualityObj.seeds < torrent.seeds)\n    ) {\n      show.episodes[season][episode][quality] = torrent\n    }\n\n    return show\n  }\n\n  /**\n   * Put all the found content from the torrents in an array.\n   * @override\n   * @protected\n   * @param {!Object} options - The options to get the content.\n   * @param {!Array<Object>} options.torrents - A list of torrents to extract\n   * content information from.\n   * @returns {Promise<Array<Object>, Error>} - A list of object with\n   * content information extracted from the torrents.\n   */\n  getAllContent({ torrents }: Object): Promise<Array<Object>> {\n    const shows = new Map()\n\n    return pMap(torrents, t => {\n      if (!t) {\n        return\n      }\n\n      const show = this.getContentData({\n        torrent: t\n      })\n      if (!show) {\n        return\n      }\n\n      const { slug, season, episode, quality } = show\n      if (!shows.has(slug)) {\n        return shows.set(slug, show)\n      }\n\n      const torrent = show.episodes[season][episode][quality]\n      const created = this.attachTorrent({\n        torrent,\n        season,\n        episode,\n        quality,\n        show\n      })\n\n      return shows.set(slug, created)\n    }, {\n      concurrency: 1\n    }).then(() => Array.from(shows.values()))\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/providers/ShowProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 321,
    "kind": "class",
    "name": "ShowProvider",
    "memberof": "src/scraper/providers/ShowProvider.js",
    "static": true,
    "longname": "src/scraper/providers/ShowProvider.js~ShowProvider",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/providers/ShowProvider.js",
    "importStyle": "ShowProvider",
    "description": "Class for scraping show content from various sources.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "ShowProvider"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "BaseProvider"
    ]
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "extractContent",
    "memberof": "src/scraper/providers/ShowProvider.js~ShowProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/ShowProvider.js~ShowProvider#extractContent",
    "access": "protected",
    "description": "Extract content information based on a regex.",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|undefined} - Information about the content from the\ntorrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to extract content information."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "The torrent to extract the content\ninformation."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.regex",
        "description": "The regex object to extract the content\ninformation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Information about the content from the\ntorrent."
    },
    "override": true
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "attachTorrent",
    "memberof": "src/scraper/providers/ShowProvider.js~ShowProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/ShowProvider.js~ShowProvider#attachTorrent",
    "access": "protected",
    "description": "Attach the torrent object to the content.",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The content with the newly attached torrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to attach a torrent to the content."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.show",
        "description": "The content to attach a torrent to."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "The torrent object ot attach."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.quality",
        "description": "The quality of the torrent."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.season",
        "description": "The season number for the torrent."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.episode",
        "description": "The episode number for the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The content with the newly attached torrent."
    },
    "override": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Using default method: 'attachTorrent'"
      }
    ]
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "getAllContent",
    "memberof": "src/scraper/providers/ShowProvider.js~ShowProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/ShowProvider.js~ShowProvider#getAllContent",
    "access": "protected",
    "description": "Put all the found content from the torrents in an array.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<Object>, Error>} - A list of object with\ncontent information extracted from the torrents."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to get the content."
      },
      {
        "nullable": false,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrents",
        "description": "A list of torrents to extract\ncontent information from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<Object>, Error>"
      ],
      "spread": false,
      "description": "A list of object with\ncontent information extracted from the torrents."
    },
    "override": true
  },
  {
    "__docId__": 325,
    "kind": "file",
    "name": "src/scraper/providers/YtsProvider.js",
    "content": "// Import the necessary modules.\n// @flow\nimport MovieProvider from './MovieProvider'\n\n/**\n * Class for scraping content from YTS.ag.\n * @extends {MovieProvider}\n * @type {YtsProvider}\n */\nexport default class YtsProvider extends MovieProvider {\n\n  /**\n   * Extract content information based on a regex.\n   * @override\n   * @protected\n   * @param {!Object} options - The options to extract content information.\n   * @param {!Object} options.torrent - The torrent to extract the content\n   * information.\n   * @param {?string} [lang] - The language of the torrent.\n   * @returns {Object|undefined} - Information about the content from the\n   * torrent.\n   */\n  extractContent({ torrent, lang }: Object): Object | void {\n    const movie = {\n      movieTitle: torrent.title,\n      slug: torrent.imdb_code,\n      slugYear: torrent.imdb_code,\n      year: torrent.year,\n      language: lang,\n      torrents: {}\n    }\n\n    torrent.torrents.map(t => {\n      // eslint-disable-next-line camelcase\n      const { hash, peers, quality, seeds, size, size_bytes } = t\n\n      const torrentObj = {\n        url: `magnet:?xt=urn:btih:${hash}&tr=udp://glotorrents.pw:6969/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://torrent.gresille.org:80/announce&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.coppersurfer.tk:6969&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://p4p.arenabg.ch:1337&tr=udp://tracker.internetwarriors.net:1337`,\n        seeds: seeds || 0,\n        peers: peers || 0,\n        size: size_bytes,\n        filesize: size,\n        provider: this.name\n      }\n\n      return this.attachTorrent({\n        movie,\n        quality,\n        lang,\n        torrent: torrentObj\n      })\n    })\n\n    return movie\n  }\n\n  /**\n   * Get content info from a given torrent.\n   * @override\n   * @protected\n   * @param {!Object} options - The options to get content info from a torrent.\n   * @param {!Object} options.torrent - A torrent object to extract content\n   * information from.\n   * @param {!string} [optiosn.lang=en] - The language of the torrent.\n   * @returns {Object|undefined} - Information about the content from the\n   * torrent.\n   */\n  getContentData({ torrent, lang = 'en' }: Object): Object | void {\n    if (\n      torrent && torrent.torrents &&\n      torrent.imdb_code &&\n      torrent.language.match(/english/i)\n    ) {\n      return this.extractContent({\n        torrent,\n        lang\n      })\n    }\n\n    logger.warn(`${this.name}: Could not find data from torrent: '${torrent.title}'`)\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/providers/YtsProvider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "class",
    "name": "YtsProvider",
    "memberof": "src/scraper/providers/YtsProvider.js",
    "static": true,
    "longname": "src/scraper/providers/YtsProvider.js~YtsProvider",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/providers/YtsProvider.js",
    "importStyle": "YtsProvider",
    "description": "Class for scraping content from YTS.ag.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "YtsProvider"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "MovieProvider"
    ]
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "extractContent",
    "memberof": "src/scraper/providers/YtsProvider.js~YtsProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/YtsProvider.js~YtsProvider#extractContent",
    "access": "protected",
    "description": "Extract content information based on a regex.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|undefined} - Information about the content from the\ntorrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to extract content information."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "The torrent to extract the content\ninformation."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "lang",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Information about the content from the\ntorrent."
    },
    "override": true
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "getContentData",
    "memberof": "src/scraper/providers/YtsProvider.js~YtsProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scraper/providers/YtsProvider.js~YtsProvider#getContentData",
    "access": "protected",
    "description": "Get content info from a given torrent.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|undefined} - Information about the content from the\ntorrent."
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to get content info from a torrent."
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.torrent",
        "description": "A torrent object to extract content\ninformation from."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "en",
        "defaultRaw": "en",
        "name": "optiosn.lang",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Information about the content from the\ntorrent."
    },
    "override": true
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "src/scraper/providers/index.js",
    "content": "// Export the necessary modules.\nexport BulkProvider from './BulkProvider'\nexport MovieProvider from './MovieProvider'\nexport ShowProvider from './ShowProvider'\nexport YtsProvider from './YtsProvider'\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/providers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "file",
    "name": "src/scraper/providers/maps/movieMap.js",
    "content": "// @flow\n\n/**\n * Map for correcting movie slugs.\n * @type {Object}\n */\nconst movieMap: {\n  [key: string]: string\n} = {}\n\n/**\n * Export the movie map.\n * @type {Object}\n */\nexport default movieMap\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/providers/maps/movieMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 331,
    "kind": "variable",
    "name": "movieMap",
    "memberof": "src/scraper/providers/maps/movieMap.js",
    "static": true,
    "longname": "src/scraper/providers/maps/movieMap.js~movieMap",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/providers/maps/movieMap.js",
    "importStyle": "movieMap",
    "description": "Export the movie map.",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "src/scraper/providers/maps/showMap.js",
    "content": "// @flow\n\n/**\n * Map for correcting show slugs.\n * @type {Object}\n */\nconst showMap: {\n  [key: string]: string\n} = {\n  '60-minutes-us': '60-minutes',\n  '91-days': 'ninety-one-days',\n  'ace-attorney': 'gyakuten-saiban',\n  'ace-of-diamond': 'diamond-no-ace',\n  'active-raid': 'active-raid-kidou-kyoushuushitsu-dai-hakkei',\n  'ai-mai-mi-mousou-catastrophie': 'ai-mai-mi-mousou-catastrophe',\n  'akagami-no-shirayukihime': 'akagami-no-shirayuki-hime',\n  'akb0048': 'akb0048-first-stage',\n  'alderamin-on-the-sky': 'nejimaki-seirei-senki-tenkyou-no-alderamin',\n  'american-crime': 'american-crime-1969',\n  'ani-tore-ex': 'anitore-ex',\n  'argevollen': 'shirogane-no-ishi-argevollen',\n  'arpeggio-of-blue-steel-ars-nova': 'aoki-hagane-no-arpeggio-ars-nova',\n  'arslan-senki': 'kigyou-senshi-arslan',\n  'assassination-classroom': 'ansatsu-kyoushitsu',\n  'b-project': 'b-project-kodou-ambitious',\n  'bachelor-live': 'the-bachelor-live',\n  'ballers-2015': 'ballers',\n  'battle-girls-time-paradox': 'sengoku-otome-momoiro-paradox',\n  'big-brother-us': 'big-brother-2000',\n  'blackish': 'black-ish',\n  'blazbluealter-memory': 'blazblue-alter-memory',\n  'bobs-burgers': 'bob-s-burgers',\n  'bonjour-sweet-love-patisserie': 'bonjour-koiaji-patisserie',\n  'bordertown-2015': 'bordertown-2016',\n  'bottom-biting-bug': 'oshiri-kajiri-mushi',\n  'brotherhoodfinal-fantasy-xv': 'brotherhood-final-fantasy-xv',\n  'brynhildr-in-the-darkness': 'gokukoku-no-brynhildr',\n  'cardfight-vanguard-g-girs-crisis': 'cardfight-vanguard-g-gears-crisis-hen',\n  'celebrity-big-brother': 'celebrity-big-brother-2001',\n  'chaos-dragon': 'chaos-dragon-sekiryuu-seneki',\n  'chicago-pd': 'chicago-p-d',\n  'childrens-hospital-us': 'childrens-hospital',\n  'concrete-revolutio': 'concrete-revolutio-choujin-gensou',\n  'cooper-barretts-guide-to-surviving-life': 'cooper-barrett-s-guide-to-surviving-life-2016',\n  'cosmos-a-space-time-odyssey': 'cosmos-a-spacetime-odyssey',\n  'croisee-in-a-foreign-labyrinth': 'ikoku-meiro-no-croisee',\n  'cross-ange': 'cross-ange-tenshi-to-ryuu-no-rinbu',\n  'd.gray-man-hallow': 'd-gray-man-hallow',\n  'daimidaler': 'kenzen-robo-daimidaler',\n  'danganronpa-3-future-arc': 'danganronpa-3-the-end-of-kibougamine-gakuen-mirai-hen',\n  'danganronpa-the-animation': 'danganronpa-kibou-no-gakuen-to-zetsubou-no-koukousei-the-animation',\n  'danmachi': 'dungeon-ni-deai-wo-motomeru-no-wa-machigatteiru-no-darou-ka',\n  'dcs-legends-of-tomorrow': 'dc-s-legends-of-tomorrow',\n  'dd-hokuto-no-ken-2-ichigo-aji-': 'dd-hokuto-no-ken-2-ichigo-aji',\n  'diabolik-lovers-more-blood': 'diabolik-lovers-2nd-season',\n  'digimon-adventure-tri': 'digimon-adventure-tri-4',\n  'doll-and-em': 'doll-em',\n  'dusk-maiden-of-amnesia': 'tasogare-otome-x-amnesia',\n  'ebiten': 'ebiten-kouritsu-ebisugawa-koukou-tenmonbu',\n  'engaged-to-the-unidentified': 'mikakunin-de-shinkoukei',\n  'fuse-memoirs-of-the-hunter-girl': 'fuse-teppou-musume-no-torimonochou',\n  'garo-the-animation': 'garo-honoo-no-kokuin-special',\n  'garo-the-crimson-moon': 'garo-guren-no-tsuki',\n  'garothe-crimson-moon': 'garo-guren-no-tsuki',\n  'gate': 'gate-jieitai-kanochi-nite-kaku-tatakaeri',\n  'gen-ei-o-kakeru-taiyou-il-sole-penetra-le-illusioni': 'genei-wo-kakeru-taiyou',\n  'ghost-in-the-shell-arise-alternative-architecture': 'ghost-in-the-shell-arise-tv',\n  'girl-friend-beta': 'girlfriend-kari',\n  'gold-rush': 'gold-rush-2010',\n  'greys-anatomy': 'grey-s-anatomy',\n  'gundam-reconguista-in-g': 'gundam-g-no-reconguista',\n  'gundam-unicorn': 'mobile-suit-gundam-unicorn',\n  'hackadoll-the-animation': 'hacka-doll-the-animation',\n  'hakkenden-eight-dogs-of-the-east': 'hakkenden-touhou-hakken-ibun',\n  'hakuoki-reimeiroku': 'hakuouki-reimeiroku',\n  'hamatora': 'hamatora-the-animation',\n  'haruchika': 'haruchika-haruta-to-chika-wa-seishun-suru',\n  'hawaii-five-0-2010': 'hawaii-five-0',\n  'hayate-no-gotoku-cuties': 'hayate-the-combat-butler-cuties',\n  'heartland-ca': 'heartland-2007-ca',\n  'hells-kitchen-us': 'hell-s-kitchen-2005',\n  'hentai-ouji-to-warawanai-neko': 'hentai-ouji-to-warawanai-neko-specials',\n  'hi-scoool-seha-girl': 'sega-hard-girls',\n  'highschool-dxd-born': 'high-school-dxd-born',\n  'house-of-cards-2013': 'house-of-cards',\n  'how-its-made-dream-cars': 'how-it-s-made-dream-cars',\n  'how-its-made': 'how-it-s-made',\n  'hozuki-no-reitetsu': 'hoozuki-no-reitetsu',\n  'hyperdimension-neptunia-the-animation': 'choujigen-game-neptune-the-animation',\n  'imocho-another-shitty-sister-ln-adaptation': 'saikin-imouto-no-yousu-ga-chotto-okashiin-da-ga',\n  'infinite-stratos-2': 'is-infinite-stratos-2',\n  'intelligence-us': 'intelligence-2014',\n  'inu-x-boku-secret-service': 'inu-x-boku-ss',\n  'its-always-sunny-in-philadelphia': 'it-s-always-sunny-in-philadelphia',\n  'james-mays-cars-of-the-people': 'james-may-s-cars-of-the-people',\n  'jericho-2016': 'jericho-1969',\n  'k-return-of-kings': 'k-2015',\n  'k': 'k-project',\n  'kaasan-mom-s-life': 'mainichi-kaasan',\n  'kabaneri-of-the-iron-fortress': 'koutetsujou-no-kabaneri',\n  'kaiji-s2-against-all-rules': 'gyakkyou-burai-kaiji-hakairoku-hen',\n  'kaiji-ultimate-survivor': 'gyakkyou-burai-kaiji-ultimate-survivor',\n  'kamisama-kiss-2': 'kamisama-hajimemashita-2',\n  'kamisama-kiss': 'kamisama-hajimemashita-kiss',\n  'kamisama-no-memo-chou': 'kamisama-no-memochou',\n  'kateikyoushi-hitman-reborn': 'katekyo-hitman-reborn',\n  'kindaichi-case-files-r': 'kindaichi-shounen-no-jikenbo-returns',\n  'kitchen-nightmares-us': 'kitchen-nightmares',\n  'kuroko-s-basketball': 'kuroko-no-basket',\n  'kuroshitsuji-book-of-circus': 'black-butler-book-of-circus',\n  'kyoukaisenjou-no-horizon': 'horizon-in-the-middle-of-nowhere',\n  'la-corda-d-oro-blue-sky': 'kiniro-no-corda-blue-sky',\n  'la-storia-della-arcana-famiglia': 'arcana-famiglia',\n  'lance-n--masques': 'lance-n-masques',\n  'last-man-standing-us': 'last-man-standing-2011',\n  'law-and-order-svu': 'law-order-special-victims-unit',\n  'litchi-hikari-club': 'litchi-de-hikari-club',\n  'little-witch-academia-the-enchanted-parade': 'little-witch-academia-2',\n  'locodol': 'futsuu-no-joshikousei-ga-locodol-yatte-mita',\n  'love-live-the-school-idol-movie': 'love-live-school-idol-project-movie',\n  'luck-&-logic': 'luck-logic',\n  'lupin-iii-(2015)': 'lupin-iii',\n  'magi': 'magi-the-labyrinth-of-magic',\n  'magic-kaito-1412': 'magic-kaito-tv',\n  'magical-girl-lyrical-nanoha-the-movie-2nd': 'mahou-shoujo-lyrical-nanoha-the-movie-2nd-a-s',\n  'mahouka': 'mahouka-koukou-no-rettousei',\n  'majestic-prince': 'ginga-kikoutai-majestic-prince',\n  'majikoi~oh-samurai-girls': 'maji-de-watashi-ni-koi-shinasai',\n  'mangaka-san-to-assistant-san-to': 'mangaka-san-to-assistant-san-to-the-animation',\n  'maoyuu-maou-yuusha': 'maoyu',\n  'maria-the-virgin-witch': 'junketsu-no-maria',\n  'marvels-agent-carter': 'marvel-s-agent-carter',\n  'marvels-agents-of-s-h-i-e-l-d': 'marvel-s-agents-of-s-h-i-e-l-d',\n  'marvels-daredevil': 'marvel-s-daredevil',\n  'marvels-jessica-jones': 'marvel-s-jessica-jones',\n  'mekakucity-actors': 'mekaku-city-actors',\n  'mike-and-molly': 'mike-molly',\n  'mondaijitachi-ga-isekai-kara-kuru-sou-desu-yo': 'problem-children-are-coming-from-another-world-aren-t-they',\n  'moretsu-pirates': 'bodacious-space-pirates',\n  'moritasan-wa-mukuchi': 'morita-san-wa-mukuchi',\n  'mushibugyo': 'mushibugyou',\n  'mushishi-tokubetsu-hen-hihamukage': 'mushishi-special-hihamukage',\n  'my-sister-came-onee-chan-ga-kita': 'onee-chan-ga-kita',\n  'naruto-sd-rock-lee-no-seishun-full-power-ninden': 'rock-lee-no-seishun-full-power-ninden',\n  'naruto-shippuuden': 'naruto-shippuden',\n  'ninja-slayer': 'ninja-slayer-from-animation',\n  'no-rin': 'nourin',\n  'no.-6': 'no-6',\n  'non-non-biyori-repeat': 'non-non-biyori-2',\n  'noukome': 'noucome-my-mental-choices-are-completely-interfering-with-my-school-romantic-comedy',\n  'okusama-ga-seitokaichou': 'okusama-ga-seitokaichou-okusama-gekijou',\n  'one-piece-3d2y': 'one-piece-3d2y-special',\n  'one-week-friends': 'isshuukan-friends',\n  'ore-twintail-ni-narimasu': 'ore-twintails-ni-narimasu',\n  'parasyte-the-maxim': 'kiseijuu',\n  'perception': 'perception-2012',\n  'phi-brain': 'phi-brain-kami-no-puzzle',\n  'photo-kano': 'photokano',\n  'planetarian': 'planetarian-chiisana-hoshi-no-yume',\n  'polar-bear-cafe': 'polar-bear-s-cafe',\n  'power-2014': 'power',\n  'poyopoyo': 'poyopoyo-kansatsu-nikki',\n  'prey-uk': 'prey-2014',\n  'proof-us': 'proof',\n  'puzzle-and-dragons-cross': 'puzzle-dragons-x',\n  'reckless': 'reckless-2014',\n  'resurrection-us': 'resurrection-2014',\n  'revolution-2012': 'revolution',\n  'ro-kyu-bu-fast-break': 'ro-kyu-bu',\n  'robotics;notes': 'robotics-notes',\n  'rowdy-sumo-wrestler-matsutaro': 'abarenbou-kishi-matsutarou',\n  'rozen-maiden-(2013)': 'rozen-maiden-zuruckspulen',\n  'rush-us': 'rush-2014',\n  'ryuugajou-nanana-no-maizoukin': 'ryuugajou-nanana-no-maizoukin-tv',\n  'saekano': 'saenai-heroine-no-sodate-kata',\n  'sailor-moon-crystal': 'bishoujo-senshi-sailor-moon-crystal',\n  'saint-seiya-the-lost-canvas': 'saint-seiya-the-lost-canvas-meiou-shinwa',\n  'sakamichi-no-apollon': 'kids-on-the-slope',\n  'saki-episode-of-side-a': 'saki-achiga-hen-episode-of-side-a',\n  'saki-the-nationals': 'saki-zenkoku-hen',\n  'sanctuary-us': 'sanctuary',\n  'satisfaction-us': 'satisfaction-2014',\n  'scandal-us': 'scandal',\n  'schitts-creek': 'schitt-s-creek',\n  'second-chance': 'second-chance-2016',\n  'seisen-cerberus': 'seisen-cerberus-ryuukoku-no-fatalites',\n  'seitokai-no-ichizon-lv.2': 'seitokai-no-ichizon-lv-2',\n  'sengoku-musou-sanada-no-shou': 'sengoku-musou-sp-sanada-no-shou',\n  'senki-zesshou-symphogear-g': 'senki-zesshou-symphogear-g-in-the-distance-that-day-when-the-star-became-music',\n  'senki-zesshou-symphogear-gx': 'senki-zesshou-symphogear-3',\n  'senki-zesshou-symphogear': 'senki-zesshou-symphogear-meteoroid-falling-burning-and-disappear-then',\n  'seraph-of-the-end': 'owari-no-seraph',\n  'she-and-her-cat-everything-flows': 'kanojo-to-kanojo-no-neko-everything-flows',\n  'she-and-her-cat': 'kanojo-to-kanojo-no-neko',\n  'shimoneta': 'shimoneta-to-iu-gainen-ga-sonzai-shinai-taikutsu-na-sekai',\n  'shin-atashinchi': 'shin-atashin-chi',\n  'shin-sekai-yori': 'shinsekai-yori',\n  'shin-strange-': 'shin-strange',\n  'shingeki-no-kyojin': 'attack-on-titan',\n  'shokugeki-no-soma': 'shokugeki-no-souma',\n  'shomin-sample': 'ore-ga-ojou-sama-gakkou-ni-shomin-sample-toshite-rachirareta-ken',\n  'shounen-hollywood': 'shounen-hollywood-holly-stage-for-49',\n  'so-i-can-t-play-h': 'dakara-boku-wa-h-ga-dekinai',\n  'soniani-super-sonico-the-animation': 'super-sonico-the-animation',\n  'space-brothers': 'uchuu-kyoudai',\n  'space-dandy-2': 'space-dandy-2nd-season',\n  'space-patrol-luluco': 'uchuu-patrol-luluco',\n  'stan-lees-lucky-man': 'stan-lee-s-lucky-man',\n  'steins;gate': 'steins-gate',\n  'stella-jogakuin-koutouka-c3-bu': 'stella-jogakuin-koutou-ka-c-bu',\n  'straight-title-robot-anime': 'chokkyuu-hyoudai-robot-anime-straight-title',\n  'strange-': 'strange',\n  'suisei-no-gargantia': 'gargantia-on-the-verdurous-planet',\n  'sukitte-ii-na-yo.': 'sukitte-ii-na-yo',\n  'survivors-remorse': 'survivor-s-remorse',\n  'teekyu': 'teekyuu',\n  'teen-wolf': 'teen-wolf-2011',\n  'the-bridge-us': 'the-bridge-2013',\n  'the-comedians-us': 'the-comedians-2015',\n  'the-disappearance-of-nagato-yuki-chan': 'nagato-yuki-chan-no-shoushitsu',\n  'the-idolm@ster-cinderella-girls': 'the-idolm-ster-cinderella-girls',\n  'the-idolm@ster': 'the-idolm-ster',\n  'the-kennedys-uk': 'the-kennedys-2015',\n  'the-knight-in-the-area': 'area-no-kishi',\n  'the-league': 'the-league-2009',\n  'the-librarians-us': 'the-librarians-2014',\n  'the-magicians-us': 'the-magicians',\n  'the-new-prince-of-tennis-ova-vs-genius10': 'new-prince-of-tennis-ova-vs-genius10',\n  'the-new-prince-of-tennis-specials': 'new-prince-of-tennis-specials',\n  'the-new-prince-of-tennis': 'new-prince-of-tennis',\n  'the-pilot-s-love-song': 'toaru-hikuushi-e-no-koiuta',\n  'the-world-god-only-knows-goddesses-arc': 'the-world-god-only-knows-goddess-arc',\n  'this-is-england-90': 'this-is-england-90-2015',\n  'time-travel-shoujo': 'time-travel-shoujo-mari-waka-to-8-nin-no-kagakusha-tachi',\n  'tokyo-ghoul-root-a': 'tokyo-ghoul-2',\n  'tonari-no-kaibutsu-kun': 'my-little-monster',\n  'tsukiuta.-the-animation': 'tsukiuta-the-animation',\n  'twin-angel-twinkle-paradise': 'kaitou-tenshi-twin-angel-kyun-kyun-tokimeki-paradise',\n  'unlimited-fafnir': 'juuou-mujin-no-fafnir',\n  'usagi-drop': 'bunny-drop',\n  'uta-no-prince-sama-2': 'uta-no-prince-sama-maji-love-2000',\n  'uta-no-prince-sama-revolutions': 'uta-no-prince-sama-maji-love-3',\n  'uta-no-prince-sama': 'uta-no-prince-sama-maji-love-1000',\n  'utakoi': 'chouyaku-hyakuninisshu-uta-koi',\n  'valvrave-the-liberator': 'kakumeiki-valvrave',\n  'wake-up-girls-seven-idols': 'wake-up-girls-shichinin-no-idol',\n  'wake-up-girls-zoo': 'wake-up-girl-zoo',\n  'watamote': 'watashi-ga-motenai-no-wa-dou-kangaetemo-omaera-ga-warui',\n  'whose-line-is-it-anyway-us': 'whose-line-is-it-anyway-1998',\n  'wooser-no-sono-higurashi-mugen-hen': 'wooser-no-sono-higurashi',\n  \"working'\": 'working-2',\n  'working': 'working-1',\n  'yahari-ore-no-seishun-love-come-wa-machigatteiru-zoku': 'yahari-ore-no-seishun-love-comedy-wa-machigatteiru-zoku',\n  'yahari-ore-no-seishun-love-come-wa-machigatteiru': 'yahari-ore-no-seishun-love-comedy-wa-machigatteiru-ova',\n  'yama-no-susume-2': 'yama-no-susume-second-season-ova',\n  'yamada-kun-and-the-seven-witches': 'yamada-kun-to-7-nin-no-majo',\n  'yami-shibai-japanese-ghost-stories-2': 'yami-shibai-2nd-season',\n  'yami-shibai-japanese-ghost-stories-3': 'yami-shibai-3rd-season',\n  'yami-shibai-japanese-ghost-stories': 'yami-shibai',\n  'young-and-hungry': 'young-hungry',\n  'youre-the-worst-2014': 'you-re-the-worst',\n  'youre-the-worst': 'you-re-the-worst',\n  'yuki-yuna-wa-yusha-de-aru': 'yuuki-yuuna-wa-yuusha-de-aru',\n  'yurumate3dei': 'yurumates-3d',\n  'yuruyuri': 'yuru-yuri',\n  'yuushibu': 'yuusha-ni-narenakatta-ore-wa-shibushibu-shuushoku-wo-ketsui-shimashita',\n  'zero-no-tsukaima-final': 'zero-no-tsukaima-f',\n  'zx-ignition': 'z-x-ignition'\n}\n\n/**\n * Export the movie map.\n * @type {Object}\n */\nexport default showMap\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/src/scraper/providers/maps/showMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "variable",
    "name": "showMap",
    "memberof": "src/scraper/providers/maps/showMap.js",
    "static": true,
    "longname": "src/scraper/providers/maps/showMap.js~showMap",
    "access": "public",
    "export": true,
    "importPath": "popcorn-api/src/scraper/providers/maps/showMap.js",
    "importStyle": "showMap",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"60-minutes-us\": string, \"91-days\": string, \"ace-attorney\": string, \"ace-of-diamond\": string, \"active-raid\": string, \"ai-mai-mi-mousou-catastrophie\": string, \"akagami-no-shirayukihime\": string, \"akb0048\": string, \"alderamin-on-the-sky\": string, \"american-crime\": string, \"ani-tore-ex\": string, \"argevollen\": string, \"arpeggio-of-blue-steel-ars-nova\": string, \"arslan-senki\": string, \"assassination-classroom\": string, \"b-project\": string, \"bachelor-live\": string, \"ballers-2015\": string, \"battle-girls-time-paradox\": string, \"big-brother-us\": string, \"blackish\": string, \"blazbluealter-memory\": string, \"bobs-burgers\": string, \"bonjour-sweet-love-patisserie\": string, \"bordertown-2015\": string, \"bottom-biting-bug\": string, \"brotherhoodfinal-fantasy-xv\": string, \"brynhildr-in-the-darkness\": string, \"cardfight-vanguard-g-girs-crisis\": string, \"celebrity-big-brother\": string, \"chaos-dragon\": string, \"chicago-pd\": string, \"childrens-hospital-us\": string, \"concrete-revolutio\": string, \"cooper-barretts-guide-to-surviving-life\": string, \"cosmos-a-space-time-odyssey\": string, \"croisee-in-a-foreign-labyrinth\": string, \"cross-ange\": string, \"d.gray-man-hallow\": string, \"daimidaler\": string, \"danganronpa-3-future-arc\": string, \"danganronpa-the-animation\": string, \"danmachi\": string, \"dcs-legends-of-tomorrow\": string, \"dd-hokuto-no-ken-2-ichigo-aji-\": string, \"diabolik-lovers-more-blood\": string, \"digimon-adventure-tri\": string, \"doll-and-em\": string, \"dusk-maiden-of-amnesia\": string, \"ebiten\": string, \"engaged-to-the-unidentified\": string, \"fuse-memoirs-of-the-hunter-girl\": string, \"garo-the-animation\": string, \"garo-the-crimson-moon\": string, \"garothe-crimson-moon\": string, \"gate\": string, \"gen-ei-o-kakeru-taiyou-il-sole-penetra-le-illusioni\": string, \"ghost-in-the-shell-arise-alternative-architecture\": string, \"girl-friend-beta\": string, \"gold-rush\": string, \"greys-anatomy\": string, \"gundam-reconguista-in-g\": string, \"gundam-unicorn\": string, \"hackadoll-the-animation\": string, \"hakkenden-eight-dogs-of-the-east\": string, \"hakuoki-reimeiroku\": string, \"hamatora\": string, \"haruchika\": string, \"hawaii-five-0-2010\": string, \"hayate-no-gotoku-cuties\": string, \"heartland-ca\": string, \"hells-kitchen-us\": string, \"hentai-ouji-to-warawanai-neko\": string, \"hi-scoool-seha-girl\": string, \"highschool-dxd-born\": string, \"house-of-cards-2013\": string, \"how-its-made-dream-cars\": string, \"how-its-made\": string, \"hozuki-no-reitetsu\": string, \"hyperdimension-neptunia-the-animation\": string, \"imocho-another-shitty-sister-ln-adaptation\": string, \"infinite-stratos-2\": string, \"intelligence-us\": string, \"inu-x-boku-secret-service\": string, \"its-always-sunny-in-philadelphia\": string, \"james-mays-cars-of-the-people\": string, \"jericho-2016\": string, \"k-return-of-kings\": string, \"k\": string, \"kaasan-mom-s-life\": string, \"kabaneri-of-the-iron-fortress\": string, \"kaiji-s2-against-all-rules\": string, \"kaiji-ultimate-survivor\": string, \"kamisama-kiss-2\": string, \"kamisama-kiss\": string, \"kamisama-no-memo-chou\": string, \"kateikyoushi-hitman-reborn\": string, \"kindaichi-case-files-r\": string, \"kitchen-nightmares-us\": string, \"kuroko-s-basketball\": string, \"kuroshitsuji-book-of-circus\": string, \"kyoukaisenjou-no-horizon\": string, \"la-corda-d-oro-blue-sky\": string, \"la-storia-della-arcana-famiglia\": string, \"lance-n--masques\": string, \"last-man-standing-us\": string, \"law-and-order-svu\": string, \"litchi-hikari-club\": string, \"little-witch-academia-the-enchanted-parade\": string, \"locodol\": string, \"love-live-the-school-idol-movie\": string, \"luck-&-logic\": string, \"lupin-iii-(2015)\": string, \"magi\": string, \"magic-kaito-1412\": string, \"magical-girl-lyrical-nanoha-the-movie-2nd\": string, \"mahouka\": string, \"majestic-prince\": string, \"majikoi~oh-samurai-girls\": string, \"mangaka-san-to-assistant-san-to\": string, \"maoyuu-maou-yuusha\": string, \"maria-the-virgin-witch\": string, \"marvels-agent-carter\": string, \"marvels-agents-of-s-h-i-e-l-d\": string, \"marvels-daredevil\": string, \"marvels-jessica-jones\": string, \"mekakucity-actors\": string, \"mike-and-molly\": string, \"mondaijitachi-ga-isekai-kara-kuru-sou-desu-yo\": string, \"moretsu-pirates\": string, \"moritasan-wa-mukuchi\": string, \"mushibugyo\": string, \"mushishi-tokubetsu-hen-hihamukage\": string, \"my-sister-came-onee-chan-ga-kita\": string, \"naruto-sd-rock-lee-no-seishun-full-power-ninden\": string, \"naruto-shippuuden\": string, \"ninja-slayer\": string, \"no-rin\": string, \"no.-6\": string, \"non-non-biyori-repeat\": string, \"noukome\": string, \"okusama-ga-seitokaichou\": string, \"one-piece-3d2y\": string, \"one-week-friends\": string, \"ore-twintail-ni-narimasu\": string, \"parasyte-the-maxim\": string, \"perception\": string, \"phi-brain\": string, \"photo-kano\": string, \"planetarian\": string, \"polar-bear-cafe\": string, \"power-2014\": string, \"poyopoyo\": string, \"prey-uk\": string, \"proof-us\": string, \"puzzle-and-dragons-cross\": string, \"reckless\": string, \"resurrection-us\": string, \"revolution-2012\": string, \"ro-kyu-bu-fast-break\": string, \"robotics;notes\": string, \"rowdy-sumo-wrestler-matsutaro\": string, \"rozen-maiden-(2013)\": string, \"rush-us\": string, \"ryuugajou-nanana-no-maizoukin\": string, \"saekano\": string, \"sailor-moon-crystal\": string, \"saint-seiya-the-lost-canvas\": string, \"sakamichi-no-apollon\": string, \"saki-episode-of-side-a\": string, \"saki-the-nationals\": string, \"sanctuary-us\": string, \"satisfaction-us\": string, \"scandal-us\": string, \"schitts-creek\": string, \"second-chance\": string, \"seisen-cerberus\": string, \"seitokai-no-ichizon-lv.2\": string, \"sengoku-musou-sanada-no-shou\": string, \"senki-zesshou-symphogear-g\": string, \"senki-zesshou-symphogear-gx\": string, \"senki-zesshou-symphogear\": string, \"seraph-of-the-end\": string, \"she-and-her-cat-everything-flows\": string, \"she-and-her-cat\": string, \"shimoneta\": string, \"shin-atashinchi\": string, \"shin-sekai-yori\": string, \"shin-strange-\": string, \"shingeki-no-kyojin\": string, \"shokugeki-no-soma\": string, \"shomin-sample\": string, \"shounen-hollywood\": string, \"so-i-can-t-play-h\": string, \"soniani-super-sonico-the-animation\": string, \"space-brothers\": string, \"space-dandy-2\": string, \"space-patrol-luluco\": string, \"stan-lees-lucky-man\": string, \"steins;gate\": string, \"stella-jogakuin-koutouka-c3-bu\": string, \"straight-title-robot-anime\": string, \"strange-\": string, \"suisei-no-gargantia\": string, \"sukitte-ii-na-yo.\": string, \"survivors-remorse\": string, \"teekyu\": string, \"teen-wolf\": string, \"the-bridge-us\": string, \"the-comedians-us\": string, \"the-disappearance-of-nagato-yuki-chan\": string, \"the-idolm@ster-cinderella-girls\": string, \"the-idolm@ster\": string, \"the-kennedys-uk\": string, \"the-knight-in-the-area\": string, \"the-league\": string, \"the-librarians-us\": string, \"the-magicians-us\": string, \"the-new-prince-of-tennis-ova-vs-genius10\": string, \"the-new-prince-of-tennis-specials\": string, \"the-new-prince-of-tennis\": string, \"the-pilot-s-love-song\": string, \"the-world-god-only-knows-goddesses-arc\": string, \"this-is-england-90\": string, \"time-travel-shoujo\": string, \"tokyo-ghoul-root-a\": string, \"tonari-no-kaibutsu-kun\": string, \"tsukiuta.-the-animation\": string, \"twin-angel-twinkle-paradise\": string, \"unlimited-fafnir\": string, \"usagi-drop\": string, \"uta-no-prince-sama-2\": string, \"uta-no-prince-sama-revolutions\": string, \"uta-no-prince-sama\": string, \"utakoi\": string, \"valvrave-the-liberator\": string, \"wake-up-girls-seven-idols\": string, \"wake-up-girls-zoo\": string, \"watamote\": string, \"whose-line-is-it-anyway-us\": string, \"wooser-no-sono-higurashi-mugen-hen\": string, \"working'\": string, \"working\": string, \"yahari-ore-no-seishun-love-come-wa-machigatteiru-zoku\": string, \"yahari-ore-no-seishun-love-come-wa-machigatteiru\": string, \"yama-no-susume-2\": string, \"yamada-kun-and-the-seven-witches\": string, \"yami-shibai-japanese-ghost-stories-2\": string, \"yami-shibai-japanese-ghost-stories-3\": string, \"yami-shibai-japanese-ghost-stories\": string, \"young-and-hungry\": string, \"youre-the-worst-2014\": string, \"youre-the-worst\": string, \"yuki-yuna-wa-yusha-de-aru\": string, \"yurumate3dei\": string, \"yuruyuri\": string, \"yuushibu\": string, \"zero-no-tsukaima-final\": string, \"zx-ignition\": string}"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# popcorn-api\n\n[![Build Status](https://travis-ci.org/popcorn-official/popcorn-api.svg?branch=development)](https://travis-ci.org/popcorn-official/popcorn-api)\n[![Windows Build](https://img.shields.io/appveyor/ci/chrisalderson/popcorn-api/3.0.0.svg?label=windows)](https://ci.appveyor.com/project/ChrisAlderson/popcorn-api)\n[![Coverage Status](https://coveralls.io/repos/github/popcorn-official/popcorn-api/badge.svg?branch=3.0.0)](https://coveralls.io/github/popcorn-official/popcorn-api?branch=3.0.0)\n[![Dependency Status](https://david-dm.org/popcorn-official/popcorn-api.svg)](https://david-dm.org/popcorn-official/popcorn-api)\n[![devDependency Status](https://david-dm.org/popcorn-official/popcorn-api/dev-status.svg)](https://david-dm.org/popcorn-official/popcorn-api?type=dev)\n[![document](https://popcorn-official.github.io/popcorn-api/badge.svg)](https://popcorn-official.github.io/popcorn-api/source.html)\n\nPopcorn API is developed to make it easier for anyone to create their own\nversion of [Popcorn Time](http://popcorntime.sh). It contains:\n\n- Metadata about movies (taken from Trakt).\n- Metadata about TV shows and individual episodes (taken from Trakt).\n- Multiple quality magnet links for every episode.\n- Ability to easily filter content to the user's content.\n- Add content manually through the CLI.\n\n## Installation\n\nTo setup your local machine to start working on the project you can follow\nthese steps:\n\n1. Install [MongoDB](https://www.mongodb.com/) including `mongoexport` and `mongoimport`\n2. Install [NodeJS](https://nodejs.org/) (at least Node v7.10.1 or greater)\n3. Clone the repository with: `git clone https://github.com/popcorn-official/popcorn-api.git`\n4. Install dependencies `npm i`\n5. Install the flow-typed libraries with `npm run flow-typed`\n\n## Documentation\n\n - [General documentation](https://popcorn-official.github.io/popcorn-api/manual/index.html)\n - [Route Api docs](http://docs.popcornofficial.apiary.io/).\n - [Api docs](https://popcorn-official.github.io/popcorn-api/identifiers.html)\n - TODO: Add more documentation links.\n\n## License\n\nMIT License\n",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"popcorn-api\",\n  \"version\": \"3.4.4\",\n  \"description\": \"Popcorn Time API is developed to make it easier for anyone to create their own version of Popcorn Time.\",\n  \"dependencies\": {\n    \"bytes\": \"^3.0.0\",\n    \"dotenv\": \"^4.0.0\",\n    \"eztv-api-pt\": \"^1.3.1\",\n    \"fanart.tv-api\": \"^2.0.1\",\n    \"horriblesubs-api\": \"^1.0.8\",\n    \"inquirer\": \"^4.0.1\",\n    \"kat-api-pt\": \"^3.0.0\",\n    \"mongoose\": \"^5.0.0-rc0\",\n    \"node-tvdb\": \"^3.2.0\",\n    \"nyaa-api-pt\": \"^2.0.0\",\n    \"omdb-api-pt\": \"^2.0.1\",\n    \"p-map\": \"^1.2.0\",\n    \"p-times\": \"^1.0.1\",\n    \"parse-torrent\": \"^5.8.3\",\n    \"pop-api\": \"^0.6.2\",\n    \"pop-api-scraper\": \"^0.1.2\",\n    \"tmdbapi\": \"^1.0.2\",\n    \"trakt.tv\": \"^6.0.2\",\n    \"webtorrent-health\": \"^1.1.1\",\n    \"yts-api-pt\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-plugin-external-helpers\": \"^6.22.0\",\n    \"babel-plugin-istanbul\": \"^4.1.5\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"babel-plugin-transform-export-extensions\": \"^6.22.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-plugin-transform-strict-mode\": \"^6.24.1\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-preset-flow\": \"^6.23.0\",\n    \"babel-register\": \"^6.26.0\",\n    \"chai\": \"^4.1.2\",\n    \"coveralls\": \"^3.0.0\",\n    \"cross-env\": \"^5.1.3\",\n    \"del\": \"^3.0.0\",\n    \"dredd\": \"^4.9.2\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"1.0.0\",\n    \"esdoc-flow-type-plugin\": \"1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.14.0\",\n    \"eslint-config-vixo\": \"^2.0.2\",\n    \"express\": \"^4.16.2\",\n    \"flow\": \"^0.2.3\",\n    \"flow-bin\": \"^0.62.0\",\n    \"flow-typed\": \"^2.2.3\",\n    \"forever\": \"^0.15.3\",\n    \"husky\": \"^0.14.3\",\n    \"mkdirp\": \"^0.5.1\",\n    \"mocha\": \"^4.1.0\",\n    \"nyc\": \"^11.4.1\",\n    \"rollup\": \"^0.53.2\",\n    \"rollup-plugin-babel\": \"^3.0.3\",\n    \"rollup-plugin-commonjs\": \"^8.2.6\",\n    \"rollup-plugin-json\": \"^2.3.0\",\n    \"rollup-plugin-node-resolve\": \"^3.0.0\",\n    \"rollup-plugin-uglify\": \"^2.0.1\",\n    \"sinon\": \"^4.1.3\",\n    \"standard-version\": \"^4.2.0\",\n    \"supertest\": \"^3.0.0\",\n    \"uglify-es\": \"^3.3.4\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"cross-env NODE_ENV=production rollup -c\",\n    \"coveralls\": \"cat ./coverage/lcov.info | coveralls\",\n    \"debug\": \"npm run dev --inspect-brk\",\n    \"dev\": \"cross-env NODE_ENV=development node --require babel-register ./src/index.js\",\n    \"docs\": \"esdoc -c .esdoc.json\",\n    \"flow\": \"flow\",\n    \"flow-typed\": \"flow-typed install\",\n    \"forever\": \"cross-env NODE_ENV=production forever start ./build/popcorn-api.js\",\n    \"lint\": \"eslint {src,test}/** ./*.js\",\n    \"release\": \"git add ./docs/* && standard-version -a\",\n    \"precommit\": \"npm run lint && npm run flow\",\n    \"prerelease\": \"npm run build && npm run docs\",\n    \"prepush\": \"npm run test\",\n    \"pretest\": \"npm run build\",\n    \"providers\": \"babel-node ./src/index.js --providers\",\n    \"start\": \"cross-env NODE_ENV=production node ./build/popcorn-api.js\",\n    \"test\": \"npm run test-dredd && npm run test-mocha\",\n    \"test-dredd\": \"cross-env NODE_ENV=test babel-node ./node_modules/dredd/bin/dredd\",\n    \"test-mocha\": \"cross-env NODE_ENV=test nyc -r=lcov -r=text mocha --exit --recursive --timeout 10000\"\n  },\n  \"bin\": {\n    \"popcorn-api\": \"./build/popcorn-api.js\"\n  },\n  \"engines\": {\n    \"node\": \">=7.10.1\"\n  },\n  \"main\": \"./build/popcorn-api.js\",\n  \"module\": \"./build/popcorn-api.esm.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/popcorn-official/popcorn-api.git\"\n  },\n  \"files\": [\n    \"./build/**\"\n  ]\n}\n",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": "# popcorn-api\n\n[![Build Status](https://travis-ci.org/popcorn-official/popcorn-api.svg?branch=development)](https://travis-ci.org/popcorn-official/popcorn-api)\n[![Windows Build](https://img.shields.io/appveyor/ci/chrisalderson/popcorn-api/3.0.0.svg?label=windows)](https://ci.appveyor.com/project/ChrisAlderson/popcorn-api)\n[![Coverage Status](https://coveralls.io/repos/github/popcorn-official/popcorn-api/badge.svg?branch=3.0.0)](https://coveralls.io/github/popcorn-official/popcorn-api?branch=3.0.0)\n[![Dependency Status](https://david-dm.org/popcorn-official/popcorn-api.svg)](https://david-dm.org/popcorn-official/popcorn-api)\n[![devDependency Status](https://david-dm.org/popcorn-official/popcorn-api/dev-status.svg)](https://david-dm.org/popcorn-official/popcorn-api?type=dev)\n[![document](https://popcorn-official.github.io/popcorn-api/badge.svg)](https://popcorn-official.github.io/popcorn-api/source.html)\n\nPopcorn API is developed to make it easier for anyone to create their own\nversion of [Popcorn Time](http://popcorntime.sh). It contains:\n\n- Metadata about movies (taken from Trakt).\n- Metadata about TV shows and individual episodes (taken from Trakt).\n- Multiple quality magnet links for every episode.\n- Ability to easily filter content to the user's content.\n- Add content manually through the CLI.\n\n## Installation\n\nTo setup your local machine to start working on the project you can follow\nthese steps:\n\n1. Install [MongoDB](https://www.mongodb.com/) including `mongoexport` and `mongoimport`\n2. Install [NodeJS](https://nodejs.org/) (at least Node v7.10.1 or greater)\n3. Clone the repository with: `git clone https://github.com/popcorn-official/popcorn-api.git`\n4. Install dependencies `npm i`\n5. Install the flow-typed libraries with `npm run flow-typed`\n\n## Documentation\n\n - [General documentation](https://popcorn-official.github.io/popcorn-api/manual/index.html)\n - [Route Api docs](http://docs.popcornofficial.apiary.io/).\n - [Api docs](https://popcorn-official.github.io/popcorn-api/identifiers.html)\n - TODO: Add more documentation links.\n\n## License\n\nMIT License\n",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# Overview\n\n[![Build Status](https://travis-ci.org/popcorn-official/popcorn-api.svg?branch=development)](https://travis-ci.org/popcorn-official/popcorn-api)\n[![Coverage Status](https://coveralls.io/repos/github/popcorn-official/popcorn-api/badge.svg?branch=3.0.0)](https://coveralls.io/github/popcorn-official/popcorn-api?branch=3.0.0)\n[![Dependency Status](https://david-dm.org/popcorn-official/popcorn-api.svg)](https://david-dm.org/popcorn-official/popcorn-api)\n[![devDependency Status](https://david-dm.org/popcorn-official/popcorn-api/dev-status.svg)](https://david-dm.org/popcorn-official/popcorn-api?type=dev)\n[![document](https://popcorn-official.github.io/popcorn-api/badge.svg)](https://popcorn-official.github.io/popcorn-api/source.html)\n\nPopcorn API is developed to make it easier for anyone to create their own version of [Popcorn Time](http://popcorntime.sh). It contains:\n\n- Metadata about movies (taken from Trakt).\n- Metadata about TV shows and individual episodes (taken from Trakt).\n- Metadata about anime shows (taken from Hummingbird).\n- Multiple quality magnet links for every episode.\n- Ability to easily filter content to the user's content.\n- Add content manually through the CLI.\n\n# Documentation\n\nDocumentation for the code can be generated with the command `npm run docs`. This will automatically generate the documentation which will be located in the `docs` directory. The `index.html` page will be the starting point. You can also view the documentation online right [here](https://popcorn-official.github.io/popcorn-api/manual/index.html). Or checkout the documentation for the API routes [here](http://docs.popcornofficial.apiary.io/).\n\n# Folder structure\n\nThe API has the following folder structure.\n\n```\n.\n├── docs                          # Folder with the ESDoc generated documentation for the API.\n├── manual                        # Folder with markdown files used by the documentation.\n└── src                           # Holding the ES6 source code\n    ├── config                    # Configuration\n    ├── controllers               # REST Controllers\n    ├── models                    # Models\n    ├── providers                 # Providers\n        ├── anime                 # Anime providers\n        ├── extractors            # Torrent extractors\n        ├── helpers               # Helpers to insert data\n        ├── movies                # Movie providers\n        └── shows                 # Show providers\n    ├── cli.js                    # CLI part of the API\n    ├── index.js                  # Starting point of the API\n    ├── popcorn-api.js            # Entry for the command line\n    ├── scraper.js                # Scrape for content\n    └── util.js                   # Useful utilities\n```\n\n# Versioning\n\nFor transparency and insight into our release cycle, and for striving to maintain backward compatibility, this project will be maintained according to the [Semantic Versioning](http://semver.org/) guidelines as much as possible.\n\nReleases will be numbered with the following format: `<major>.<minor>.<patch>-<build>`\n\nConstructed with the following guidelines:\n\n- A new _major_ release indicates a large change where backwards compatibility is broken.\n- A new _minor_ release indicates a normal change that maintains backwards compatibility.\n- A new _patch_ release indicates a bugfix or small change which does not affect compatibility.\n- A new _build_ release indicates this is a pre-release of the version.\n\n# License\n\nMIT License\n\nCopyright (c) 2016 - Popcorn API - Released under the [MIT license](LICENSE.txt).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n--------------------------------------------------------------------------------\n\n**This project and the distribution of this project is not illegal, nor does it violate _any_ DMCA laws. The use of this project, however, may be illegal in your area. Check your local laws and regulations regarding the use of torrents to watch potentially copyrighted content. The maintainers of this project do not condone the use of this project for anything illegal, in any state, region, country, or planet. _Please use at your own risk_.**\n\n--------------------------------------------------------------------------------\n\nCopyright (c) 2016 - Popcorn API - Released under the [MIT license](LICENSE.txt).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/manual/installation.md",
    "name": "./manual/installation.md",
    "content": "# Installation\n\n1. Install MongoDB including `mongoexport` and `mongoimport`.\n2. Install NodeJS (at least Node v6.3.0 or greater).\n3. Clone the repository with: `git clone https://github.com/popcorn-official/popcorn-api.git`.\n4. Install `gulp` globally with `[sudo] npm install -g gulp`.\n5. Install dependencies of Popcorn API with `cd popcorn-api` and `npm install`.\n6. Install the flow-typed modules with `npm run flow-typed install`.\n7. Build the ES5 code with `gulp build`.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/manual/usage.md",
    "name": "./manual/usage.md",
    "content": "# Usage\n\nIn this usage section you can read about Popcorn API and its functionality through the CLI.\n\n## npm\nThe following commands are defined in the `package.json`:\n\n```\n $ npm run start                        # Run Popcorn API and start the scraping process.\n $ npm run start-dev                    # Same as above, but in development mode.\n $ npm run server                       # Run Popcorn API, but do not start the scraping process.\n $ npm run server-dev                   # Same as above, but in development mode.\n $ npm run forever                      # Run Popcorn API with the 'forever' module.\n $ npm run docs                         # Generate the documentation of the API.\n $ npm run test                         # Execute the tests.\n $ npm run coverage                     # Generate coverage with Coveralls.\n $ npm run lint                         # Lint 'src' code with eslint.\n```\n\n## Gulp\nThe following commands are defined by Gulp:\n\n```\n $ gulp build                           # Transpile the ES6 source code to ES5.\n $ gulp clean                           # Delete the 'build' directory.\n $ gulp default                         # The default gulp task (same as 'gulp build').\n $ gulp watch                           # Watch for any changes in the 'src' directory.\n ```\n\n## Global\nThe following commands are available when Popcorn API is installed globally:\n\n```\n $ popcorn-api --content <type>         # Add content to the database.\n $ popcorn-api --run                    # Run Popcorn API and start the scraping process.\n $ popcorn-api --server                 # Run Popcorn API, but do not start the scraping process.\n $ popcorn-api --export <collection>    # Export a collection to a JSON file.\n $ popcorn-api --import <collection>    # Import a collection file to the database.\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/manual/example.md",
    "name": "./manual/example.md",
    "content": "# Example\n\nIn this example section you can read about the routes that are provided by Popcorn API.\n\n## Status\n\n**GET - `http://localhost:5000/status`**\n\nGives some basic information about the server on which the API is running on.\n\n**Example output:**\n\n```javascript\n{\n  \"repo\": \"https://github.com/popcorn-official/popcorn-api.git\",\n  \"server\": \"serv01\",\n  \"status\": \"Scraping EZTV\",\n  \"totalAnimes\": 623,\n  \"totalMovies\": 5593,\n  \"totalShows\": 1482,\n  \"updated\": 1470233725,\n  \"uptime\": 9,\n  \"version\": \"2.1.0\",\n  \"commit\": \"ad78dd1\"\n}\n```\n\n## Logs\n\n**GET - `http://localhost:5000/logs/error`**\n\nDisplay the error log. Each message will be in JSON format.\n\n## Export\n\n**GET - `http://localhost:5000/exports/{collection}`**\n\nDownload the contents a collection in a JSON file. Possible collections are:\n - anime\n - movie\n - shows\n\n## Anime\n\n**GET - `http://localhost:5000/animes/{page}`**\n\nGives an array of anime shows. The array has a has a maximum length of 50 anime shows per page.\n\n**Example output:**\n```javascript\n[\n  {\n    \"_id\": \"5646\",\n    \"mal_id\": \"9253\",\n    \"title\": \"Steins;Gate\",\n    \"year\": \"2011\",\n    \"slug\": \"steins-gate\",\n    \"type\": \"show\",\n    \"genres\": [\n      \"Comedy\",\n      \"Sci-Fi\",\n      \"Mystery\",\n      \"Thriller\",\n      \"Drama\"\n    ],\n    \"images\": {\n      \"banner\": \"https://static.hummingbird.me/anime/poster_images/000/005/646/large/iJvXXwfdhJHaG.jpg?1416278953\",\n      \"fanart\": \"https://static.hummingbird.me/anime/poster_images/000/005/646/large/iJvXXwfdhJHaG.jpg?1416278953\",\n      \"poster\": \"https://static.hummingbird.me/anime/poster_images/000/005/646/large/iJvXXwfdhJHaG.jpg?1416278953\"\n    },\n    \"rating\": {\n      \"hated\": 100,\n      \"loved\": 100,\n      \"votes\": 0,\n      \"watching\": 0,\n      \"percentage\": 92\n    }\n  },\n  ...\n]\n```\n\n**GET - `http://localhost:5000/anime/{_id}`**\n\nGives information about a single anime show based on the given id.\n\n**Example output:**\n\n```javascript\n{\n  \"_id\": \"5646\",\n  \"mal_id\": \"9253\",\n  \"title\": \"Steins;Gate\",\n  \"year\": \"2011\",\n  \"slug\": \"steins-gate\",\n  \"synopsis\": \"Steins;Gate is set in the summer of 2010, approximately one year after the events that took place in Chaos;Head, in Akihabara.\\n\\nSteins;Gate is about a group of friends who have customized their microwave into a device that can send emails to the past (known as D-mails). As they perform different experiments, an organization named SERN, who has been doing their own research on time travel, tracks them down and now the characters have to find a way to avoid being captured by them.\\n\\n(Sources: VNDB, Wikipedia)\",\n  \"runtime\": \"24\",\n  \"status\": \"Finished Airing\",\n  \"type\": \"show\",\n  \"num_seasons\": 1,\n  \"last_updated\": 1469804168091,\n  \"__v\": 0,\n  \"episodes\": [\n    {\n      \"title\": \"Episode 13\",\n      \"torrents\": {\n        \"0\": {\n          \"url\": \"magnet:?xt=urn:btih:IEQGMZOUZJQ5FJJZNURKTTND3KUHBAHT&tr=http://open.nyaatorrents.info:6544/announce&tr=udp://open.demonii.com:1337/announce&tr=udp://tracker.openbittorrent.com:80/announce\",\n          \"seeds\": 0,\n          \"peers\": 0,\n          \"provider\": \"HorribleSubs\"\n        },\n        \"480p\": {\n          \"url\": \"magnet:?xt=urn:btih:IEQGMZOUZJQ5FJJZNURKTTND3KUHBAHT&tr=http://open.nyaatorrents.info:6544/announce&tr=udp://open.demonii.com:1337/announce&tr=udp://tracker.openbittorrent.com:80/announce\",\n          \"seeds\": 0,\n          \"peers\": 0,\n          \"provider\": \"HorribleSubs\"\n        },\n        \"720p\": {\n          \"url\": \"magnet:?xt=urn:btih:MCZBSUZP4YX2O4SBMBBXLFWBIQCEPOZF&tr=http://open.nyaatorrents.info:6544/announce&tr=udp://open.demonii.com:1337/announce&tr=udp://tracker.openbittorrent.com:80/announce\",\n          \"seeds\": 0,\n          \"peers\": 0,\n          \"provider\": \"HorribleSubs\"\n        }\n      },\n      \"season\": \"1\",\n      \"episode\": \"13\",\n      \"overview\": \"We still don't have single episode overviews for anime… Sorry\",\n      \"tvdb_id\": \"5646-1-13\"\n    },\n    ...\n  ],\n  \"genres\": [\n    \"Comedy\",\n    \"Sci-Fi\",\n    \"Mystery\",\n    \"Thriller\",\n    \"Drama\"\n  ],\n  \"images\": {\n    \"banner\": \"https://static.hummingbird.me/anime/poster_images/000/005/646/large/iJvXXwfdhJHaG.jpg?1416278953\",\n    \"fanart\": \"https://static.hummingbird.me/anime/poster_images/000/005/646/large/iJvXXwfdhJHaG.jpg?1416278953\",\n    \"poster\": \"https://static.hummingbird.me/anime/poster_images/000/005/646/large/iJvXXwfdhJHaG.jpg?1416278953\"\n  },\n  \"rating\": {\n    \"hated\": 100,\n    \"loved\": 100,\n    \"votes\": 0,\n    \"watching\": 0,\n    \"percentage\": 92\n  }\n}\n```\n\n**GET - `http://localhost:5000/random/anime`**\n\nGives a random anime from the database. The output will be similar to the on directly above.\n\n## Movie\n\n**GET - `http://localhost:5000/movies/{page}`**\n\nGives an array of movies. The array has a has a maximum length of 50 movies per page.\n\n**Example output:**\n\n```javascript\n[\n  {\n    \"_id\": \"tt1375666\",\n    \"imdb_id\": \"tt1375666\",\n    \"title\": \"Inception\",\n    \"year\": \"2010\",\n    \"synopsis\": \"Cobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: \\\"inception\\\", the implantation of another person's idea into a target's subconscious.\",\n    \"runtime\": \"148\",\n    \"released\": 1279238400,\n    \"trailer\": \"http://youtube.com/watch?v=xitHF0IPJSQ\",\n    \"certification\": \"PG-13\",\n    \"torrents\": {\n      \"en\": {\n        \"1080p\": {\n          \"url\": \"magnet:?xt=urn:btih:224BF45881252643DFC2E71ABC7B2660A21C68C4&tr=udp://glotorrents.pw:6969/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://torrent.gresille.org:80/announce&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.coppersurfer.tk:6969&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://p4p.arenabg.ch:1337&tr=udp://tracker.internetwarriors.net:1337\",\n          \"seed\": 927,\n          \"peer\": 82,\n          \"size\": 1986422374,\n          \"filesize\": \"1.85 GB\",\n          \"provider\": \"YTS\"\n        },\n        \"720p\": {\n          \"url\": \"magnet:?xt=urn:btih:CE9156EB497762F8B7577B71C0647A4B0C3423E1&tr=udp://glotorrents.pw:6969/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://torrent.gresille.org:80/announce&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.coppersurfer.tk:6969&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://p4p.arenabg.ch:1337&tr=udp://tracker.internetwarriors.net:1337\",\n          \"seed\": 571,\n          \"peer\": 47,\n          \"size\": 1148903752,\n          \"filesize\": \"1.07 GB\",\n          \"provider\": \"YTS\"\n        }\n      }\n    },\n    \"genres\": [\n      \"action\",\n      \"adventure\",\n      \"mystery\",\n      \"science-fiction\",\n      \"thriller\"\n    ],\n    \"images\": {\n      \"poster\": \"https://walter.trakt.us/images/movies/000/016/662/posters/original/a7f71cbc67.jpg\",\n      \"fanart\": \"https://walter.trakt.us/images/movies/000/016/662/fanarts/original/d02c86e1f7.jpg\",\n      \"banner\": \"https://walter.trakt.us/images/movies/000/016/662/banners/original/9bd450d083.jpg\"\n    },\n    \"rating\": {\n      \"percentage\": 88,\n      \"watching\": 2,\n      \"votes\": 25134,\n      \"loved\": 100,\n      \"hated\": 100\n    }\n  },\n  ...\n]\n```\n\n**GET - `http://localhost:5000/movie/{imdb_id}`**\n\nGives information about a single movie based on the given imdb id.\n\n**Example output:**\n\n```javascript\n{\n  \"_id\": \"tt1375666\",\n  \"imdb_id\": \"tt1375666\",\n  \"title\": \"Inception\",\n  \"year\": \"2010\",\n  \"synopsis\": \"Cobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: \\\"inception\\\", the implantation of another person's idea into a target's subconscious.\",\n  \"runtime\": \"148\",\n  \"released\": 1279238400,\n  \"trailer\": \"http://youtube.com/watch?v=xitHF0IPJSQ\",\n  \"certification\": \"PG-13\",\n  \"torrents\": {\n    \"en\": {\n      \"1080p\": {\n        \"url\": \"magnet:?xt=urn:btih:224BF45881252643DFC2E71ABC7B2660A21C68C4&tr=udp://glotorrents.pw:6969/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://torrent.gresille.org:80/announce&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.coppersurfer.tk:6969&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://p4p.arenabg.ch:1337&tr=udp://tracker.internetwarriors.net:1337\",\n        \"seed\": 927,\n        \"peer\": 82,\n        \"size\": 1986422374,\n        \"filesize\": \"1.85 GB\",\n        \"provider\": \"YTS\"\n      },\n      \"720p\": {\n        \"url\": \"magnet:?xt=urn:btih:CE9156EB497762F8B7577B71C0647A4B0C3423E1&tr=udp://glotorrents.pw:6969/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://torrent.gresille.org:80/announce&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.coppersurfer.tk:6969&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://p4p.arenabg.ch:1337&tr=udp://tracker.internetwarriors.net:1337\",\n        \"seed\": 571,\n        \"peer\": 47,\n        \"size\": 1148903752,\n        \"filesize\": \"1.07 GB\",\n        \"provider\": \"YTS\"\n      }\n    }\n  },\n  \"genres\": [\n    \"action\",\n    \"adventure\",\n    \"mystery\",\n    \"science-fiction\",\n    \"thriller\"\n  ],\n  \"images\": {\n    \"poster\": \"https://walter.trakt.us/images/movies/000/016/662/posters/original/a7f71cbc67.jpg\",\n    \"fanart\": \"https://walter.trakt.us/images/movies/000/016/662/fanarts/original/d02c86e1f7.jpg\",\n    \"banner\": \"https://walter.trakt.us/images/movies/000/016/662/banners/original/9bd450d083.jpg\"\n  },\n  \"rating\": {\n    \"percentage\": 88,\n    \"watching\": 2,\n    \"votes\": 25134,\n    \"loved\": 100,\n    \"hated\": 100\n  }\n}\n```\n\n**GET - `http://localhost:5000/random/movie`**\n\nGives a random movie from the database. The output will be similar to the on directly above.\n\n## Show\n\n**GET - `http://localhost:5000/shows/{page}`**\n\nGives an array of shows. The array has a has a maximum length of 50 shows per page.\n\n**Example output:**\n\n```javascript\n[\n  {\n    \"_id\": \"tt0944947\",\n    \"imdb_id\": \"tt0944947\",\n    \"tvdb_id\": \"121361\",\n    \"title\": \"Game of Thrones\",\n    \"year\": \"2011\",\n    \"slug\": \"game-of-thrones\",\n    \"num_seasons\": 5,\n    \"images\": {\n      \"poster\": \"https://walter.trakt.us/images/shows/000/001/390/posters/original/93df9cd612.jpg\",\n      \"fanart\": \"https://walter.trakt.us/images/shows/000/001/390/fanarts/original/76d5df8aed.jpg\",\n      \"banner\": \"https://walter.trakt.us/images/shows/000/001/390/banners/original/9fefff703d.jpg\"\n    },\n    \"rating\": {\n      \"percentage\": 94,\n      \"watching\": 626,\n      \"votes\": 47012,\n      \"loved\": 100,\n      \"hated\": 100\n    }\n  },\n  {\n    \"_id\": \"tt0903747\",\n    \"imdb_id\": \"tt0903747\",\n    \"tvdb_id\": \"81189\",\n    \"title\": \"Breaking Bad\",\n    \"year\": \"2008\",\n    \"slug\": \"breaking-bad\",\n    \"num_seasons\": 5,\n    \"images\": {\n      \"banner\": \"https://walter.trakt.us/images/shows/000/001/388/banners/original/c53872a7e2.jpg\",\n      \"fanart\": \"https://walter.trakt.us/images/shows/000/001/388/fanarts/original/fdbc0cb02d.jpg\",\n      \"poster\": \"https://walter.trakt.us/images/shows/000/001/388/posters/original/fa39b59954.jpg\"\n    },\n    \"rating\": {\n      \"hated\": 100,\n      \"loved\": 100,\n      \"votes\": 39660,\n      \"watching\": 35,\n      \"percentage\": 94\n    }\n  },\n  ...\n]\n```\n\n**GET - `http://localhost:5000/show/{imdb_id}`**\n\nGives information about a single show based on the given imdb id.\n\n**Example output:**\n\n```javascript\n{\n  \"_id\": \"tt0944947\",\n  \"imdb_id\": \"tt0944947\",\n  \"tvdb_id\": \"121361\",\n  \"title\": \"Game of Thrones\",\n  \"year\": \"2011\",\n  \"slug\": \"game-of-thrones\",\n  \"synopsis\": \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and the icy horrors beyond.\",\n  \"runtime\": \"60\",\n  \"country\": \"us\",\n  \"network\": \"HBO\",\n  \"air_day\": \"Sunday\",\n  \"air_time\": \"21:00\",\n  \"status\": \"returning series\",\n  \"num_seasons\": 5,\n  \"last_updated\": 1464725906217,\n  \"__v\": 0,\n  \"episodes\": [\n    {\n      \"torrents\": {\n        \"0\": {\n          \"provider\": \"VTV\",\n          \"peers\": 303,\n          \"seeds\": 290,\n          \"url\": \"magnet:?xt=urn:btih:D7D4BA47D984061F942D0D2F030AA927C943387E&dn=game+of+thrones+6x05+720p+hdtv+x264+avs+vtv&tr=udp%3A%2F%2Ftracker.publicbt.com%2Fannounce&tr=udp%3A%2F%2Fglotorrents.pw%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce\"\n        },\n        \"720p\": {\n          \"provider\": \"VTV\",\n          \"peers\": 303,\n          \"seeds\": 290,\n          \"url\": \"magnet:?xt=urn:btih:D7D4BA47D984061F942D0D2F030AA927C943387E&dn=game+of+thrones+6x05+720p+hdtv+x264+avs+vtv&tr=udp%3A%2F%2Ftracker.publicbt.com%2Fannounce&tr=udp%3A%2F%2Fglotorrents.pw%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce\"\n        }\n      },\n      \"watched\": {\n        \"watched\": false\n      },\n      \"first_aired\": 1463965200,\n      \"date_based\": false,\n      \"overview\": \"Tyrion seeks a strange ally. Bran learns a great deal. Brienne goes on a mission. Arya is given a chance to prove herself.\",\n      \"title\": \"The Door\",\n      \"episode\": 5,\n      \"season\": 6,\n      \"tvdb_id\": 5600132\n    },\n    ...\n  ],\n  \"genres\": [\n    \"drama\",\n    \"fantasy\",\n    \"science-fiction\",\n    \"action\",\n    \"adventure\"\n  ],\n  \"images\": {\n    \"poster\": \"https://walter.trakt.us/images/shows/000/001/390/posters/original/93df9cd612.jpg\",\n    \"fanart\": \"https://walter.trakt.us/images/shows/000/001/390/fanarts/original/76d5df8aed.jpg\",\n    \"banner\": \"https://walter.trakt.us/images/shows/000/001/390/banners/original/9fefff703d.jpg\"\n  },\n  \"rating\": {\n    \"percentage\": 94,\n    \"watching\": 626,\n    \"votes\": 47012,\n    \"loved\": 100,\n    \"hated\": 100\n  }\n}\n```\n\n**GET - `http://localhost:5000/random/show`**\n\nGives a random show from the database. The output will be similar to the on directly above.\n\n# Query strings\n\nThe following routes support query strings:\n\n- **GET - `http://localhost:5000/animes/{page}`**\n- **GET - `http://localhost:5000/movies/{page}`**\n- **GET - `http://localhost:5000/shows/{page}`**\n\n## Sorting\n\n`sort=`\n\n###### Anime\n\nPossible options for **anime** are:\n\n- `name`: sort by the release date of the movies.\n- `rating`: sort by the highest rated anime.\n- `year`: sort by the release year of the anime.\n\n###### Movies\n\nPossible options for **movies** are:\n\n- `last added`: sort by the release date of the movies.\n- `rating`: sort by the highest rated movies.\n- `title`: sort by the title of the movies.\n- `trending`: sort by trending movies.\n- `year`: sort by the release year of the movies.\n\n###### Shows\n\nPossible options for **shows** are:\n\n- `name`: sort by the title of the shows.\n- `rating`: sort by the highest rated shows.\n- `trending`: sort by trending shows.\n- `updated` sort by the most recently aired shows.\n- `year`: sort by the release year of the movies.\n\n## Ordering\n\n`order=`\n\nTo order ascending: `1`\nTo order descending: `-1`\n\n## Genres\n\n`genre=`\n\n### Movies & Shows\n\nThe API supports the following genres for **shows** and **movies**:\n - action\n - adventure\n - animation\n - comedy\n - crime\n - disaster\n - documentary\n - drama\n - eastern\n - family\n - fan-film\n - fantasy\n - film-noir\n - history\n - holiday\n - horror\n - indie\n - music\n - mystery\n - none\n - road\n - romance\n - science-fiction\n - short\n - sports\n - sporting-event\n - suspense\n - thriller\n - tv-movie\n - war\n - western\n\n### Anime\n\nThe API supports the following genres for **anime**:\n - Action\n - Ecchi\n - Harem\n - Romance\n - School\n - Supernatural\n - Drama\n - Comedy\n - Mystery\n - Police\n - Sports\n - Mecha\n - Sci-Fi\n - Slice of Life\n - Fantasy\n - Adventure\n - Gore\n - Music\n - Psychological\n - Shoujo Ai\n - Yuri\n - Magic\n - Horror\n - Thriller\n - Gender Bender\n - Parody\n - Historical\n - Racing\n - Demons\n - Samurai\n - Super Power\n - Military\n - Dementia\n - Mahou Shounen\n - Game\n - Martial Arts\n - Vampire\n - Kids\n - Mahou Shoujo\n - Space\n - Shounen Ai\n\n## Keywords\n\n`keywords=`\n\nSearch based on keywords.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/manual/tutorial.md",
    "name": "./manual/tutorial.md",
    "content": "# Tutorial\n\nIn this tutorial section you can read about the scraping process of the API.\n\n## Scraper\n\nThe [`Scraper`](https://popcorn-official.github.io/popcorn-api/class/src/scraper.js~Scraper.html) class is the entry point to start the scraping process with the [`scrape`](https://popcorn-official.github.io/popcorn-api/class/src/scraper.js~Scraper.html#instance-method-scrape) method. This method will iterate through an array of methods to scrape each individual content provider.\n\n```javascript\nscrape() {\n  Scraper._util.setLastUpdated();\n\n  asyncq.eachSeries([\n    this._scrapeExtratorrentShows,\n    this._scrapeEZTVShows,\n    this._scrapeKATShows,\n\n    this._scrapeExtratorrentMovies,\n    this._scrapeKATMovies,\n    this._scrapeYTSMovies,\n\n    this._scrapeExtratorrentAnime,\n    this._scrapeKATAnime,\n    this._scrapeHorribelSubsAnime,\n    this._scrapeNyaaAnime\n  ], scraper => scraper()).then(value => Scraper._util.setStatus())\n    .catch(err => Scraper._util.onError(`Error while scraping: ${err}`));\n};\n```\n\n## Content Providers\n\nPopcorn API gets its torrent content from various sources. Here you can see where the content is coming from.\n\n|                                             | Anime | Movie | Show |\n|---------------------------------------------|-------|-------|------|\n| [ExtraTorrent](https://extratorrent.cc)     | X [1] | X     | X    |\n| [EZTV](https://eztv.ag/)                    |       |       | X    |\n| [Horriblesubs](https://horriblesubs.info/)  | X     |       |      |\n| [KAT](https://kat.cr/) [2]                  | X     | X     | X    |\n| [Nyaa](https://nyaa.se/)                    | X     |       |      |\n| [YTS](https://yts.ag/)                      |       | X     |      | |\n\n - [1] Anime can be scraped from ExtraTorrent, but currently this is not done. The reason for this is because it is very ineffective to scrape anime torrents from [ExtraTorrent](https://extratorrent.cc/). The ineffectiveness is due to a lack of good ExtraTorrent providers.\n\n - [2] The main website of [KAT](https://kat.cr/) is down at the moment, but it was used for movie and tv show scraping. Around the development of the anime provider [KAT](https://kat.cr/) got taken down. If [KAT](https://kat.cr/) ever comes back in the state it was before it was taken down it can be used again. If this scenario happens the `baseUrl` of [kat-api-pt](https://github.com/ChrisAlderson/kat-api-pt) needs to be changed, or the `options` in the constructor need to change to override the default `baseUrl`.\n\n### ExtraTorrent\n\nContent from [extratorrent.cc](https://extratorrent.cc/) is grabbed with so-called 'ExtraTorrent providers' which are defined in the\n [`extratorrentAnimeProviders`](https://popcorn-official.github.io/popcorn-api/variable/index.html#static-variable-extratorrentAnimeProviders),  [`extratorrentMovieProviders`](https://popcorn-official.github.io/popcorn-api/variable/index.html#static-variable-extratorrentMovieProviders) and [`extratorrentShowProviders`](https://popcorn-official.github.io/popcorn-api/variable/index.html#static-variable-extratorrentShowProviders) arrays. The ExtraTorrent providers will be converted to a search query to [extratorrent.cc](https://extratorrent.cc/) by the [extratorrent-api](https://github.com/ChrisAlderson/extratorrent-api) module.\n\nEach provider needs a `name` property and a `query` property. The `name` property is a `String` will be used for logging purposes so that issues with the provider can be figured out easier. The `query` property is an `Object` which can contain various properties. These properties will be converted into a search query to [extratorrent.cc](https://extratorrent.cc/):\n\nThe following `query` properties can be used:\n```\n- page                    # Number of the page you want to search\n- with_words              # With all of the words **REQUIRED!**\n- extact                  # With the exact phrase\n- without                 # Without the words\n- category                # See categories\n- added                   # Number of last added 1 day (1), 3 days (3) or week (7)\n- seeds_from              # Seeds more than the number given\n- seeds_to                # Seeds less than the number given\n- leechers_from           # Leecher more than the number given\n- leechers_to             # Leechers less than the number given\n- size_from               # Torrent size more than the number given\n- size_to                 # Torrent size less than the number given\n- size_type               # b for byte, kb for kilobyte etc\n```\n\nAll three types of content can be scraped from [extratorrent.cc](https://extratorrent.cc/) through the `ExtraTorrent` class in each folder of the providers. By default the `ExtraTorrent` class adds a few default properties to the providers. The `page` property does not need to be indicated since the algorithm for scraping [extratorrent.cc](https://extratorrent.cc/) will go through all the available pages (max of 200 pages/10.000 torrents due to site limitations). The `category` property will also have a default value to its corresponding content.\n\n**An example of an ExtraTorrent provider:**\n```javascript\n{\n  name: 'ETTV LOL',\n  query: {\n    with_words: 'ettv hdtv x264 lol',\n    without: '720p 1080p'\n  }\n}\n```\n\nIf you want to make a provider for [extratorrent.cc](https://extratorrent.cc/) it is highly recommended you try it first in the browser by manually going to [extratorrent.cc](https://extratorrent.cc/) and search for the content. This is because the title of the torrent will be subjected to regular expressions by the [`Extractors`](#extractors) to 'extract' information about the torrent which will be used to find [metadata](#metadata-providers).\n\n### EZTV\n\nContent from [eztv.ag](https://eztv.ag/) is grabbed through the [eztv-api-pt](https://github.com/ChrisAlderson/eztv-api-pt) module. The module contains two methods `getAllShows` and `getShowData`.\n\n#### getAllShows\n\nThis method returns a list of all the available shows listed [here](https://eztv.ag/showlist/). Through regular expression it grabs the show title, the id used by [eztv.ag](https://eztv.ag/) and the slug.\n\n```javascript\n[{\n    show: '10 O\\'Clock Live',\n    id: '449',\n    slug: '10-o-clock-live'\n  }, {\n    show: '10 Things I Hate About You',\n    id: '308',\n    slug: '10-things-i-hate-about-you'\n  },\n  ...\n]\n```\n\n#### getShowData\n\nEach show from the `getAllShows` can be passed into the `getShowData` method to get more data on the individual show. Through this process the slug can change to another slug or imdb id which is compatible with [Trakt.tv](https://trakt.tv/). Torrents are being added to the `episodes` property which is compatible with the [`Helper`](#helpers) class to insert the torrents into the MongoDB database. Nested within the `episodes` property there is the `season number` within the `season number` is the `episode number` and within the `episode number` are the different `qualities` of the torrent.\n\n```javascript\n{ show: '10 O\\'Clock Live',\n  id: '449',\n  slug: 'tt1811399',\n  episodes:\n    dateBased: false,\n    { '1':\n      { '1':\n         { '480p':\n            { url: 'magnet:?xt=urn:btih:LMJXHHNOW33Z3YGXJLCTJZ23WK2D6VO4&dn=10.OClock.Live.S01E01.WS.PDTV.XviD-PVR&tr=udp://tracker.openbittorrent.com:80&tr=udp://open.demonii.com:80&tr=udp://tracker.coppersurfer.tk:80&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://exodus.desync.com:6969',\n              seeds: 0,\n              peers: 0,\n              provider: 'EZTV' } },\n        ...\n      }\n    }\n}\n```\n\n### Horriblesubs\n\nContent from [horriblesubs.info](https://horriblesubs.info/) is grabbed through the [horriblesubs-api](https://github.com/ChrisAlderson/horriblesubs-api) module. The module contains two methods `getAllAnime` and `getAnimeData`. This module is based on [eztv-api-pt](https://github.com/ChrisAlderson/eztv-api-pt) module and the usage of the module within the API is very similar to the [EZTV provider](#eztv).\n\n#### getAllAnime\n\nThis method returns a list of all the available shows listed [here](http://horriblesubs.info/shows/). Through the [cheerio](https://github.com/cheeriojs/cheerio) module it grabs the anime title, the slug, and the link to get more details about the anime.\n\n```javascript\n[{\n  link: '/shows/91-days',\n  slug: '91-days',\n  title: '91 Days'\n}, {\n  link: '/shows/absolute-duo',\n  slug: 'absolute-duo',\n  title: 'Absolute Duo'\n}, ...]\n```\n\n#### getAnimeData\n\nEach anime from the `getAllAnime` can be passed into the `getAnimeData` method to get more data on the individual anime. Through this process the slug can change to another slug which is compatible with [Hummingbird.me](https://hummingbird.me). The `hs_showid` is added and torrents are being added to the `episodes` property which is compatible with the [`Helper`](#helpers) class to insert the torrents into the MongoDB database. Nested within the `episodes` property there is the `season number` within the `season number` is the `episode number` and within the `episode number` are the different `qualities` of the torrent.\n\n```javascript\n{ link: '/shows/91-days',\n  slug: 'ninety-one-days',\n  title: '91 Days',\n  hs_showid: '731',\n  episodes:\n   { '1':\n      { '1':\n        { '480':\n          { url: 'magnet:?xt=urn:btih:AYIJKPLP5WVVF36O25JBB3FFPNJEBBPQ&tr=http://open.nyaatorrents.info:6544/announce&tr=udp://tracker.openbittorrent.com:80/announce&tr=udp://tracker.coppersurfer.tk:6969/announce',\n          seeds: 0,\n          peers: 0,\n          provider: 'HorribleSubs' } },\n        ...\n      }\n    }\n}\n```\n\n### KAT\n\nContent from [kat.cr](https://kat.cr/) is grabbed with so-called `KAT providers` which are defined in the\n [`katAnimeProviders`](https://popcorn-official.github.io/popcorn-api/variable/index.html#static-variable-katAnimeProviders),  [`katMovieProviders`](https://popcorn-official.github.io/popcorn-api/variable/index.html#static-variable-katMovieProviders) and [`katShowProviders`](https://popcorn-official.github.io/popcorn-api/variable/index.html#static-variable-katShowProviders) arrays. The KAT providers will be converted to a search query to [kat.cr](https://kat.cr/) by the [kat-api-pt](https://github.com/ChrisAlderson/kat-api-pt) module.\n\nThe following `query` properties can be used:\n```\n - query               # Search for keywords\n - category            # The category to search for e.g. tv or movies\n - uploader            # The name of the uploader of the torrents\n - min_seeds           # The minimum amount of seeds\n - age                 # The age of the torrents\n - min_files           # The minimum amount of files\n - imdb                # The imdb id for a tv show (only works with category:tv)\n - tvrage              # The tvrage id for a tv show (only works with category:tv)\n - language            # The language of the movie/tv show e.g. en or pl\n - adult_filter        # Filter out the adult torrents\n - verified            # Show only the verified torrents\n - season              # Season number of a tv show (only works with category:tv)\n - episode             # Episode number of a tv show (only works with category:tv)\n - page                # The page to search on.\n - sort_by             # Sort by property\n - order               # Order the list asc or desc\n```\n\nAll three types of content can be scraped from [kat.cr](https://kat.cr/) through the `KAT` class in each folder of the providers. By default the `KAT` class adds a few default properties to the providers. The `page` property does not need to be indicated since the algorithm for scraping [kat.cr](https://kat.cr/) will go through all the available pages (max of 400 pages/10.000 torrents due to site limitations). The `category` property will also have a default value to its corresponding content. The `adult_filter` and `verified` properties are also turned on by default to filter out any potential harmful content.\n\n**An example of a provider:**\n```javascript\n{\n  name: 'ZonerLOL',\n  query: {\n    query: 'x264-LOL',\n    min_seeds: 3\n  }\n}\n```\n\nIf you want to make a provider for [kat.cr](https://kat.cr/) it is highly recommended you try it first in the browser by manually going to [kat.cr](https://kat.cr/) and search for the content. This is because the title of the torrent will be subjected to regular expressions by the [`Extractors`](#extractors) to 'extract' information about the torrent which will be used to find [metadata](#metadata-providers).\n\n### Nyaa\n\nAdditional anime content can be scraped from [nyaa.se](https://nyaa.se/), the method for scraping the content is similar to the [ExtraTorrent](#extratorrent) and the [KAT](#kat) method. It uses the [`nyaaAnimeProviders`](https://popcorn-official.github.io/popcorn-api/variable/index.html#static-variable-nyaaAnimeProviders) array, each `Object` in the array will be converted to a search query to [nyaa.se](https://nyaa.se/). This is done by the [nyaa-api-pt](https://github.com/ChrisAlderson/nyaa-api-pt) module.\n\nEach provider needs a `name` property and a `query` property. The `name` property is a `String` will be used for logging purposes so that issues with the provider can be figured out easier. The `query` property is an `Object` which can contain various properties. These properties will be converted into a search query to [nyaa.se](https://nyaa.se/):\n\nThe following `query` properties can be used:\n```\n - filter              # Trusted uploader filter\n - category            # The category to filter\n - sub_category        # The sub category to filter\n - term                # A search term\n - user                # The id of the uploader\n - offset              # The page to search on\n```\n\nOnly anime will be scraped on [nyaa.se](https://nyaa.se/), this is because [nyaa.se](https://nyaa.se/) is focuses on East Asian content. The [`Nyaa`]() class will automaticly add the `category` and `sub_category` properties. The `offset` does not to be indicated since the algorithm for scraping [nyaa.se](https://nya.se/) will go through all the available pages (max of 100 pages/10.500 torrent due to site limitations).\n\n**An example of a provider:**\n```javascript\n{\n  name: 'Commie',\n  query: {\n    term: 'mkv',\n    user: 76430,\n    filter: 'trusted_only'\n  }\n}\n```\n\nIf you want to make a provider for [nyaa.se](https://nyaa.se/) it is highly recommended you try if first in the browser by manually to [nyaa.se](https://nyaa.se/) and search for the content. This is because the title of the torrent will be subjected to regular expression by the [`Extractor`](#anime-extractor) for anime content. The information the extractor 'extracts' will be used by the [metadata providers](#metadata-providers).\n\n### YTS\n\n**NOTE:** This provider will most likely be changed to use a YTS API wrapper module. No API wrappers exists for YTS which are using promises, so one needs to be made.\n\n## Extractors\n\nThe extractors are made to get torrents from the content provider and extract content data from torrents.\n\n### Base Extractor\n\nThe base extractor is made to extract all the torrents from the [ExtraTorrent](#extratorrent), [KAT](#kat) and [Nyaa](#nyaa) content providers. It has a method to iterate through all the available pages from the content provider and return all the torrents it has found. All extractors will extend this class.\n\n### Anime Extractor\n\nThe regular expression needs to get a `title`, `episode` and a `quality` property. A `season` property is optional, if the `season` is not in the episode title it will assume the torrent is from `season` 1. Down below you can see the method to get the needed data for an anime episode. If your content does not match any of these regular expressions, you can add the regular expression to the method.\n\n```javascript\n_getAnimeData(torrent) {\n  const secondSeasonQuality = /\\[.*\\].(.*)\\W+S(\\d)...(\\d{2,3})\\W+(\\d{3,4}p)/i; // [HorribleSubs] Fairy Tail S2 - 70 [1080p].mkv\n  const oneSeasonQuality = /\\[.*\\].(\\D+)...(\\d{2,3})\\W+(\\d{3,4}p)/i; // [HorribleSubs] Gangsta - 06 [480p].mkv\n  const secondSeason = /\\[.*\\].(\\D+).S(\\d+)...(\\d{2,3}).*\\.mkv/i; // [Commie] The World God Only Knows S2 - 12 [C0A4301E].mkv\n  const oneSeason = /\\[.*\\].(\\D+)...(\\d{2,3}).*\\.mkv/i; // [Commie] Battery - 05 [38EC4270].mkv\n  if (torrent.title.match(secondSeasonQuality)) {\n   return this._extractAnime(torrent, secondSeasonQuality);\n } else if (torrent.title.match(oneSeasonQuality)) {\n   return this._extractAnime(torrent, oneSeasonQuality);\n } else if (torrent.title.match(secondSeason)) {\n    return this._extractAnime(torrent, secondSeason);\n  } else if  (torrent.title.match(oneSeason)) {\n    return this._extractAnime(torrent, oneSeason);\n  } else {\n    logger.warn(`${this.name}: Could not find data from torrent: '${torrent.title}'`);\n  }\n};\n```\n\n### Movie Extractor\n\nThe regular expression for movies needs to get a `title`, `year` and a `quality` property. Down below you can see the method to get the needed data for a movie. If your content does not match any of these regular expressions, you can add the regular expression to the method.\n\n```javascript\n_getMovieData(torrent, language) {\n  const threeDimensions = /(.*).(\\d{4}).[3Dd]\\D+(\\d{3,4}p)/; // Journey to Space 2015 3D 1080p BRRip Half-SBS x264 AAC-ETRG\n  const fourKay = /(.*).(\\d{4}).[4k]\\D+(\\d{3,4}p)/; // Spider Man 2002 4K REMASTERED Bluray 1080p TrueHD x264-Grym\n  const withYear = /(.*).(\\d{4})\\D+(\\d{3,4}p)/; // Batman Begins 2005 720p BluRay x264 AC3 - Ozlem\n  if (torrent.title.match(threeDimensions)) {\n    return this._extractMovie(torrent, language, threeDimensions);\n  } else if (torrent.title.match(fourKay)) {\n    return this._extractMovie(torrent, language, fourKay);\n  } else if (torrent.title.match(withYear)) {\n    return this._extractMovie(torrent, language, withYear);\n  } else {\n    console.warn(`${this.name}: Could not find data from torrent: '${torrent.title}'`);\n  }\n};\n```\n\n### Show Extractor\n\nThe regular expression for shows needs to get a `title`, `season`, `episode` and a `quality` property. Down below you can see the method to get the needed data for a show episode. If your content does not match any of these regular expressions, you can add the regular expression to the method.\n\n```javascript\n_getShowData(torrent) {\n  const seasonBased = /(.*).[sS](\\d{2})[eE](\\d{2})/; // Dexter S08E09 720p HDTV x264-IMMERSE\n  const vtv = /(.*).(\\d{1,2})[x](\\d{2})/; // The Whispers 1x09 (HDTV-x264-KILLERS)[VTV]\n  const dateBased = /(.*).(\\d{4}).(\\d{2}.\\d{2})/; // Jimmy Fallon 2016 08 02 Jonah Hill HDTV x264-CROOKS\n  if (torrent.title.match(seasonBased)) {\n    return this._extractShow(torrent, seasonBased, false);\n  } else if (torrent.title.match(vtv)) {\n    return this._extractShow(torrent, vtv, false);\n  } else if (torrent.title.match(dateBased)) {\n    return this._extractShow(torrent, dateBased, true);\n  } else {\n    console.warn(`${this.name}: Could not find data from torrent: '${torrent.title}'`);\n  }\n};\n```\n\n## Helpers\n\nThe `helper.js` classes in each provider folder helps the providers to insert the scraped data into the MongoDB database. The providers need to call two methods.\n\n### Anime & Show Helpers\n\nThe first method to call is [`getHummingbirdInfo`](https://popcorn-official.github.io/popcorn-api/class/src/providers/anime/helper.js~Helper.html#instance-method-getHummingbirdInfo) for anime and [`getTraktInfo`](https://popcorn-official.github.io/popcorn-api/class/src/providers/show/helper.js~Helper.html#instance-method-getTraktInfo) for shows. These methods need a slug as a parameter ([`getTraktInfo`](https://popcorn-official.github.io/popcorn-api/class/src/providers/show/helper.js~Helper.html#instance-method-getTraktInfo) can also use an imdb id). These methods will fetch metadata from [Hummingbird.me](https://hummingbird.me/) or [Trakt.tv](https://trakt.tv) and return an object based on the schema of the mongoose model, but without any episodes.\n\n```javascript\ngetTraktInfo(slug);\ngetHummingbirdInfo(slug);\n```\n\nThe second method to call is the `addEpisodes` method to attach the episodes to the object returned by [`getHummingbirdInfo`](https://popcorn-official.github.io/popcorn-api/class/src/providers/anime/helper.js~Helper.html#instance-method-getHummingbirdInfo) or [`getTraktInfo`](https://popcorn-official.github.io/popcorn-api/class/src/providers/anime/helper.js~Helper.html#instance-method-getHummingbirdInfo). This object is the first parameter, the second one is the episodes object and the third parameter is the slug again.\n\n```javascript\naddEpisodes(anime/show, episodes, slug);\n```\n\nThe episodes are structured in a particular way. In the episodes object you first have the seasons represented by a number. Nested in each season is another object which is the episode which is also represented by a number. In the episode object you have the qualities available for the episode. These qualities can be `480p`, `720p` or `1080p`. Finally inside the quality object you have the `url` to the torrent or magnet link, the amount of `seeds` and `peers` and lastly the name of the provider.\n\n```javascript\n{\n  '1': {\n    '1': {\n      '480p': {\n        url: 'magnet:?xt=urn:btih:LMJXHHNOW33Z3YGXJLCTJZ23WK2D6VO4&dn=10.OClock.Live.S01E01.WS.PDTV.XviD-PVR&tr=udp://tracker.openbittorrent.com:80&tr=udp://open.demonii.com:80&tr=udp://tracker.coppersurfer.tk:80&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://exodus.desync.com:6969',\n        seeds: 0,\n        peers: 0,\n        provider: 'EZTV'\n      }\n    }\n  }\n}\n```\n\n### Movie Helper\n\nThe first method to call is [`getTraktInfo`](https://popcorn-official.github.io/popcorn-api/class/src/providers/movie/helper.js~Helper.html#instance-method-getTraktInfo). This method need a slug as a parameter, but can also use an imdb id). This method will fetch metadata from [Trakt.tv](https://trakt.tv) and return an object based on the schema of the mongoose model, but without any torrents.\n\n```javascript\ngetTraktInfo(slug);\n```\n\nThe second method to call is the [`addTorrents`](https://popcorn-official.github.io/popcorn-api/class/src/providers/movie/helper.js~Helper.html#instance-method-addTorrents) method to attach the torrents to the object returned by [`getTraktInfo`](https://popcorn-official.github.io/popcorn-api/class/src/providers/movie/helper.js~Helper.html#instance-method-getTraktInfo). This object is the first parameter, the second one is the torrents for the movie.\n\n```javascript\naddTorrents(movie, torrents);\n```\n\nThe torrents are structured in a particular way. In the torrents object you first have the language of the torrents represented by a language code e.g. `en`. Nested inside the language are the qualities of the torrents. These qualities can be `720p` or `1080p`. Finally inside the quality object you have the `url` to the torrent or magnet link, the amount of `seeds` and `peers`, the `size` of the torrent in bits, the `fileSize` which is a more easily readable version of `size` and lastly the name of provider.\n\n```javascipt\n{\n  'en': {\n    '720p': {\n      url: 'magnet:?xt=urn:btih:1BEA4C992D1F7A765F3C943E627E881AC7FDAA35&tr=udp://glotorrents.pw:6969/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://torrent.gresille.org:80/announce&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.coppersurfer.tk:6969&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://p4p.arenabg.ch:1337&tr=udp://tracker.internetwarriors.net:1337',\n      seed: 156,\n      peer: 44,\n      size: 819829146,\n      filesize: '781.85 MB',\n      provider: 'YTS'\n    }\n  }\n}\n```\n\n## Metadata Providers\n\nMetadata providers are providers which get data on a movie or get seasonal information from a show. Popcorn API uses two API services to get its metadata on anime, movies and shows.\n\n### [Trakt.tv](https://trakt.tv/)\n[Trakt.tv](https://trakt.tv/) is the metadata provider for movies and shows. It uses a module from [Jean van Kasteel](https://github.com/vankasteelj) called [trakt.tv](https://github.com/vankasteelj/trakt.tv). For more information about the Trakt API you can click [here](http://docs.trakt.apiary.io/).\n\n### [TheTVDB.com](https://thetvdb.com/)\n[TheTVDB.com](https://thetvdb.com/) is the metadata provider for shows which have are datebased like '@Midnight'. It uses a module from [Ed Wellbrook](https://github.com/edwellbrook) called [node-tvdb](https://github.com/edwellbrook/node-tvdb). For more information about the TVDB API you can click [here](https://www.thetvdb.com/wiki/index.php/Programmers_API).\n\n### [Hummingbird.me](https://hummingbird.me)\n[Hummingbird.me](https://hummingbird.me) is the metadata provider for anime. It uses the [hummingbird-api](https://github.com/ChrisAlderson/hummingbird-api) module. For more information about the Hummingbird API you can click [here](https://github.com/hummingbird-me/hummingbird/wiki).\n\n### [Fanart.tv](https://fanart.tv/)\n[Fanart.tv](https://fanart.tv/) is the provider of the images used by movies and shows. It uses the [fanart.tv-api](https://github.com/ChrisAlderson/fanart.tv-api/). For more information about the Fanart API you can click [here](http://docs.fanarttv.apiary.io/#).\n\n### [OMDBapi.com](https://www.omdbapi.com/)\n[OMDBapi.com](https://www.omdbapi.com/) is the provider of the images used by movies. It uses the [omdb-api-pt](https://github.com/ChrisAlderson/omdb-api-pt). For more information about the OMDB API you can click [here](https://www.omdbapi.com/).\n\n### [TheMovieDB.org](https://www.themoviedb.org/)\n[TheMovieDB.org](https://www.themoviedb.org/) is the provider for the images used by movies and shows. It uses a module from [sarathkcm](https://github.com/sarathkcm) called [themoviedbclient](https://github.com/sarathkcm/TheMovieDBClient). For more information about The MovieDB you can click [here](https://www.themoviedb.org/documentation/api).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Change Log\n\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n\n<a name=\"3.4.4\"></a>\n## [3.4.4](https://github.com/popcorn-official/popcorn-api/compare/v3.5.1...v3.4.4) (2021-06-06)\n\n\n\n<a name=\"3.4.3\"></a>\n## [3.4.3](https://github.com/popcorn-official/popcorn-api/compare/v3.5.1...v3.4.3) (2021-06-06)\n\n\n\n<a name=\"3.4.2\"></a>\n## [3.4.2](https://github.com/popcorn-official/popcorn-api/compare/v3.5.1...v3.4.2) (2021-06-06)\n\n\n\n<a name=\"3.4.1\"></a>\n## [3.4.1](https://github.com/popcorn-official/popcorn-api/compare/v3.5.1...v3.4.1) (2021-06-06)\n\n\n\n<a name=\"3.5.1\"></a>\n## [3.5.1](https://github.com/popcorn-official/popcorn-api/compare/v3.5.0...v3.5.1) (2021-06-06)\n\n\n\n<a name=\"3.5.0\"></a>\n# 3.5.0 (2021-06-06)\n\n\n### Bug Fixes\n\n* Fix tests for synopsis searching ([e8a58b3](https://github.com/popcorn-official/popcorn-api/commit/e8a58b3))\n* **flow:** Fix flow config for windows ([a93743a](https://github.com/popcorn-official/popcorn-api/commit/a93743a))\n* **flow:** Make flow tests pass ([53c4c5b](https://github.com/popcorn-official/popcorn-api/commit/53c4c5b))\n* **models:** Fix where animeshow and show would be the same ([ac135a8](https://github.com/popcorn-official/popcorn-api/commit/ac135a8))\n* **pop-api-scraper:** Fix where status files would be empty ([ebcd4e5](https://github.com/popcorn-official/popcorn-api/commit/ebcd4e5))\n* Fix api for pop-ap@0.1.0 ([e2d7931](https://github.com/popcorn-official/popcorn-api/commit/e2d7931))\n* fix appveyor shield ([0325cec](https://github.com/popcorn-official/popcorn-api/commit/0325cec))\n* Fix build with rollup commonjs ([0f2e739](https://github.com/popcorn-official/popcorn-api/commit/0f2e739))\n* Fix running dredd and mocha tests ([ce14d34](https://github.com/popcorn-official/popcorn-api/commit/ce14d34))\n* Flow  now works with mongoose models ([09e8b8e](https://github.com/popcorn-official/popcorn-api/commit/09e8b8e))\n\n\n### Features\n\n* Add issue and pr templates ([04e95d9](https://github.com/popcorn-official/popcorn-api/commit/04e95d9))\n* Add support for appveyor ([04cc12f](https://github.com/popcorn-official/popcorn-api/commit/04cc12f))\n* Add support for standard-version ([8d3efce](https://github.com/popcorn-official/popcorn-api/commit/8d3efce))\n* Build with rollupjs ([957b61d](https://github.com/popcorn-official/popcorn-api/commit/957b61d))\n* Text indexes search (@MrcRjs) ([f1e8fd2](https://github.com/popcorn-official/popcorn-api/commit/f1e8fd2))\n\n\n\n<a name=\"3.4.0\"></a>\n# 3.4.0 (2021-06-06)\n\n\n### Bug Fixes\n\n* Fix tests for synopsis searching ([e8a58b3](https://github.com/popcorn-official/popcorn-api/commit/e8a58b3))\n* **flow:** Fix flow config for windows ([a93743a](https://github.com/popcorn-official/popcorn-api/commit/a93743a))\n* **flow:** Make flow tests pass ([53c4c5b](https://github.com/popcorn-official/popcorn-api/commit/53c4c5b))\n* **models:** Fix where animeshow and show would be the same ([ac135a8](https://github.com/popcorn-official/popcorn-api/commit/ac135a8))\n* **pop-api-scraper:** Fix where status files would be empty ([ebcd4e5](https://github.com/popcorn-official/popcorn-api/commit/ebcd4e5))\n* Fix api for pop-ap@0.1.0 ([e2d7931](https://github.com/popcorn-official/popcorn-api/commit/e2d7931))\n* fix appveyor shield ([0325cec](https://github.com/popcorn-official/popcorn-api/commit/0325cec))\n* Fix build with rollup commonjs ([0f2e739](https://github.com/popcorn-official/popcorn-api/commit/0f2e739))\n* Fix running dredd and mocha tests ([ce14d34](https://github.com/popcorn-official/popcorn-api/commit/ce14d34))\n* Flow  now works with mongoose models ([09e8b8e](https://github.com/popcorn-official/popcorn-api/commit/09e8b8e))\n\n\n### Features\n\n* Add issue and pr templates ([04e95d9](https://github.com/popcorn-official/popcorn-api/commit/04e95d9))\n* Add support for appveyor ([04cc12f](https://github.com/popcorn-official/popcorn-api/commit/04cc12f))\n* Add support for standard-version ([8d3efce](https://github.com/popcorn-official/popcorn-api/commit/8d3efce))\n* Build with rollupjs ([957b61d](https://github.com/popcorn-official/popcorn-api/commit/957b61d))\n* Text indexes search (@MrcRjs) ([f1e8fd2](https://github.com/popcorn-official/popcorn-api/commit/f1e8fd2))\n\n\n\n<a name=\"3.3.0\"></a>\n# 3.3.0 (2021-06-06)\n\n\n### Bug Fixes\n\n* Fix tests for synopsis searching ([e8a58b3](https://github.com/popcorn-official/popcorn-api/commit/e8a58b3))\n* **flow:** Fix flow config for windows ([a93743a](https://github.com/popcorn-official/popcorn-api/commit/a93743a))\n* **flow:** Make flow tests pass ([53c4c5b](https://github.com/popcorn-official/popcorn-api/commit/53c4c5b))\n* **models:** Fix where animeshow and show would be the same ([ac135a8](https://github.com/popcorn-official/popcorn-api/commit/ac135a8))\n* **pop-api-scraper:** Fix where status files would be empty ([ebcd4e5](https://github.com/popcorn-official/popcorn-api/commit/ebcd4e5))\n* Fix api for pop-ap@0.1.0 ([e2d7931](https://github.com/popcorn-official/popcorn-api/commit/e2d7931))\n* fix appveyor shield ([0325cec](https://github.com/popcorn-official/popcorn-api/commit/0325cec))\n* Fix build with rollup commonjs ([0f2e739](https://github.com/popcorn-official/popcorn-api/commit/0f2e739))\n* Fix running dredd and mocha tests ([ce14d34](https://github.com/popcorn-official/popcorn-api/commit/ce14d34))\n* Flow  now works with mongoose models ([09e8b8e](https://github.com/popcorn-official/popcorn-api/commit/09e8b8e))\n\n\n### Features\n\n* Add issue and pr templates ([04e95d9](https://github.com/popcorn-official/popcorn-api/commit/04e95d9))\n* Add support for appveyor ([04cc12f](https://github.com/popcorn-official/popcorn-api/commit/04cc12f))\n* Add support for standard-version ([8d3efce](https://github.com/popcorn-official/popcorn-api/commit/8d3efce))\n* Build with rollupjs ([957b61d](https://github.com/popcorn-official/popcorn-api/commit/957b61d))\n* Text indexes search (@MrcRjs) ([f1e8fd2](https://github.com/popcorn-official/popcorn-api/commit/f1e8fd2))\n\n\n\n<a name=\"3.2.0\"></a>\n# 3.2.0 (2021-06-06)\n\n\n### Bug Fixes\n\n* Fix tests for synopsis searching ([e8a58b3](https://github.com/popcorn-official/popcorn-api/commit/e8a58b3))\n* **flow:** Fix flow config for windows ([a93743a](https://github.com/popcorn-official/popcorn-api/commit/a93743a))\n* **flow:** Make flow tests pass ([53c4c5b](https://github.com/popcorn-official/popcorn-api/commit/53c4c5b))\n* **models:** Fix where animeshow and show would be the same ([ac135a8](https://github.com/popcorn-official/popcorn-api/commit/ac135a8))\n* **pop-api-scraper:** Fix where status files would be empty ([ebcd4e5](https://github.com/popcorn-official/popcorn-api/commit/ebcd4e5))\n* Fix api for pop-ap@0.1.0 ([e2d7931](https://github.com/popcorn-official/popcorn-api/commit/e2d7931))\n* fix appveyor shield ([0325cec](https://github.com/popcorn-official/popcorn-api/commit/0325cec))\n* Fix build with rollup commonjs ([0f2e739](https://github.com/popcorn-official/popcorn-api/commit/0f2e739))\n* Fix running dredd and mocha tests ([ce14d34](https://github.com/popcorn-official/popcorn-api/commit/ce14d34))\n* Flow  now works with mongoose models ([09e8b8e](https://github.com/popcorn-official/popcorn-api/commit/09e8b8e))\n\n\n### Features\n\n* Add issue and pr templates ([04e95d9](https://github.com/popcorn-official/popcorn-api/commit/04e95d9))\n* Add support for appveyor ([04cc12f](https://github.com/popcorn-official/popcorn-api/commit/04cc12f))\n* Add support for standard-version ([8d3efce](https://github.com/popcorn-official/popcorn-api/commit/8d3efce))\n* Build with rollupjs ([957b61d](https://github.com/popcorn-official/popcorn-api/commit/957b61d))\n* Text indexes search (@MrcRjs) ([f1e8fd2](https://github.com/popcorn-official/popcorn-api/commit/f1e8fd2))\n\n\n\n<a name=\"3.1.0\"></a>\n# 3.1.0 (2021-06-06)\n\n\n### Bug Fixes\n\n* Fix tests for synopsis searching ([e8a58b3](https://github.com/popcorn-official/popcorn-api/commit/e8a58b3))\n* **flow:** Fix flow config for windows ([a93743a](https://github.com/popcorn-official/popcorn-api/commit/a93743a))\n* **flow:** Make flow tests pass ([53c4c5b](https://github.com/popcorn-official/popcorn-api/commit/53c4c5b))\n* **models:** Fix where animeshow and show would be the same ([ac135a8](https://github.com/popcorn-official/popcorn-api/commit/ac135a8))\n* **pop-api-scraper:** Fix where status files would be empty ([ebcd4e5](https://github.com/popcorn-official/popcorn-api/commit/ebcd4e5))\n* Fix api for pop-ap@0.1.0 ([e2d7931](https://github.com/popcorn-official/popcorn-api/commit/e2d7931))\n* fix appveyor shield ([0325cec](https://github.com/popcorn-official/popcorn-api/commit/0325cec))\n* Fix build with rollup commonjs ([0f2e739](https://github.com/popcorn-official/popcorn-api/commit/0f2e739))\n* Fix running dredd and mocha tests ([ce14d34](https://github.com/popcorn-official/popcorn-api/commit/ce14d34))\n* Flow  now works with mongoose models ([09e8b8e](https://github.com/popcorn-official/popcorn-api/commit/09e8b8e))\n\n\n### Features\n\n* Add issue and pr templates ([04e95d9](https://github.com/popcorn-official/popcorn-api/commit/04e95d9))\n* Add support for appveyor ([04cc12f](https://github.com/popcorn-official/popcorn-api/commit/04cc12f))\n* Add support for standard-version ([8d3efce](https://github.com/popcorn-official/popcorn-api/commit/8d3efce))\n* Build with rollupjs ([957b61d](https://github.com/popcorn-official/popcorn-api/commit/957b61d))\n* Text indexes search (@MrcRjs) ([f1e8fd2](https://github.com/popcorn-official/popcorn-api/commit/f1e8fd2))\n\n\n\n<a name=\"2.2.4\"></a>\n## [2.2.4](https://github.com/popcorn-official/popcorn-api/commit/83ca4a24f77ea749f827a7d623db48e2ca821ed0) (17-12-2016)\n\n### Features\n * Testing with [Dredd](https://github.com/apiaryio/dredd) in favor of mocha.\n * Better fetching of images.\n\n\n### Bug Fixes\n * Fixed ExtraTorrent scraping with [extratorrent-api@1.0.9](https://github.com/ChrisAlderson/extratorrent-api).\n\n\n\n<a name=\"2.2.3\"></a>\n## [2.2.3](https://github.com/popcorn-official/popcorn-api/commit/e7537765cf91e16ed81999325e06657e7ebcfbf6) (19-11-2016)\n\n### Features\n * Added `themoviedbclient` as a provider for images.\n * Moved `/` to `/status`.\n * Removed JSCS for ESLint.\n\n\n### Bug Fixes\n * `trailer` defaults to `null` instead of `false`.\n\n\n\n<a name=\"2.2.2\"></a>\n## [2.2.2](https://github.com/popcorn-official/popcorn-api/commit/528abcbe1e4dca514647ff23881a2baf23c7df8b) (26-10-2016)\n\n### Features\n * Movie images are now coming from Fanart.tv or OMDB.\n * Show images are now coming from Fanart.tv or TVDB.\n\n\n### Bug Fixes\n * Removed special characters when searching with keywords [#44](https://github.com/popcorn-official/popcorn-api/issues/44).\n\n\n\n<a name=\"2.2.1\"></a>\n## [2.2.1](https://github.com/popcorn-official/popcorn-api/commit/3d4c99b1fc9ce8455542b427017ccd6cc74833f6) (23-08-2016)\n\n### Bug Fixes\n * Fixed an issue where the API could return an anime with the type `movie`.\n * Fixed an issue where a season of a date based show could be `0`.\n * Fixed an issue where date based shows where not added correctly.\n\n\n\n<a name=\"2.2.0\"></a>\n## [2.2.0](https://github.com/popcorn-official/popcorn-api/commit/1fcf1f130ba3f2eeb167b2d115b9ae5c1e32ed04) (11-08-2016)\n\n### Features\n * Added extractors to extract torrents and content data from content providers.\n * Added ExtraTorrent as a content provider with the [extratorrent-api](https://github.com/ChrisAlderson/extratorrent-api) module.\n * DateBased shows are now included in the scrape [#8](https://github.com/popcorn-official/popcorn-api/issues/8).\n * Added Nyaa as a content provider for anime with the [nyaa-api-pt](https://github.com/ChrisAlderson/nyaa-api-pt) module.\n * Added tests for the controllers.\n * Changed `num_episodes` to `num_seasons` for the `Anime` model.\n\n\n\n<a name=\"2.1.0\"></a>\n## [2.1.0](https://github.com/popcorn-official/popcorn-api/commit/3c94446e39fad43a744cfb30134f26b433dc8e67) (02-08-2016)\n\n### Features\n * Anime! For all you weeaboos.\n * Get a random TV show at `/random/show`.\n * Import & export collection.\n * Moved documentation over to ESDoc.\n * Documentation will now be on GitHub.\n * Added Travis CI.\n * Using ES6 classes instead of factory functions.\n\n\n### Bug Fixes\n   - Fixed search not working correctly.\n   - Fixed MongoDB sorting limitation [#25](https://github.com/popcorn-official/popcorn-api/issues/25).\n\n\n\n<a name=\"2.0.0\"></a>\n## [2.0.0](https://github.com/popcorn-official/popcorn-api/commit/c773837a3932261618db33b2bcbd25474c86cc9a) (20-06-2016)\n\n### Features\n * Get a random movie at `/random/movie`.\n * Added YTS as a movie provider.\n * Movies now support multiple languages.\n * Moved the entire project to ES6 with [Babel](https://babeljs.io/).\n * The API can now be installed globally.\n * Added a command line interface to the API ([See CLI](https://popcorn-official.github.io/popcorn-api/manual/usage.html#global)).\n   * Able to add new show torrents through the CLI.\n   * Able to add new movie torrents through the CLI.\n * Added support for the Gulp build system ([See Gulp](https://popcorn-official.github.io/popcorn-api/manual/usage.html#gulp)).\n * Documentation can be generated with the `npm run docs`.\n * Added option to start with the forever module (`npm run forever`).\n * Changed the projection of movies so it can be used with a [popcorntime provider](https://github.com/ChrisAlderson/butter-provider-movies).\n * (HTTP) Logging is done with the Winston library.\n * Added configuration for JSCS linter.\n * Changed license from GPLv3 to MIT.\n * Moved the library for eztv scraping to its own module over [here](https://github.com/ChrisAlderson/eztv-api-pt).\n * Moved the library for kat scraping to its own module over [here](https://github.com/ChrisAlderson/kat-api-pt).\n * Redid the [README.md](README.md).\n * Redid the kat providers.\n\n\n### Bug Fixes\n * Fixed bug where the cron job was not working.\n * Fixed bug where better movie and show torrents did not update.\n * Fixed bug where `num_seasons` was fluctuating.\n\n\n\n<a name=\"1.1.0\"></a>\n## [1.1.0](https://github.com/popcorn-official/popcorn-api/commit/433dc80daad41228c000a86d607abfb1d092c18b) (20-03-2016)\n\n### Features\n * Movies!\n   * Scrape movies from kat.cr the same way shows work.\n   * Routes to get a list of movies or a specific movie.\n * Added `/logs/error` to see the error log.\n * Added `imdbMap` in `config.js` for correcting imdb ids.\n * Disabled `/shows/search/`, `/shows/update/`, `/shows/last_updated` routes as they don't seem to be used by Popcorn Time.\n * Made scraping EZTV faster by merging the `getShowDetails` and `getAllEpisodes` functions.\n * Required NodeJS version was changed in 1.0.2 to NodeJS v.5.0.0.\n * Fixed several issues with adding content through the CLI.\n\n\n### Bug Fixes\n * Fixed issue where some season based episodes from EZTV where not added (Including [Last Week Tonight with John Oliver](https://eztv.ag/shows/1025/last-week-tonight-with-john-oliver/)).\n * Partially fixed issue with MongoDB limitations to sorting.\n * Status will now be set to `Idle` after scraping is done.\n\n\n\n## [1.0.2](https://github.com/popcorn-official/popcorn-api/commit/cb89f8a0d5d8baf1b87d606b334b125d7ae2cfba) (14-03-2016)\n\n### Features\n * Resets the log files on each scrape.\n * Added `repo` to the index.\n * Removed dependency on Q.\n * Replaced `slug` with `imdb` for getting seasonal metadata from trakt.tv.\n\n### Bug Fixes\n * Now properly updates metadata.\n * Some fixes to prevent ETIMEDOUT.\n\n\n\n<a name=\"1.0.1\"></a>\n## [1.0.1](https://github.com/popcorn-official/popcorn-api/commit/3280e84bdf7def38c24c2012215cec0be3aceaf9) (06-03-2016)\n\n### Bug Fixes\n * Sort by trending.\n\n\n\n<a name=\"1.0.0\"></a>\n## [1.0.0](https://github.com/popcorn-official/popcorn-api/commit/75bb4c9a958cadcf906d3eb25edd3c7650ea349f) (01-03-2016)\n\n### Features\n * Scraping EZTV.ag just like the old API.\n * Scraping kat.cr with 17 different providers.\n * Able to add more providers for kat.cr scraping.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/CONTRIBUTING.md",
    "name": "./CONTRIBUTING.md",
    "content": "# Contributing\n\nSo you're interested in giving us a hand? That's awesome! We've put together\nsome brief guidelines that should help you get started quickly and easily.\n\nThere are lots and lots of ways to get involved, this document covers:\n - [Raising Issues](#raising-issues)\n   - [Report  A Bug](#report-a-bug)\n   - [Feature Requests](#feature-requests)\n   - [Pull Requests](#pull-requests)\n - [Commit Messages](#commit-messages)\n - [Styleguides](#styleguides)\n   - [JavaScript Styleguide](#javascript-styleguide)\n   - [Tests Styleguide](#tests-styleguide)\n   - [Documentation Styleguide](#documentation-styleguide)\n - [Setting up for development](#setting-up-for-development)\n   - [npm scripts](#npm-scripts)\n   - [Git hooks](#git-hooks)\n\n## Raising Issues\n\nIf you're about to raise an issue because you think that you've found a problem\nwith the application, or you'd like to make a request for a new feature in the\ncodebase, or any other reason… please read this first.\n\nThe GitHub issue tracker is the preferred channel for\n[bug reports](#report-a-bug), [feature requests](#feature-requests), and\n[pull requests](#pull-requests) but respect the following restrictions:\n\n* Please **do not** use the issue tracker for personal support requests.\n* Please **do not** derail or troll issues. Keep the discussion on topic and\nrespect the opinions of others.\n\n### Report A Bug\n\nA bug is a _demonstrable problem_ that is caused by the code in the repository.\nGood bug reports are extremely helpful - thank you!\n\nGuidelines for bug reports:\n1. **Use the GitHub issue search** &mdash; check if the issue has already been\nreported.\n2. **Check if the issue has been fixed** &mdash; try to reproduce it using the\nlatest `master` or look for [closed issues](https://github.com/popcorn-official/popcorn-api/issues?q=is%3Aissue+is%3Aclosed).\n3. **Include a screencast if relevant** - Is your issue about a design or front\nend feature or bug? The most helpful thing in the world is if we can *see* what\nyou're talking about. Just drop the picture after writing your issue, it'll be\nuploaded and shown to the developers.\n3. Use the Issue tab on GitHub to start [creating a bug report](https://github.com/popcorn-official/popcorn-api/issues/new).\nA good bug report shouldn't leave others needing to chase you up for more\ninformation. Be sure to include all the possible required details and the steps\nto take to reproduce the issue.\n\n### Feature Requests\n\nFeature requests are welcome. Before you submit one be sure to:\n1. **Use the [GitHub Issues search](https://github.com/popcorn-official/popcorn-api/issues)**\nand check the feature hasn't already been requested.\n2. Take a moment to think about whether your idea fits with the scope and aims\nof the project, or if it might better fit being an app/plugin.\n3. Remember, it's up to *you* to make a strong case to convince the project's\nleaders of the merits of this feature. Please provide as much detail and\ncontext as possible, this means explaining the use case and why it is likely to\nbe common.\n4. Clearly indicate whether this is a feature request for the application\nitself, or for packages like Providers, Metadatas, or other.\n\n### Pull Requests\n\nPull requests are awesome. If you're looking to raise a PR for something which\ndoesn't have an open issue, please think carefully about\n[raising an issue](#report-a-bug) which your PR can close, especially if you're\nfixing a bug. This makes it more likely that there will be enough information\navailable for your PR to be properly tested and merged. To make sure your PR is\naccepted as quickly as possible, you should be sure to have read all the\nguidelines on:\n\n* [Commit Messages](#commit-messages)\n* [Stylesguides](#styleguides)\n\n## Commit Messages\n\nThis project uses the [Conventional Commits](https://conventionalcommits.org/)\nconvention. If you are not familiar with this convention please read about it\nfirst before creating a commit message or a PR.\n\n## Styleguides\n\n### JavaScript Styleguide\n\nAll JavaScript must adhere to [JavaScript Standard Style](http://standardjs.com/).\n\n* Inline `export`s with expressions whenever possible\n  ```js\n  // Use this:\n  export default class ClassName {\n\n  }\n\n  // Instead of:\n  class ClassName {\n\n  }\n  export default ClassName\n  ```\n\n### Tests Styleguide\n\n- Include thoughtfully-worded, well-structured [Mocha](https://mochajs.org/) tests in the `./test` folder.\n- Treat `describe` as a noun or situation.\n- Treat `it` as a statement about state or how an operation changes state.\n\n### Documentation Styleguide\n\n * Use [Markdown](https://daringfireball.net/projects/markdown).\n * Reference methods and classes in markdown with the custom `{}` notation:\n   * Reference classes with `{ClassName}`\n   * Reference instance methods with `{ClassName.methodName}`\n   * Reference class methods with `{ClassName#methodName}`\n\n## Setting up for development\n\nTo setup your local machine to start working on the project you can follow these\nsteps:\n\n1. Install [MongoDB](https://www.mongodb.com/) including `mongoexport` and `mongoimport`\n2. Install [NodeJS](https://nodejs.org/) (at least Node v7.10.1 or greater)\n3. Clone the repository with: `git clone https://github.com/popcorn-official/popcorn-api.git`\n4. Install dependencies `npm i`\n5. Install the flow-typed libraries with `npm run flow-typed`\n\n### npm scripts\n\nThe following [`npm-scripts`](https://docs.npmjs.com/misc/scripts) are available in order to help you with the\ndevelopment of the project.\n\n```\n $ npm run build    # Transform the code with 'babel'\n $ npm run docs     # Generate the documentation with 'esdoc'\n $ npm run debug    # Run the applicaiton in debug mode\n $ npm run dev      # Run the application in development mode\n $ npm run flow     # Check flow typings\n $ npm run lint     # Check javascript style\n $ npm run test     # Run unit tests\n```\n\n### Git hooks\n\nThe following `git` hooks are available to ensure the changes you are about to\nmake follow the [styleguides](#styleguides) and make sure your changes pass the\ntests.\n\n```\npre-commit          # npm run lint && npm run flow\npre-push            # npm run test\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/CODE_OF_CONDUCT.md",
    "name": "./CODE_OF_CONDUCT.md",
    "content": "# Contributor Covenant Code of Conduct\n\n - [Our Pledge](#our-pledge)\n - [Our Standards](#our-standards)\n - [Our Responsibilities](#our-responsibilities)\n - [Scope](#scope)\n - [Enforcement](#enforcement)\n - [Attribution](#attribution)\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age,\nbody size, disability, ethnicity, gender identity and expression, level of\nexperience, nationality, personal appearance, race, religion, or sexual\nidentity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n - Using welcoming and inclusive language\n - Being respectful of differing viewpoints and experiences\n - Gracefully accepting constructive criticism\n - Focusing on what is best for the community\n - Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n - The use of sexualized language or imagery and unwelcome sexual attention or advances\n - Trolling, insulting/derogatory comments, and personal or political attacks\n - Public or private harassment\n - Publishing others' private information, such as a physical or electronic address, without explicit permission\n - Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an\nappointed representative at an online or offline event. Representation of a\nproject may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at `hello@popcorntime.sh`. The\nproject team will review and investigate all complaints, and will respond in a\nway that it deems appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an\nincident. Further details of specific enforcement policies may be posted\nseparately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at http://contributor-covenant.org/version/1/4\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 334,
    "kind": "testFile",
    "name": "test/controllers/ContentController.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport dotenv from 'dotenv'\n\nimport { expect } from 'chai'\nimport express, { type $Application } from 'express'\nimport request from 'supertest'\nimport sinon from 'sinon'\nimport {\n  ContentService,\n  Database,\n  PopApi\n} from 'pop-api'\nimport type { MongooseModel } from 'mongoose'\n\nimport ContentController from '../../src/controllers/ContentController'\nimport testAnime from '../data/animeshow'\nimport testMovie from '../data/movie'\nimport testShow from '../data/show'\nimport {\n  AnimeShow as Anime,\n  Movie,\n  Show\n} from '../../src/models'\nimport { name } from '../../package.json'\ndotenv.config()\n\n/**\n  * Test suite for fetching content from the database.\n  * @param {!string} content - The content to test.\n  * @param {!Model} Model - The model object of the content to fetch.\n  * @param {!Object} testContent - The test content to test with.\n  * @returns {undefined}\n  */\nfunction testContentController(\n  content: string,\n  Model: MongooseModel,\n  testContent: Object\n): void {\n  /** @test {ContentController} */\n  describe('ContentController', () => {\n    /**\n     * The express instance to test with.\n     * @type {Express}\n     */\n    let app: $Application\n\n    /**\n      * The base content controller object to test.\n      * @type {ContentController}\n      */\n    let contentController: ContentController\n\n    /**\n      * The id of the content to get.\n      * @type {string}\n      */\n    let id: string\n\n    /**\n     * The database middleware from `pop-api`.\n     * @type {Database}\n     */\n    let database: Database\n\n    /**\n     * The content service for the controller.\n     * @type {ContentService}\n     */\n    let service: ContentService\n\n    /**\n      * Hook for setting up the Controller tests.\n      * @type {Function}\n      */\n    before(done => {\n      app = express()\n\n      service = new ContentService({\n        Model,\n        projection: {\n          imdb_id: 1\n        }\n      })\n      contentController = new ContentController({\n        basePath: content,\n        service\n      })\n      contentController.registerRoutes(app)\n\n      database = new Database(PopApi, {\n        database: name\n      })\n      database.connect()\n        .then(() => done())\n        .catch(done)\n    })\n\n    /** @test {ContentController#constructor} */\n    it('should check the attributes of the ContentController', () => {\n      expect(contentController.basePath).to.be.a('string')\n      expect(contentController.basePath).to.equal(content)\n      expect(contentController.service).to.be.an('object')\n      expect(contentController.service).to.equal(service)\n    })\n\n    /** @test {ContentController#registerRoutes} */\n    it('should not throw an error when calling the implemented registerRoutes method', () => {\n      expect(contentController.registerRoutes)\n        .to.not.throw('Using default method: \\'registerRoutes\\'')\n    })\n\n    /** @test {ContentController} */\n    describe('with an empty database', () => {\n      /**\n        * Hook for setting up the AudioController tests.\n        * @type {Function}\n        */\n      before(done => {\n        Model.remove({})\n          .then(() => done())\n          .catch(done)\n      })\n\n      /** @test {ContentController#getContents} */\n      it(`should get a 204 status from the GET [/${content}s] route`, done => {\n        request(app).get(`/${content}s`)\n          .expect(204)\n          .then(() => done())\n          .catch(done)\n      })\n\n      /** @test {ContentController#getPage} */\n      it(`should get a 204 status from the GET [/${content}s/:page] route`, done => {\n        request(app).get(`/${content}s/1`)\n          .expect(204)\n          .then(() => done())\n          .catch(done)\n      })\n\n      /** @test {ContentController#getContent} */\n      it(`should get a 204 status from the GET [/${content}/:id] route`, done => {\n        request(app).get(`/${content}/${id}`)\n          .expect(204)\n          .then(() => done())\n          .catch(done)\n      })\n\n      /** @test {ContentController#getRandomContent} */\n      it(`should get a 204 status from the GET [/random/${content}] route`, done => {\n        request(app).get(`/random/${content}`)\n          .expect(204)\n          .then(() => done())\n          .catch(done)\n      })\n    })\n\n    /** @test {ContentController} */\n    describe('with a filled database', () => {\n      /**\n        * The query object passed along to the 'getAudios' tests.\n        * @type {[type]}\n        */\n      let query: Object\n\n      /**\n        * Hook for setting up the AudioController tests.\n        * @type {Function}\n        */\n      before(done => {\n        query = {\n          keywords: 'String',\n          genre: 'all',\n          order: -1\n        }\n\n        new Model(testContent).save()\n          .then(() => done())\n          .catch(done)\n      })\n\n      /** @test {ContentController#getContents} */\n      it(`should get a 200 status from the GET [/${content}] route`, done => {\n        request(app).get(`/${content}s`)\n          .expect(200)\n          .then(() => done())\n          .catch(done)\n      })\n\n      /** @test {ContentController#getPage} */\n      it(`should get a 200 status from the GET [/${content}s/:page] route`, done => {\n        request(app).get(`/${content}s/1`).query({\n          genre: 'sci-fi'\n        }).expect(200)\n          .then(res => {\n            const random = Math.floor(Math.random() * res.body.length)\n            id = res.body[random].imdb_id\n\n            done()\n          }).catch(done)\n      })\n\n      /**\n       * Helper function to test the `/contents/:page` route.\n       * @param {!string} sort - The sorting method to use.\n       * @returns {undefined}\n       */\n      function testGetPage(sort: string): void {\n        /** @test {ContentController#getPage} */\n        it(`should get a 200 status from the GET [/${content}s/:page] route`, done => {\n          request(app).get(`/${content}s/1`).query({\n            ...query,\n            genre: 'string',\n            sort\n          }).expect(200)\n            .then(() => done())\n            .catch(done)\n        })\n      }\n\n      // Execute the tests.\n      [\n        'faulty',\n        'name',\n        'rating',\n        'released',\n        'trending',\n        'year'\n      ].map(testGetPage)\n\n      /** @test {ContentController#getContent} */\n      it(`should get a 200 status from the GET [/${content}/:id] route`, done => {\n        request(app).get(`/${content}/${id}`)\n          .expect(200)\n          .then(() => done())\n          .catch(done)\n      })\n\n      /** @test {ContentController#getRandomContent} */\n      it(`should get a 200 status from the GET [/random/${content}] route`, done => {\n        request(app).get(`/random/${content}`)\n          .expect(200)\n          .then(() => done())\n          .catch(done)\n      })\n    })\n\n    /** @test {ContentController} */\n    describe('will throw errors', () => {\n      /** @test {ContentController#getContents} */\n      it(`should get a 500 status from the GET [/${content}s] route`, done => {\n        const stub = sinon.stub(Model, 'count')\n        stub.rejects()\n\n        request(app).get(`/${content}s`)\n          .expect(500)\n          .then(() => {\n            stub.restore()\n            done()\n          })\n          .catch(done)\n      })\n\n      /** @test {ContentController#getPage} */\n      it(`should get a 500 status from the GET [/${content}s/:page] route`, done => {\n        const stub = sinon.stub(Model, 'aggregate')\n        stub.rejects()\n\n        request(app).get(`/${content}s/1`)\n          .expect(500)\n          .then(() => {\n            stub.restore()\n            done()\n          })\n          .catch(done)\n      })\n\n      /** @test {ContentController#getContent} */\n      it(`should get a 500 status from the GET [/${content}/:id] route`, done => {\n        const stub = sinon.stub(Model, 'findOne')\n        stub.rejects()\n\n        request(app).get(`/${content}/${id}`)\n          .expect(500)\n          .then(() => {\n            stub.restore()\n            done()\n          })\n          .catch(done)\n      })\n\n      /** @test {ContentController#getRandomContent} */\n      it(`should get a 500 status from the GET [/random/${content}] route`, done => {\n        const stub = sinon.stub(Model, 'aggregate')\n        stub.rejects()\n\n        request(app).get(`/random/${content}`)\n          .expect(500)\n          .then(() => {\n            stub.restore()\n            done()\n          })\n          .catch(done)\n      })\n    })\n\n    /**\n      * Hook for tearing down the AudioController tests.\n      * @type {Function}\n      */\n    after(done => {\n      Model.findOneAndRemove({\n        _id: testContent.id\n      }).exec()\n        .then(() => database.disconnect())\n        .then(() => done())\n        .catch(done)\n    })\n  })\n}\n\nconst itemTypes = [\n  ['anime', Anime, testAnime],\n  ['movie', Movie, testMovie],\n  ['show', Show, testShow]\n]\nitemTypes.map(i => testContentController(...i))\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/controllers/ContentController.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/controllers/ContentController.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0",
    "access": null,
    "description": "ContentController",
    "lineNumber": 42,
    "testTargets": [
      "ContentController"
    ]
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/controllers/ContentController.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.it1",
    "access": null,
    "description": "should check the attributes of the ContentController",
    "lineNumber": 101,
    "testTargets": [
      "ContentController#constructor"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/controllers/ContentController.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.it2",
    "access": null,
    "description": "should not throw an error when calling the implemented registerRoutes method",
    "lineNumber": 109,
    "testTargets": [
      "ContentController#registerRoutes"
    ]
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/controllers/ContentController.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe3",
    "access": null,
    "description": "with an empty database",
    "lineNumber": 115,
    "testTargets": [
      "ContentController"
    ]
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe3.it4",
    "access": null,
    "lineNumber": 127,
    "testTargets": [
      "ContentController#getContents"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe3.it5",
    "access": null,
    "lineNumber": 135,
    "testTargets": [
      "ContentController#getPage"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe3.it6",
    "access": null,
    "lineNumber": 143,
    "testTargets": [
      "ContentController#getContent"
    ]
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe3.it7",
    "access": null,
    "lineNumber": 151,
    "testTargets": [
      "ContentController#getRandomContent"
    ]
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/controllers/ContentController.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe8",
    "access": null,
    "description": "with a filled database",
    "lineNumber": 160,
    "testTargets": [
      "ContentController"
    ]
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe8.it9",
    "access": null,
    "lineNumber": 184,
    "testTargets": [
      "ContentController#getContents"
    ]
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe8.it10",
    "access": null,
    "lineNumber": 192,
    "testTargets": [
      "ContentController#getPage"
    ]
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe8.it11",
    "access": null,
    "lineNumber": 211,
    "testTargets": [
      "ContentController#getPage"
    ]
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe8.it12",
    "access": null,
    "lineNumber": 233,
    "testTargets": [
      "ContentController#getContent"
    ]
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe8.it13",
    "access": null,
    "lineNumber": 241,
    "testTargets": [
      "ContentController#getRandomContent"
    ]
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/controllers/ContentController.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe14",
    "access": null,
    "description": "will throw errors",
    "lineNumber": 250,
    "testTargets": [
      "ContentController"
    ]
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe14.it15",
    "access": null,
    "lineNumber": 252,
    "testTargets": [
      "ContentController#getContents"
    ]
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe14.it16",
    "access": null,
    "lineNumber": 266,
    "testTargets": [
      "ContentController#getPage"
    ]
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe14.it17",
    "access": null,
    "lineNumber": 280,
    "testTargets": [
      "ContentController#getContent"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/controllers/ContentController.spec.js~describe0.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ContentController.spec.js~describe0.describe14.it18",
    "access": null,
    "lineNumber": 294,
    "testTargets": [
      "ContentController#getRandomContent"
    ]
  },
  {
    "__docId__": 354,
    "kind": "testFile",
    "name": "test/controllers/ExportControler.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport express, { type $Application } from 'express'\nimport fs from 'fs'\nimport mkdirp from 'mkdirp'\nimport request from 'supertest'\nimport { join } from 'path'\n\nimport ExportController from '../../src/controllers/ExportController'\n\n/** @test {ExportController} */\ndescribe('ExportController', () => {\n  /**\n   * The express instance to test with.\n   * @type {Express}\n   */\n  let app: $Application\n\n  /**\n   * The export controller to test.\n   * @type {ExportController}\n   */\n  let exportController: ExportController\n\n  /**\n   * Hook for setting up the ExportController tests.\n   * @type {Function}\n   */\n  before(() => {\n    app = express()\n\n    exportController = new ExportController()\n    exportController.registerRoutes(app)\n  })\n\n  /** @test {ExportController} */\n  describe('will work as expected', () => {\n    /**\n     * The file to be downloaded.\n     * @type {string}\n     */\n    let file: string\n\n    /**\n     * The temporary directory to hold the logs.\n     * @type {string}\n     */\n    let tempDir: string\n\n    /**\n     * Hook for setting up the ExportController tests.\n     * @type {Function}\n     */\n    before(() => {\n      process.env.TEMP_DIR = process.env.TEMP_DIR || join(...[\n        __dirname,\n        '..',\n        '..',\n        'tmp'\n      ])\n      tempDir = process.env.TEMP_DIR\n      if (!fs.existsSync(tempDir)) {\n        mkdirp.sync(tempDir)\n      }\n\n      file = join(...[\n        tempDir,\n        'animes.json'\n      ])\n      fs.createWriteStream(file).end()\n    })\n\n    /**\n     * Helper function to test the `/exports/:collection` route.\n     * @param {!boolean} tempDir - Whenever the temporary directory needs to\n     * exists.\n     * @returns {undefined}\n     */\n    function testExportCollection(tempDir: boolean): void {\n      /** @test {ExportController#getExport} */\n      it('should get a 200 status from the GET [/exports/:collection] route', done => {\n        if (tempDir) {\n          delete process.env.TEMP_DIR\n        }\n\n        request(app).get('/exports/anime')\n          .expect(200)\n          .then(() => done())\n          .catch(done)\n      })\n    }\n\n    // Execute the tests.\n    [true, false].map(testExportCollection)\n\n    /** @test {ExportController#getExport} */\n    it('should get a 200 status from the GET [/exports/:collection] route', done => {\n      request(app).get('/exports/animes')\n        .expect(200)\n        .then(() => done())\n        .catch(done)\n    })\n\n    /**\n     * Hook for teaing down the ExportController tests.\n     * @type {Function}\n     */\n    after(done => {\n      fs.unlink(file, err => {\n        if (err) {\n          done(err)\n        }\n\n        done()\n      })\n    })\n  })\n\n  /** @test {ExportController} */\n  describe('will throw errors', () => {\n    /** @test {ExportController#getExport} */\n    it('should get a 500 status from the GET [/exports/:collection] route', done => {\n      request(app).get('/exports/anime')\n        .expect(500)\n        .then(() => done())\n        .catch(done)\n    })\n\n    /** @test {ExportController#getExport} */\n    it('should get a 500 status form the GET [/exports/:collection] route', done => {\n      request(app).get('/exports/faulty')\n        .expect(500)\n        .then(() => done())\n        .catch(done)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/controllers/ExportControler.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/controllers/ExportControler.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/controllers/ExportControler.spec.js~describe19",
    "access": null,
    "description": "ExportController",
    "lineNumber": 13,
    "testTargets": [
      "ExportController"
    ]
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "test/controllers/ExportControler.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ExportControler.spec.js~describe19.describe20",
    "access": null,
    "description": "will work as expected",
    "lineNumber": 38,
    "testTargets": [
      "ExportController"
    ]
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/controllers/ExportControler.spec.js~describe19.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ExportControler.spec.js~describe19.describe20.it21",
    "access": null,
    "description": "should get a 200 status from the GET [/exports/:collection] route",
    "lineNumber": 82,
    "testTargets": [
      "ExportController#getExport"
    ]
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/controllers/ExportControler.spec.js~describe19.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ExportControler.spec.js~describe19.describe20.it22",
    "access": null,
    "description": "should get a 200 status from the GET [/exports/:collection] route",
    "lineNumber": 98,
    "testTargets": [
      "ExportController#getExport"
    ]
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/controllers/ExportControler.spec.js~describe19",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/ExportControler.spec.js~describe19.describe23",
    "access": null,
    "description": "will throw errors",
    "lineNumber": 121,
    "testTargets": [
      "ExportController"
    ]
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/controllers/ExportControler.spec.js~describe19.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ExportControler.spec.js~describe19.describe23.it24",
    "access": null,
    "description": "should get a 500 status from the GET [/exports/:collection] route",
    "lineNumber": 123,
    "testTargets": [
      "ExportController#getExport"
    ]
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/controllers/ExportControler.spec.js~describe19.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/ExportControler.spec.js~describe19.describe23.it25",
    "access": null,
    "description": "should get a 500 status form the GET [/exports/:collection] route",
    "lineNumber": 131,
    "testTargets": [
      "ExportController#getExport"
    ]
  },
  {
    "__docId__": 362,
    "kind": "testFile",
    "name": "test/controllers/IndexController.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\nimport express, { type $Application } from 'express'\nimport fs from 'fs'\nimport mkdirp from 'mkdirp'\nimport request from 'supertest'\nimport sinon from 'sinon'\nimport {\n  Database,\n  PopApi\n} from 'pop-api'\nimport { PopApiScraper } from 'pop-api-scraper'\nimport { join } from 'path'\n\nimport IndexController from '../../src/controllers/IndexController'\nimport { name } from '../../package.json'\nimport { Show } from '../../src/models'\n\n/** @test {IndexController} */\ndescribe('IndexController', () => {\n  /**\n   * The express instance to test with.\n   * @type {Express}\n   */\n  let app: $Application\n\n  /**\n   * The database middleware from `pop-api`.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * The index controller to test.\n   * @type {IndexController}\n   */\n  let indexController: IndexController\n\n  /**\n   * The temporary directory to hold the logs.\n   * @type {string}\n   */\n  let tempDir: string\n\n  /**\n   * Hook for setting up the IndexController tests.\n   * @type {Function}\n   */\n  before(done => {\n    app = express()\n\n    process.env.TEMP_DIR = process.env.TEMP_DIR || join(...[\n      __dirname,\n      '..',\n      '..',\n      'tmp'\n    ])\n    tempDir = process.env.TEMP_DIR\n    if (!fs.existsSync(tempDir)) {\n      mkdirp.sync(tempDir)\n    }\n\n    fs.createWriteStream(join(...[\n      tempDir,\n      `${name}.log`\n    ])).end()\n\n    PopApi.use(PopApiScraper, {\n      statusPath: join(...[tempDir, 'status.json']),\n      updatedPath: join(...[tempDir, 'updated.json'])\n    })\n\n    indexController = new IndexController()\n    indexController.registerRoutes(app)\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {IndexController#registerRoutes} */\n  it('should not throw an error when calling the implemented registerRoutes methods', () => {\n    expect(indexController.registerRoutes)\n      .to.not.throw('Using default method: \\'registerRoutes\\'')\n  })\n\n  /** @test {IndexController._Server} */\n  it('should test if IndexController has a _Server', () => {\n    expect(IndexController._Server).to.exist\n    expect(IndexController._Server).to.be.a('string')\n  })\n\n  /** @test {IndexController} */\n  describe('will work as expected', () => {\n    /**\n     * Helper function to test the `/logs/error` route.\n     * @param {!boolean} tempDir - Whenever the temporary directory needs to\n     * exists.\n     * @returns {undefined}\n     */\n    function testLogsError(tempDir: boolean): void {\n      /** @test {IndexController#getErrorLog} */\n      it('should get a 200 status from the GET [/logs/error] route', done => {\n        if (tempDir) {\n          delete process.env.TEMP_DIR\n        }\n\n        request(app).get('/logs/error')\n          .expect(200)\n          .then(() => done())\n          .catch(done)\n      })\n    }\n\n    // Execute the tests.\n    [true, false].map(testLogsError)\n\n    /** @test {IndexController#getIndex} */\n    it('should get a 200 status from the GET [/status] route', done => {\n      request(app).get('/status')\n        .expect(200)\n        .then(res => {\n          const { body } = res\n          expect(body).to.exist\n          expect(body.repo).to.exist\n          expect(body.server).to.exist\n          expect(body.status).to.exist\n          expect(body.totalAnimes).to.exist\n          expect(body.totalMovies).to.exist\n          expect(body.totalShows).to.exist\n          expect(body.updated).to.exist\n          expect(body.uptime).to.exist\n          expect(body.version).to.exist\n          expect(body.commit).to.exist\n\n          done()\n        }).catch(done)\n    })\n\n    /**\n     * Hook for tearing down the IndexController tests.\n     * @type {Function}\n     */\n    after(() => {\n      const file = `${name}.log`\n      const filePath = join(...[tempDir, file])\n\n      fs.unlinkSync(filePath)\n    })\n  })\n\n  /** @test {IndexController} */\n  describe('will throw errors', () => {\n    /** @test {IndexController#getErrorLog} */\n    it('should get a 500 status from the GET [/logs/error] route', done => {\n      request(app).get('/logs/error')\n        .expect(500)\n        .then(() => done())\n        .catch(done)\n    })\n\n    /** @test {IndexController#getIndex} */\n    it('should get a 500 status form the  GET [/status] route', done => {\n      const exec: Object = {\n        exec() {\n          return Promise.reject(sinon.stub().callsArg(0).throws())\n        }\n      }\n      const stub = sinon.stub(Show, 'count')\n      stub.returns(exec)\n\n      request(app).get('/status')\n        .expect(500)\n        .then(() => {\n          stub.restore()\n          done()\n        })\n        .catch(done)\n    })\n  })\n\n  /**\n   * Hook for tearing down the IndexController tests.\n   * @type {Function}\n   */\n  after(done => {\n    database.disconnect()\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/controllers/IndexController.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "test/controllers/IndexController.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26",
    "access": null,
    "description": "IndexController",
    "lineNumber": 22,
    "testTargets": [
      "IndexController"
    ]
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/controllers/IndexController.spec.js~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26.it27",
    "access": null,
    "description": "should not throw an error when calling the implemented registerRoutes methods",
    "lineNumber": 87,
    "testTargets": [
      "IndexController#registerRoutes"
    ]
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/controllers/IndexController.spec.js~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26.it28",
    "access": null,
    "description": "should test if IndexController has a _Server",
    "lineNumber": 93,
    "testTargets": [
      "IndexController._Server"
    ]
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/controllers/IndexController.spec.js~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26.describe29",
    "access": null,
    "description": "will work as expected",
    "lineNumber": 99,
    "testTargets": [
      "IndexController"
    ]
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/controllers/IndexController.spec.js~describe26.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26.describe29.it30",
    "access": null,
    "description": "should get a 200 status from the GET [/logs/error] route",
    "lineNumber": 108,
    "testTargets": [
      "IndexController#getErrorLog"
    ]
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/controllers/IndexController.spec.js~describe26.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26.describe29.it31",
    "access": null,
    "description": "should get a 200 status from the GET [/status] route",
    "lineNumber": 124,
    "testTargets": [
      "IndexController#getIndex"
    ]
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "test/controllers/IndexController.spec.js~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26.describe32",
    "access": null,
    "description": "will throw errors",
    "lineNumber": 158,
    "testTargets": [
      "IndexController"
    ]
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/controllers/IndexController.spec.js~describe26.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26.describe32.it33",
    "access": null,
    "description": "should get a 500 status from the GET [/logs/error] route",
    "lineNumber": 160,
    "testTargets": [
      "IndexController#getErrorLog"
    ]
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/controllers/IndexController.spec.js~describe26.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/controllers/IndexController.spec.js~describe26.describe32.it34",
    "access": null,
    "description": "should get a 500 status form the  GET [/status] route",
    "lineNumber": 168,
    "testTargets": [
      "IndexController#getIndex"
    ]
  },
  {
    "__docId__": 372,
    "kind": "testFile",
    "name": "test/middleware/Cli.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport inquirer from 'inquirer'\nimport mkdirp from 'mkdirp'\nimport sinon from 'sinon'\nimport { expect } from 'chai'\nimport { join } from 'path'\nimport { PopApi } from 'pop-api'\n\nimport { Cli } from '../../src/middleware'\nimport {\n  name,\n  version\n} from '../../package.json'\n\n/** @test {Cli} */\ndescribe('Cli', () => {\n  /**\n   * The Cli object to test\n   * @type {Cli}\n   */\n  let cli: Cli\n\n  /**\n   * Stub for `console.error'\n   * @type {Object}\n   */\n  let error: Object\n\n  /**\n   * Stub for `console.info'\n   * @type {Object}\n   */\n  let info: Object\n\n  /**\n   * Stub for `process.exit'\n   * @type {Object}\n   */\n  let exit: Object\n\n  /**\n   * The temporary directory to test with.\n   * @type {string}\n   */\n  let tempDir: string\n\n  /**\n   * Hook for setting up the CLI tests.\n   * @type {Function}\n   */\n  before(() => {\n    exit = sinon.stub(process, 'exit')\n    error = sinon.stub(console, 'error')\n    info = sinon.stub(console, 'info')\n\n    if (!global.logger) {\n      global.logger = {\n        info() {},\n        error() {},\n        debug() {},\n        warn() {},\n        log() {}\n      }\n    }\n\n    process.env.TEMP_DIR = process.env.TEMP_DIR = join(...[\n      __dirname,\n      '..',\n      '..',\n      'tmp'\n    ])\n    tempDir = process.env.TEMP_DIR\n    mkdirp.sync(tempDir)\n\n    cli = new Cli(PopApi, {\n      argv: ['', '', '-m', 'pretty'],\n      name,\n      version\n    })\n  })\n\n  /** @test {Cli._Name} */\n  it('should check the static attributes of the Cli', () => {\n    expect(Cli._Name).to.exist\n    expect(Cli._Name).to.be.a('string')\n  })\n\n  /** @test {Cli#constructor} */\n  it('should create a new Cli instance without arguments to parse', () => {\n    const cli = new Cli(PopApi, {\n      name,\n      version\n    })\n    expect(cli).to.be.an('object')\n  })\n\n  /** @test {Cli#constructor} */\n  it('should check the attributes of the Cli', () => {\n    expect(cli.program).to.exist\n    expect(cli.program).to.be.an('object')\n    expect(cli.name).to.exist\n    expect(cli.name).to.be.a('string')\n    expect(cli.database).to.exist\n    expect(cli.database).to.be.an('object')\n  })\n\n  /** @test {Cli#initOptions} */\n  it('should initiate the options for the Cli', () => {\n    const val = cli.initOptions(version)\n    expect(val).to.be.an('object')\n  })\n\n  /** @test {Cli#getHelp} */\n  it('should get the help message', () => {\n    const val = cli.getHelp()\n    expect(val).to.be.an('array')\n  })\n\n  /** @test {Cli#_movieTorrent} */\n  it('should construct a movie torrent object', () => {\n    const torrent = cli._movieTorrent('magnet', {\n      seeds: 1,\n      peers: 1\n    }, {})\n    expect(torrent).to.be.an('object')\n  })\n\n  /** @test {Cli#_showTorrent} */\n  it('should construct a show torrent object', () => {\n    const torrent = cli._showTorrent('magnet', {\n      seeds: 1,\n      peers: 1\n    })\n    expect(torrent).to.be.an('object')\n  })\n\n  /**\n   * A helper function to test the '_'getTorrent' method.\n   * @param {!string} type - The type to test.\n   * @returns {undefined}\n   */\n  function testGetTorrent(type: string): void {\n    /** @test {Cli#_getTorrent} */\n    it('should get a torrent from a link', done => {\n      const link = 'magnet:?xt=urn:btih:9228628504cc40efa57bf38e85c9e3bd2c572b5b&dn=archlinux-2017.10.01-x86_64.iso&tr=udp://tracker.archlinux.org:6969&tr=http://tracker.archlinux.org:6969/announce'\n      cli._getTorrent(link, type).then(res => {\n        expect(res).to.be.an('object')\n        done()\n      }).catch(done)\n    })\n  }\n\n  // Execute the tests.\n  ['movie', 'tvshow'].map(testGetTorrent)\n\n  /** @test {Cli#_getTorrent} */\n  it('should fail to get a torrent from a number', done => {\n    cli._getTorrent('', 'movie')\n      .then(done)\n      .catch(err => {\n        expect(err).to.be.an('Error')\n        done()\n      })\n  })\n\n  /**\n   * Helper function to test the '_moviePrompt' method.\n   * @param {!boolean} isAnime - Use the anime model.\n   * @returns {undefined}\n   */\n  function testMoviePrompt(isAnime: boolean): void {\n    /** @test {Cli#_moviePrompt} */\n    it('should run the movie content prompt', done => {\n      const stub = sinon.stub(inquirer, 'prompt')\n      stub.resolves({\n        imdb: 'tt1234567',\n        torrent: 'magnet:?xt=urn:btih:9228628504cc40efa57bf38e85c9e3bd2c572b5b&dn=archlinux-2017.10.01-x86_64.iso&tr=udp://tracker.archlinux.org:6969&tr=http://tracker.archlinux.org:6969/announce',\n        quality: '720p',\n        language: 'en'\n      })\n\n      cli._moviePrompt('movie', isAnime).then(res => {\n        expect(res).to.be.undefined\n        stub.restore()\n\n        done()\n      }).catch(done)\n    })\n  }\n\n  // Execute the tests.\n  [false, true].map(testMoviePrompt)\n\n  /** @test {Cli#_moviePrompt} */\n  it('should catch an error when running the movie content prompt', done => {\n    const stub = sinon.stub(inquirer, 'prompt')\n    stub.resolves({})\n\n    cli._moviePrompt('movie').then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Helper function to test the '_showPrompt' method.\n   * @param {!boolean} isAnime - Use the anime model.\n   * @returns {undefined}\n   */\n  function testShowPrompt(isAnime: boolean): void {\n    /** @test {Cli#_showPrompt} */\n    it('should run the show content prompt', done => {\n      const stub = sinon.stub(inquirer, 'prompt')\n      stub.resolves({\n        imdb: 'tt1234567',\n        torrent: 'magnet:?xt=urn:btih:9228628504cc40efa57bf38e85c9e3bd2c572b5b&dn=archlinux-2017.10.01-x86_64.iso&tr=udp://tracker.archlinux.org:6969&tr=http://tracker.archlinux.org:6969/announce',\n        quality: '720p',\n        season: 1,\n        episode: 1\n      })\n\n      cli._showPrompt('show', isAnime).then(res => {\n        expect(res).to.be.undefined\n        stub.restore()\n\n        done()\n      }).catch(done)\n    })\n  }\n\n  // Execute the tests.\n  [false, true].map(testShowPrompt)\n\n  /** @test {Cli#_showPrompt} */\n  it('should catch an error when running the show content prompt', done => {\n    const stub = sinon.stub(inquirer, 'prompt')\n    stub.resolves({})\n\n    cli._showPrompt('show').then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Helper function to test the `_content` method.\n   * @param {!string} t - The type of content to test.\n   * @returns {undefined}\n   */\n  function testContent(t: string): void {\n    /** @test {Cli#_content} */\n    it(`should run the --content option with the '${t}'`, done => {\n      const stub = sinon.stub(inquirer, 'prompt')\n      stub.resolves({\n        torrent: 'magnet:?xt=urn:btih:9228628504cc40efa57bf38e85c9e3bd2c572b5b&dn=archlinux-2017.10.01-x86_64.iso&tr=udp://tracker.archlinux.org:6969&tr=http://tracker.archlinux.org:6969/announce'\n      })\n\n      cli._content(t).then(() => {\n        stub.restore()\n        done()\n      }).catch(done)\n    })\n  }\n\n  [\n    'animemovie',\n    'animeshow',\n    'movie',\n    'show'\n  ].map(testContent)\n\n  /** @test {Cli#_content} */\n  it('should run the --content option with the \\'null\\'', done => {\n    cli._content('').then(res => {\n      expect(res).to.be.undefined\n      done()\n    }).catch(done)\n  })\n\n  /** @test {Cli#_export} */\n  it('should run the --export option with the \\'show\\' option', done => {\n    delete process.env.TEMP_DIR\n    cli._export('show').then(res => {\n      expect(res).to.be.undefined\n      done()\n    }).catch(done)\n  })\n\n  /** @test {CLI#_export} */\n  it('should run the --export option and reject the result', done => {\n    const stub = sinon.stub(cli.database, 'exportFile')\n    stub.rejects()\n\n    const e = join(...[\n      __dirname,\n      '..',\n      '..',\n      'package.json'\n    ])\n    cli._export(e).then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {Cli#_import} */\n  it('should run the --import option with a non-existing file as input', done => {\n    cli._import('/path/to/faulty/file.json').then(res => {\n      expect(res).to.be.undefined\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Helper method to test the `_import` method.\n   * @param {!boolean} confirm - The user input.\n   * @returns {void}\n   */\n  function testImport(confirm: boolean): void {\n    const msg = confirm ? 'confirms' : 'cancels'\n\n    /** @test {Cli#_import} */\n    it(`should run the --import option with a file as input and the user ${msg}`, done => {\n      const stub = sinon.stub(inquirer, 'prompt')\n      stub.resolves({ confirm })\n\n      const i = join(...[\n        tempDir,\n        'shows.json'\n      ])\n      cli._import(i).then(res => {\n        expect(res).to.be.undefined\n\n        stub.restore()\n        done()\n      }).catch(done)\n    })\n  }\n\n  // Execute the tests.\n  [true, false].map(testImport)\n\n  /** @test {CLI#_import} */\n  it('should run the --import option and reject the result', done => {\n    const stub = sinon.stub(inquirer, 'prompt')\n    stub.rejects()\n\n    const i = join(...[\n      __dirname,\n      '..',\n      '..',\n      'package.json'\n    ])\n    cli._import(i).then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {Cli#_run} */\n  it('should invoke the --content option', done => {\n    const stub = sinon.stub(inquirer, 'prompt')\n    stub.resolves()\n\n    cli.run({}, [\n      '',\n      '',\n      '--content',\n      'show'\n    ]).then(res => {\n      expect(res).to.be.undefined\n      cli.program.content = false\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {Cli#_run} */\n  it('should invoke the --export', done => {\n    const stub = sinon.stub(cli.database, 'exportFile')\n    stub.resolves()\n\n    cli.run({}, [\n      '',\n      '',\n      '--export',\n      'show'\n    ]).then(res => {\n      expect(res).to.be.undefined\n      cli.program.export = false\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {Cli#_run} */\n  it('should invoke the --import option', done => {\n    const stub = sinon.stub(inquirer, 'prompt')\n    stub.resolves()\n\n    cli.run({}, [\n      '',\n      '',\n      '--import',\n      join(...[\n        tempDir,\n        'shows.json'\n      ])\n    ]).then(res => {\n      expect(res).to.be.undefined\n      cli.program.import = false\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {Cli#_run} */\n  it('should invoke the --start option', () => {\n    const res = cli.run({}, [\n      '',\n      '',\n      '--start'\n    ])\n\n    expect(res).to.be.undefined\n    cli.program.start = false\n  })\n\n  /** @test {Cli#_run} */\n  it('should not parse the arguments since there are none', () => {\n    const stub = sinon.stub(cli.program, 'outputHelp')\n\n    const res = cli.run({})\n    expect(res).to.be.undefined\n\n    stub.restore()\n  })\n\n  /**\n   * Hook for tearing down the Cli tests.\n   * @type {Function}\n   */\n  after(() => {\n    error.restore()\n    info.restore()\n    exit.restore()\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/middleware/Cli.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "test/middleware/Cli.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35",
    "access": null,
    "description": "Cli",
    "lineNumber": 18,
    "testTargets": [
      "Cli"
    ]
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it36",
    "access": null,
    "description": "should check the static attributes of the Cli",
    "lineNumber": 85,
    "testTargets": [
      "Cli._Name"
    ]
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it37",
    "access": null,
    "description": "should create a new Cli instance without arguments to parse",
    "lineNumber": 91,
    "testTargets": [
      "Cli#constructor"
    ]
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it38",
    "access": null,
    "description": "should check the attributes of the Cli",
    "lineNumber": 100,
    "testTargets": [
      "Cli#constructor"
    ]
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it39",
    "access": null,
    "description": "should initiate the options for the Cli",
    "lineNumber": 110,
    "testTargets": [
      "Cli#initOptions"
    ]
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it40",
    "access": null,
    "description": "should get the help message",
    "lineNumber": 116,
    "testTargets": [
      "Cli#getHelp"
    ]
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it41",
    "access": null,
    "description": "should construct a movie torrent object",
    "lineNumber": 122,
    "testTargets": [
      "Cli#_movieTorrent"
    ]
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it42",
    "access": null,
    "description": "should construct a show torrent object",
    "lineNumber": 131,
    "testTargets": [
      "Cli#_showTorrent"
    ]
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it43",
    "access": null,
    "description": "should get a torrent from a link",
    "lineNumber": 146,
    "testTargets": [
      "Cli#_getTorrent"
    ]
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it44",
    "access": null,
    "description": "should fail to get a torrent from a number",
    "lineNumber": 159,
    "testTargets": [
      "Cli#_getTorrent"
    ]
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it45",
    "access": null,
    "description": "should run the movie content prompt",
    "lineNumber": 175,
    "testTargets": [
      "Cli#_moviePrompt"
    ]
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it46",
    "access": null,
    "description": "should catch an error when running the movie content prompt",
    "lineNumber": 197,
    "testTargets": [
      "Cli#_moviePrompt"
    ]
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it47",
    "access": null,
    "description": "should run the show content prompt",
    "lineNumber": 216,
    "testTargets": [
      "Cli#_showPrompt"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it48",
    "access": null,
    "description": "should catch an error when running the show content prompt",
    "lineNumber": 239,
    "testTargets": [
      "Cli#_showPrompt"
    ]
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it49",
    "access": null,
    "lineNumber": 258,
    "testTargets": [
      "Cli#_content"
    ]
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it50",
    "access": null,
    "description": "should run the --content option with the 'null'",
    "lineNumber": 279,
    "testTargets": [
      "Cli#_content"
    ]
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it51",
    "access": null,
    "description": "should run the --export option with the 'show' option",
    "lineNumber": 287,
    "testTargets": [
      "Cli#_export"
    ]
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it52",
    "access": null,
    "description": "should run the --export option and reject the result",
    "lineNumber": 296,
    "testTargets": [
      "CLI#_export"
    ]
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it53",
    "access": null,
    "description": "should run the --import option with a non-existing file as input",
    "lineNumber": 315,
    "testTargets": [
      "Cli#_import"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it54",
    "access": null,
    "lineNumber": 331,
    "testTargets": [
      "Cli#_import"
    ]
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it55",
    "access": null,
    "description": "should run the --import option and reject the result",
    "lineNumber": 352,
    "testTargets": [
      "CLI#_import"
    ]
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it56",
    "access": null,
    "description": "should invoke the --content option",
    "lineNumber": 371,
    "testTargets": [
      "Cli#_run"
    ]
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it57",
    "access": null,
    "description": "should invoke the --export",
    "lineNumber": 390,
    "testTargets": [
      "Cli#_run"
    ]
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it58",
    "access": null,
    "description": "should invoke the --import option",
    "lineNumber": 409,
    "testTargets": [
      "Cli#_run"
    ]
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it59",
    "access": null,
    "description": "should invoke the --start option",
    "lineNumber": 431,
    "testTargets": [
      "Cli#_run"
    ]
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/middleware/Cli.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/Cli.spec.js~describe35.it60",
    "access": null,
    "description": "should not parse the arguments since there are none",
    "lineNumber": 443,
    "testTargets": [
      "Cli#_run"
    ]
  },
  {
    "__docId__": 399,
    "kind": "testFile",
    "name": "test/middleware/promptschemas.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport promptSchemas from '../../src/middleware/promptschemas'\n\n/** @test {promptSchemas} */\ndescribe('promptschemas', () => {\n  /** @test {promptSchemas} */\n  it('should have all the prompt schemas', () => {\n    expect(promptSchemas.imdb).to.be.an('object')\n    expect(promptSchemas.torrent).to.be.an('object')\n    expect(promptSchemas.movieQuality).to.be.an('object')\n    expect(promptSchemas.showQuality).to.be.an('object')\n    expect(promptSchemas.language).to.be.an('object')\n    expect(promptSchemas.season).to.be.an('object')\n    expect(promptSchemas.episode).to.be.an('object')\n    expect(promptSchemas.confirm).to.be.an('object')\n  })\n\n  /** @test {promptSchemas} */\n  it('should validate the input for the imdb schema', () => {\n    let res = promptSchemas.imdb.validate('tt1234567')\n    expect(res).to.be.true\n\n    res = promptSchemas.imdb.validate('faulty')\n    expect(res).to.be.a('string')\n  })\n\n  /** @test {promptSchemas} */\n  it('should validate the input for the torrent schema', () => {\n    let res = promptSchemas.torrent.validate('faulty')\n    expect(res).to.be.true\n\n    res = promptSchemas.torrent.validate()\n    expect(res).to.be.a('string')\n\n    res = promptSchemas.torrent.validate(123)\n    expect(res).to.be.a('string')\n  })\n\n  /** @test {promptSchemas} */\n  it('should validate the input for the language schema', () => {\n    let res = promptSchemas.language.validate('en')\n    expect(res).to.be.true\n\n    res = promptSchemas.language.validate(123)\n    expect(res).to.be.a('string')\n  })\n\n  /** @test {promptSchemas} */\n  it('should validate the input for the season schema', () => {\n    let res = promptSchemas.season.validate(123)\n    expect(res).to.be.true\n\n    res = promptSchemas.season.validate('faulty')\n    expect(res).to.be.a('string')\n  })\n\n  /** @test {promptSchemas} */\n  it('should validate the input for the episode schema', () => {\n    let res = promptSchemas.episode.validate(123)\n    expect(res).to.be.true\n\n    res = promptSchemas.episode.validate('faulty')\n    expect(res).to.be.a('string')\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/middleware/promptschemas.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/middleware/promptschemas.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/middleware/promptschemas.spec.js~describe61",
    "access": null,
    "description": "promptschemas",
    "lineNumber": 9,
    "testTargets": [
      "promptSchemas"
    ]
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/middleware/promptschemas.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/promptschemas.spec.js~describe61.it62",
    "access": null,
    "description": "should have all the prompt schemas",
    "lineNumber": 11,
    "testTargets": [
      "promptSchemas"
    ]
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/middleware/promptschemas.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/promptschemas.spec.js~describe61.it63",
    "access": null,
    "description": "should validate the input for the imdb schema",
    "lineNumber": 23,
    "testTargets": [
      "promptSchemas"
    ]
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/middleware/promptschemas.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/promptschemas.spec.js~describe61.it64",
    "access": null,
    "description": "should validate the input for the torrent schema",
    "lineNumber": 32,
    "testTargets": [
      "promptSchemas"
    ]
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/middleware/promptschemas.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/promptschemas.spec.js~describe61.it65",
    "access": null,
    "description": "should validate the input for the language schema",
    "lineNumber": 44,
    "testTargets": [
      "promptSchemas"
    ]
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/middleware/promptschemas.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/promptschemas.spec.js~describe61.it66",
    "access": null,
    "description": "should validate the input for the season schema",
    "lineNumber": 53,
    "testTargets": [
      "promptSchemas"
    ]
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/middleware/promptschemas.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/middleware/promptschemas.spec.js~describe61.it67",
    "access": null,
    "description": "should validate the input for the episode schema",
    "lineNumber": 62,
    "testTargets": [
      "promptSchemas"
    ]
  },
  {
    "__docId__": 407,
    "kind": "testFile",
    "name": "test/models/AnimeMovie.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport testAnimeMovie from '../data/animemovie'\nimport { AnimeMovie } from '../../src/models'\nimport * as movieTests from './Movie.spec'\n\n/** @test {AnimeMovie} */\ndescribe('AnimeMovie', () => {\n  /**\n   * The anime movie object to test.\n   * @type {AnimeMovie}\n   */\n  let animeMovie: AnimeMovie\n\n  /**\n   * The anime movie object initiated without a constructor object.\n   * @type {AnimeMovie}\n   */\n  let animeMovieEmpty: AnimeMovie\n\n  /**\n   * Hook for setting up the AnimeMovie tests.\n   * @type {Function}\n   */\n  before(() => {\n    animeMovie = new AnimeMovie(testAnimeMovie)\n    animeMovieEmpty = new AnimeMovie()\n  })\n\n  /** @test {AnimeMovie#constructor} */\n  it('should check the attributes of a anime movie', () => {\n    movieTests.testMovieAttributes(animeMovie, testAnimeMovie)\n  })\n\n  /** @test {AnimeMovie#constructor} */\n  it('should check the attributes of an empty anime movie', () => {\n    movieTests.testEmptyMovieAttributes(animeMovieEmpty)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/models/AnimeMovie.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "test/models/AnimeMovie.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/models/AnimeMovie.spec.js~describe68",
    "access": null,
    "description": "AnimeMovie",
    "lineNumber": 9,
    "testTargets": [
      "AnimeMovie"
    ]
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/models/AnimeMovie.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/AnimeMovie.spec.js~describe68.it69",
    "access": null,
    "description": "should check the attributes of a anime movie",
    "lineNumber": 32,
    "testTargets": [
      "AnimeMovie#constructor"
    ]
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/models/AnimeMovie.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/AnimeMovie.spec.js~describe68.it70",
    "access": null,
    "description": "should check the attributes of an empty anime movie",
    "lineNumber": 37,
    "testTargets": [
      "AnimeMovie#constructor"
    ]
  },
  {
    "__docId__": 411,
    "kind": "testFile",
    "name": "test/models/AnimeShow.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport testAnimeShow from '../data/animeshow'\nimport { AnimeShow } from '../../src/models'\nimport * as showTests from './Show.spec'\n\n/** @test {AnimeShow} */\ndescribe('AnimeShow', () => {\n  /**\n   * The anime show object to test.\n   * @type {AnimeShow}\n   */\n  let animeShow: AnimeShow\n\n  /**\n   * The anime show object initiated without a constructor object.\n   * @type {AnimeShow}\n   */\n  let animeShowEmpty: AnimeShow\n\n  /**\n   * Hook for setting up the AnimeShow tests.\n   * @type {Function}\n   */\n  before(() => {\n    // console.log(new AnimeShow())\n    animeShow = new AnimeShow(testAnimeShow)\n    animeShowEmpty = new AnimeShow()\n  })\n\n  /** @test {AnimeShow#constructor} */\n  it('should check the attributes of a anime show', () => {\n    showTests.testShowAttributes(animeShow, testAnimeShow)\n  })\n\n  /** @test {AnimeShow#constructor} */\n  it('should check the attributes of an empty anime show', () => {\n    showTests.testEmptyShowAttributes(animeShowEmpty)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/models/AnimeShow.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "describe71",
    "testId": 71,
    "memberof": "test/models/AnimeShow.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/models/AnimeShow.spec.js~describe71",
    "access": null,
    "description": "AnimeShow",
    "lineNumber": 9,
    "testTargets": [
      "AnimeShow"
    ]
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/models/AnimeShow.spec.js~describe71",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/AnimeShow.spec.js~describe71.it72",
    "access": null,
    "description": "should check the attributes of a anime show",
    "lineNumber": 33,
    "testTargets": [
      "AnimeShow#constructor"
    ]
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/models/AnimeShow.spec.js~describe71",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/AnimeShow.spec.js~describe71.it73",
    "access": null,
    "description": "should check the attributes of an empty anime show",
    "lineNumber": 38,
    "testTargets": [
      "AnimeShow#constructor"
    ]
  },
  {
    "__docId__": 415,
    "kind": "testFile",
    "name": "test/models/Content.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\nimport type ContentModel from '../../src/models/content/ContentModel'\n\n/**\n * It should check the attributes of a content object.\n * @param {ContentModel} content - The content to test with.\n * @param {Object} testContent - The content to test against.\n * @param {string} type - The type of content to check for.\n * @returns {undefined}\n */\nexport function testContentAttributes(\n  content: ContentModel,\n  testContent: Object,\n  type: string\n): void {\n  expect(content.id).to.be.a('string')\n  expect(content.id).to.equal(testContent.imdb_id)\n  expect(content.genres).to.be.an('array')\n  expect(content.genres).to.deep.equal(testContent.genres)\n  expect(content.images).to.be.an('object')\n  expect(content.imdb_id).to.be.a('string')\n  expect(content.imdb_id).to.equal(testContent.imdb_id)\n  expect(content.rating).to.be.an('object')\n  expect(content.runtime).to.be.a('number')\n  expect(content.runtime).to.equal(testContent.runtime)\n  expect(content.slug).to.be.a('string')\n  expect(content.slug).to.equal(testContent.slug)\n  expect(content.synopsis).to.be.a('string')\n  expect(content.synopsis).to.equal(testContent.synopsis)\n  expect(content.title).to.be.a('string')\n  expect(content.title).to.equal(testContent.title)\n  expect(content.type).to.be.a('string')\n  expect(content.type).to.equal(type)\n  expect(content.year).to.be.a('number')\n  expect(content.year).to.equal(testContent.year)\n  expect(content._id).to.be.a('string')\n  expect(content._id).to.equal(testContent.imdb_id)\n}\n\n/**\n * It should check the attributes of an empty content object.\n * @param {ContentModel} contentEmpty - The content to test with.\n * @param {string} type - The type of content to check for.\n * @returns {undefined}\n */\nexport function testEmptyContentAttributes(\n  contentEmpty: ContentModel,\n  type: string\n): void {\n  expect(contentEmpty.id).to.be.null\n  expect(contentEmpty.genres).to.be.undefined\n  // expect(contentEmpty.images).to.be.undefined\n  expect(contentEmpty.imdb_id).to.be.undefined\n  // expect(contentEmpty.rating).to.be.undefined\n  expect(contentEmpty.runtime).to.be.undefined\n  expect(contentEmpty.slug).to.be.undefined\n  expect(contentEmpty.synopsis).to.be.undefined\n  expect(contentEmpty.title).to.be.undefined\n  expect(contentEmpty.type).to.be.a('string')\n  expect(contentEmpty.type).to.equal(type)\n  expect(contentEmpty.year).to.be.undefined\n  expect(contentEmpty._id).to.be.undefined\n}\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/models/Content.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 416,
    "kind": "testFile",
    "name": "test/models/Movie.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport testMovie from '../data/movie'\nimport { Movie } from '../../src/models'\nimport * as contentTests from './Content.spec'\n\n/**\n * It should check the attributes of a movie\n * @param {Movie} movie - The movie to test.\n * @param {Object} testMovie - The movie to test against.\n * @returns {undefined}\n */\nexport function testMovieAttributes(movie: Movie, testMovie: Object): void {\n  contentTests.testContentAttributes(movie, testMovie, 'movie')\n\n  expect(movie.certification).to.be.a('string')\n  expect(movie.certification).to.equal(testMovie.certification)\n  expect(movie.language).to.be.a('string')\n  expect(movie.language).to.equal(testMovie.language)\n  expect(movie.released).to.be.a('number')\n  expect(movie.released).to.equal(testMovie.released)\n  expect(movie.torrents).to.be.an('object')\n  expect(movie.torrents).to.deep.equal(testMovie.torrents)\n  expect(movie.trailer).to.be.a('string')\n  expect(movie.trailer).to.equal(testMovie.trailer)\n}\n\n/**\n * It should check the attributes of an empty movie.\n * @param {Movie} movieEmpty - The movie to test.\n * @returns {undefined}\n */\nexport function testEmptyMovieAttributes(movieEmpty: Movie): void {\n  contentTests.testEmptyContentAttributes(movieEmpty, 'movie')\n\n  expect(movieEmpty.certification).to.be.undefined\n  expect(movieEmpty.language).to.be.a('string')\n  expect(movieEmpty.language).to.equal('en')\n  expect(movieEmpty.torrents).to.be.undefined\n  expect(movieEmpty.trailer).to.be.undefined\n}\n\n/** @test {Movie} */\ndescribe('Movie', () => {\n  /**\n   * The movie object to test.\n   * @type {Movie}\n   */\n  let movie: Movie\n\n  /**\n   * The movie object initiated without a constructor object.\n   * @type {Movie}\n   */\n  let movieEmpty: Movie\n\n  /**\n   * Hook for setting up the Movie tests.\n   * @type {Function}\n   */\n  before(() => {\n    movie = new Movie(testMovie)\n    movieEmpty = new Movie()\n  })\n\n  /** @test {Movie#constructor} */\n  it('should check the attributes of a movie', () => {\n    testMovieAttributes(movie, testMovie)\n  })\n\n  /** @test {Movie#constructor} */\n  it('should check the attributes of an empty movie', () => {\n    testEmptyMovieAttributes(movieEmpty)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/models/Movie.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "test/models/Movie.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/models/Movie.spec.js~describe74",
    "access": null,
    "description": "Movie",
    "lineNumber": 47,
    "testTargets": [
      "Movie"
    ]
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/models/Movie.spec.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/Movie.spec.js~describe74.it75",
    "access": null,
    "description": "should check the attributes of a movie",
    "lineNumber": 70,
    "testTargets": [
      "Movie#constructor"
    ]
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/models/Movie.spec.js~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/Movie.spec.js~describe74.it76",
    "access": null,
    "description": "should check the attributes of an empty movie",
    "lineNumber": 75,
    "testTargets": [
      "Movie#constructor"
    ]
  },
  {
    "__docId__": 420,
    "kind": "testFile",
    "name": "test/models/ProviderConfig.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport { ProviderConfig } from '../../src/models'\n\n/** @test {ProviderConfig} */\ndescribe('ProviderConfig', () => {\n  /**\n   * The provider configuration object to test.\n   * @type {ProviderConfig}\n   */\n  let providerConfig: ProviderConfig\n\n  /**\n   * The provider configuration object initiated without a constructor object.\n   * @type {ProviderConfig}\n   */\n  let providerConfigEmpty: ProviderConfig\n\n  /**\n   * Hook for setting up the ProviderConfig tests.\n   * @type {Function}\n   */\n  before(() => {\n    providerConfig = new ProviderConfig({\n      api: 'string',\n      clazz: 'string',\n      modelType: 'string',\n      name: 'string',\n      query: {},\n      type: 'string'\n    })\n    providerConfigEmpty = new ProviderConfig()\n  })\n\n  /** @test {ProviderConfig#constructor} */\n  it('should check the attributes of a provider configuration', () => {\n    expect(providerConfig.api).to.be.a('string')\n    expect(providerConfig.api).to.equal('string')\n    expect(providerConfig.clazz).to.be.a('string')\n    expect(providerConfig.clazz).to.equal('string')\n    expect(providerConfig.id).to.be.a('string')\n    expect(providerConfig.id).to.equal('string')\n    expect(providerConfig.modelType).to.be.a('string')\n    expect(providerConfig.modelType).to.equal('string')\n    expect(providerConfig.name).to.be.a('string')\n    expect(providerConfig.name).to.equal('string')\n    expect(providerConfig.query).to.be.an('object')\n    expect(providerConfig.query).to.deep.equal({})\n    expect(providerConfig.type).to.be.a('string')\n    expect(providerConfig.type).to.equal('string')\n    expect(providerConfig._id).to.be.a('string')\n    expect(providerConfig._id).to.equal('string')\n  })\n\n  /** @test {ProviderConfig#constructor} */\n  it('should check the attributes of an empty provider configuration', () => {\n    expect(providerConfigEmpty.api).to.be.undefined\n    expect(providerConfigEmpty.clazz).to.be.undefined\n    expect(providerConfigEmpty.id).to.be.undefined\n    expect(providerConfigEmpty.modelType).to.be.undefined\n    expect(providerConfigEmpty.name).to.be.undefined\n    expect(providerConfigEmpty.query).to.be.undefined\n    expect(providerConfigEmpty.type).to.be.undefined\n    expect(providerConfigEmpty._id).to.be.undefined\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/models/ProviderConfig.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "test/models/ProviderConfig.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/models/ProviderConfig.spec.js~describe77",
    "access": null,
    "description": "ProviderConfig",
    "lineNumber": 9,
    "testTargets": [
      "ProviderConfig"
    ]
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/models/ProviderConfig.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/ProviderConfig.spec.js~describe77.it78",
    "access": null,
    "description": "should check the attributes of a provider configuration",
    "lineNumber": 39,
    "testTargets": [
      "ProviderConfig#constructor"
    ]
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/models/ProviderConfig.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/ProviderConfig.spec.js~describe77.it79",
    "access": null,
    "description": "should check the attributes of an empty provider configuration",
    "lineNumber": 59,
    "testTargets": [
      "ProviderConfig#constructor"
    ]
  },
  {
    "__docId__": 424,
    "kind": "testFile",
    "name": "test/models/Show.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport testShow from '../data/show'\nimport { Show } from '../../src/models'\nimport * as contentTests from './Content.spec'\n\n/**\n * It should check the attributes of a show.\n * @param {Show} show - The show to test.\n * @param {Object} testShow - The movie to test against.\n * @returns {undefined}\n */\nexport function testShowAttributes(show: Show, testShow: Object): void {\n  contentTests.testContentAttributes(show, testShow, 'tvshow')\n\n  expect(show.air_day).to.be.a('string')\n  expect(show.air_day).to.equal(testShow.air_day)\n  expect(show.air_time).to.be.a('string')\n  expect(show.air_time).to.deep.equal(testShow.air_time)\n  expect(show.country).to.be.a('string')\n  expect(show.country).to.equal(testShow.country)\n  expect(show.episodes).to.be.an('array')\n  expect(show.last_updated).to.be.a('number')\n  expect(show.last_updated).to.equal(testShow.last_updated)\n  expect(show.latest_episode).to.be.a('number')\n  expect(show.latest_episode).to.equal(testShow.latest_episode)\n  expect(show.network).to.be.a('string')\n  expect(show.network).to.equal(testShow.network)\n  expect(show.num_seasons).to.be.a('number')\n  expect(show.num_seasons).to.equal(testShow.num_seasons)\n  expect(show.status).to.be.a('string')\n  expect(show.status).to.equal(testShow.status)\n  expect(show.tvdb_id).to.be.a('number')\n  expect(show.tvdb_id).to.equal(testShow.tvdb_id)\n}\n\n/**\n * It should check the attributes of an empty show.\n * @param {Show} showEmpty - The show to test.\n * @returns {undefined}\n */\nexport function testEmptyShowAttributes(showEmpty: Show): void {\n  contentTests.testEmptyContentAttributes(showEmpty, 'tvshow')\n\n  expect(showEmpty.air_date).to.be.undefined\n  expect(showEmpty.air_time).to.be.undefined\n  expect(showEmpty.country).to.be.undefined\n  expect(showEmpty.episodes).to.be.undefined\n  expect(showEmpty.last_updated).to.be.undefined\n  expect(showEmpty.latest_episode).to.equal(0)\n  expect(showEmpty.network).to.be.undefined\n  expect(showEmpty.num_seasons).to.be.undefined\n  expect(showEmpty.status).to.be.undefined\n  expect(showEmpty.tvdb_id).to.be.undefined\n}\n\n/** @test {Show} */\ndescribe('Show', () => {\n  /**\n   * The show object to test.\n   * @type {Show}\n   */\n  let show: Show\n\n  /**\n   * The show object initiated without a constructor object.\n   * @type {Show}\n   */\n  let showEmpty: Show\n\n  /**\n   * Hook for setting up the Show tests.\n   * @type {Function}\n   */\n  before(() => {\n    show = new Show(testShow)\n    showEmpty = new Show()\n  })\n\n  /** @test {Show#constructor} */\n  it('should check the attributes of a show', () => {\n    testShowAttributes(show, testShow)\n  })\n\n  /** @test {Show#constructor} */\n  it('should check the attributes of an empty show', () => {\n    testEmptyShowAttributes(showEmpty)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/models/Show.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/models/Show.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/models/Show.spec.js~describe80",
    "access": null,
    "description": "Show",
    "lineNumber": 61,
    "testTargets": [
      "Show"
    ]
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/models/Show.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/Show.spec.js~describe80.it81",
    "access": null,
    "description": "should check the attributes of a show",
    "lineNumber": 84,
    "testTargets": [
      "Show#constructor"
    ]
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/models/Show.spec.js~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "test/models/Show.spec.js~describe80.it82",
    "access": null,
    "description": "should check the attributes of an empty show",
    "lineNumber": 89,
    "testTargets": [
      "Show#constructor"
    ]
  },
  {
    "__docId__": 428,
    "kind": "testFile",
    "name": "test/scraper/helpers/AbstractHelper.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\nimport sinon from 'sinon'\nimport type { MongooseModel } from 'mongoose'\n\nimport AbstractHelper from '../../../src/scraper/helpers/AbstractHelper'\nimport { Show } from '../../../src/models'\n\n/**\n * Check the constructor of the base helper.\n * @param {!AbstractHelper} helper - The helper to test.\n * @param {!string} name - The name to check for.\n * @param {!Model} Model - The model to check for.\n * @returns {undefined}\n */\nexport function checkHelperAttributes(\n  helper: AbstractHelper,\n  name: string,\n  Model: MongooseModel\n): void {\n  expect(helper.name).to.be.a('string')\n  expect(helper.name).to.equal(name)\n  expect(helper.Model).to.be.a('function')\n  expect(helper.Model).to.equal(Model)\n}\n\n/**\n * Helper function to test the image attributes\n * @param {!Object} images - The images object to test.\n * @param {!Function} done - The done function of mocha.\n * @returns {undefined}\n */\nexport function testImages(images: Object, done: Function): void {\n  expect(images).to.be.an('object')\n  expect(images.banner).to.be.a('string')\n  expect(images.fanart).to.be.a('string')\n  expect(images.poster).to.be.a('string')\n  done()\n}\n\n/**\n * Test the failures of the `_getFanartImages`.\n * @param {!Object} resolves - The object the stub will resolve.\n * @param {!string} type - The type of images to get.\n * @param {!Fanart} fanart - The fanart api service.\n * @param {!AbstractHelper} helper - The helper to test.\n * @param {!Function} done - The mocha done function.\n * @returns {undefined}\n */\nexport function testGetFanartImages(\n  resolves: Object,\n  type: string,\n  fanart: Object,\n  helper: Object,\n  done: Function\n): void {\n  const cap = `${type.charAt(0).toUpperCase()}${type.slice(1)}`\n  const stub = sinon.stub(fanart, `get${cap}Images`)\n  stub.resolves(resolves)\n\n  helper._getFanartImages()\n    .then(done)\n    .catch(err => {\n      expect(err).to.be.an('Error')\n      stub.restore()\n      done()\n    })\n}\n\n/** @test {AbstractHelper} */\ndescribe('AbstractHelper', () => {\n  /**\n   * The abstract helper to test.\n   * @type {AbstractHelper}\n   */\n  let abstractHelper: AbstractHelper\n\n  /**\n   * Hook for setting up the AbstractHelper tests.\n   * @type {Function}\n   */\n  before(() => {\n    abstractHelper = new AbstractHelper({\n      name: 'AbstractHelper',\n      Model: Show\n    })\n  })\n\n  /** @test {AbstractHelper#constructor} */\n  it('should check the attributes of the BaseHelper', () => {\n    checkHelperAttributes(abstractHelper, 'AbstractHelper', Show)\n  })\n\n  /** @test {AbstractHelper.Holder} */\n  it('should check if AbstractHelper has a static Holder attribute', () => {\n    expect(AbstractHelper.Holder).to.exist\n    expect(AbstractHelper.Holder).to.be.a('string')\n  })\n\n  /** @test {AbstractHelper.DefaultImages} */\n  it('should check if AbstractHelper has a static DefaultImages attribute', () => {\n    expect(AbstractHelper.DefaultImages).to.exist\n    expect(AbstractHelper.DefaultImages).to.be.an('object')\n  })\n\n  /** @test {AbstractHelper#checkImages} */\n  it('should check if all the images are found', () => {\n    const input = {\n      poster: 'poster'\n    }\n    const res = abstractHelper.checkImages(input)\n\n    expect(res).to.be.an('object')\n    expect(res).to.be.equal(input)\n  })\n\n  /** @test {AbstractHelper#checkImages} */\n  it('should throw an error when not all images are found', () => {\n    const input = {\n      poster: AbstractHelper.Holder\n    }\n    expect(abstractHelper.checkImages.bind(abstractHelper.checkImages, input))\n      .to.throw('An image could not been found!')\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/helpers/AbstractHelper.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/scraper/helpers/AbstractHelper.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/helpers/AbstractHelper.spec.js~describe83",
    "access": null,
    "description": "AbstractHelper",
    "lineNumber": 73,
    "testTargets": [
      "AbstractHelper"
    ]
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/scraper/helpers/AbstractHelper.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/AbstractHelper.spec.js~describe83.it84",
    "access": null,
    "description": "should check the attributes of the BaseHelper",
    "lineNumber": 92,
    "testTargets": [
      "AbstractHelper#constructor"
    ]
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/scraper/helpers/AbstractHelper.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/AbstractHelper.spec.js~describe83.it85",
    "access": null,
    "description": "should check if AbstractHelper has a static Holder attribute",
    "lineNumber": 97,
    "testTargets": [
      "AbstractHelper.Holder"
    ]
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/scraper/helpers/AbstractHelper.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/AbstractHelper.spec.js~describe83.it86",
    "access": null,
    "description": "should check if AbstractHelper has a static DefaultImages attribute",
    "lineNumber": 103,
    "testTargets": [
      "AbstractHelper.DefaultImages"
    ]
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/scraper/helpers/AbstractHelper.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/AbstractHelper.spec.js~describe83.it87",
    "access": null,
    "description": "should check if all the images are found",
    "lineNumber": 109,
    "testTargets": [
      "AbstractHelper#checkImages"
    ]
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/scraper/helpers/AbstractHelper.spec.js~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/AbstractHelper.spec.js~describe83.it88",
    "access": null,
    "description": "should throw an error when not all images are found",
    "lineNumber": 120,
    "testTargets": [
      "AbstractHelper#checkImages"
    ]
  },
  {
    "__docId__": 435,
    "kind": "testFile",
    "name": "test/scraper/helpers/IHelper.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport { expect } from 'chai'\n\nimport IHelper from '../../../src/scraper/helpers/IHelper'\n\n/** @test {IHelper} */\ndescribe('IHelper', () => {\n  /**\n   * The IHelper object to be tested.\n   * @type {IHelper}\n   */\n  let iHelper: IHelper\n\n  /**\n   * Hook for setting up the IHelper tests.\n   * @type {Function}\n   */\n  before(() => {\n    iHelper = new IHelper()\n  })\n\n  /** @test {IHelper#getTraktInfo} */\n  it('should throw an error when calling the getTrakt method', () => {\n    expect(iHelper.getTraktInfo).to\n      .throw('Using default method: \\'getTraktInfo\\'')\n  })\n\n  /** @test {IHelper#checkImages} */\n  it('should throw an error when calling the checkImages method', () => {\n    expect(iHelper.checkImages).to\n      .throw('Using default method: \\'checkImages\\'')\n  })\n\n  /** @test {IHelper#getImages} */\n  it('should throw an error when calling the getImages method', () => {\n    expect(iHelper.getImages.bind({}, {})).to\n      .throw('Using default method: \\'getImages\\'')\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/helpers/IHelper.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "test/scraper/helpers/IHelper.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/helpers/IHelper.spec.js~describe89",
    "access": null,
    "description": "IHelper",
    "lineNumber": 9,
    "testTargets": [
      "IHelper"
    ]
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/scraper/helpers/IHelper.spec.js~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/IHelper.spec.js~describe89.it90",
    "access": null,
    "description": "should throw an error when calling the getTrakt method",
    "lineNumber": 25,
    "testTargets": [
      "IHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/scraper/helpers/IHelper.spec.js~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/IHelper.spec.js~describe89.it91",
    "access": null,
    "description": "should throw an error when calling the checkImages method",
    "lineNumber": 31,
    "testTargets": [
      "IHelper#checkImages"
    ]
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/scraper/helpers/IHelper.spec.js~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/IHelper.spec.js~describe89.it92",
    "access": null,
    "description": "should throw an error when calling the getImages method",
    "lineNumber": 37,
    "testTargets": [
      "IHelper#getImages"
    ]
  },
  {
    "__docId__": 440,
    "kind": "testFile",
    "name": "test/scraper/helpers/MovieHelper.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport sinon from 'sinon'\nimport {\n  Database,\n  PopApi\n} from 'pop-api'\nimport { expect } from 'chai'\n\nimport testMovie from '../../data/movie.json'\nimport { logger } from '..'\nimport { Movie } from '../../../src/models'\nimport { MovieHelper } from '../../../src/scraper/helpers'\nimport {\n  fanart,\n  omdb,\n  tmdb,\n  trakt\n} from '../../../src/scraper/apiModules'\nimport { name } from '../../../package.json'\nimport * as abstractHelperTests from './AbstractHelper.spec'\n\n/** @test {MovieHelper} */\ndescribe('MovieHelper', () => {\n  /**\n   * The movie helper to test.\n   * @type {MovieHelper}\n   */\n  let movieHelper: MovieHelper\n\n  /**\n   * The database middleware to connect to MongoDB.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * Hook for setting up the MovieHelper tests.\n   * @type {Function}\n   */\n  before(done => {\n    if (!global.logger) {\n      global.logger = logger\n    }\n\n    movieHelper = new MovieHelper({\n      name: 'MovieHelper',\n      Model: Movie\n    })\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => Movie.remove({}))\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {MovieHelper#_updateTorrent} */\n  it('should update the torrent for an existing movie', () => {\n    const movie = JSON.parse(JSON.stringify(testMovie))\n    const found = JSON.parse(JSON.stringify(testMovie))\n\n    const res = movieHelper._updateTorrent(movie, found, 'en', '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {MovieHelper#_updateTorrent} */\n  it('should update the torrent for an existing movie', () => {\n    const movie = JSON.parse(JSON.stringify(testMovie))\n    const found = JSON.parse(JSON.stringify(testMovie))\n\n    found.torrents.en['720p'] = {\n      seeds: 2,\n      url: 'url'\n    }\n    const res = movieHelper._updateTorrent(movie, found, 'en', '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {MovieHelper#_updateTorrent} */\n  it('should update the torrent for an existing movie', () => {\n    const movie = JSON.parse(JSON.stringify(testMovie))\n    const found = JSON.parse(JSON.stringify(testMovie))\n\n    movie.torrents.en = {}\n    const res = movieHelper._updateTorrent(movie, found, 'en', '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {MovieHelper#_updateTorrent} */\n  it('should update the torrent for an existing movie', () => {\n    const movie = JSON.parse(JSON.stringify(testMovie))\n    const found = JSON.parse(JSON.stringify(testMovie))\n\n    found.torrents.en = {}\n    const res = movieHelper._updateTorrent(movie, found, 'en', '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {MovieHelper#_updateTorrent} */\n  it('should update the torrent for an existing movie', () => {\n    const movie = JSON.parse(JSON.stringify(testMovie))\n    const found = JSON.parse(JSON.stringify(testMovie))\n\n    movie.torrents.en = null\n    const res = movieHelper._updateTorrent(movie, found, 'en', '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {MovieHelper#_updateTorrent} */\n  it('should update the torrent for an existing movie', () => {\n    const movie = JSON.parse(JSON.stringify(testMovie))\n    const found = JSON.parse(JSON.stringify(testMovie))\n\n    found.torrents.en = null\n    const res = movieHelper._updateTorrent(movie, found, 'en', '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {MovieHelper#_updateTorrent} */\n  it('should update the torrent for an existing movie', () => {\n    const movie = JSON.parse(JSON.stringify(testMovie))\n    const found = JSON.parse(JSON.stringify(testMovie))\n\n    movie.torrents.en = null\n    found.torrents.en = {}\n    const res = movieHelper._updateTorrent(movie, found, 'en', '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {MovieHelper#_updateMovie} */\n  it('should save a given movie', done => {\n    const foundStub = sinon.stub(movieHelper.Model, 'findOne')\n    foundStub.returns(null)\n\n    movieHelper._updateMovie(testMovie).then(res => {\n      expect(res).to.be.an('object')\n      foundStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#_updateMovie} */\n  it('should update a given movie', done => {\n    const foundStub = sinon.stub(movieHelper.Model, 'findOne')\n    foundStub.returns(testMovie)\n    const updateStub = sinon.stub(movieHelper.Model, 'findOneAndUpdate')\n    updateStub.returns(testMovie)\n\n    movieHelper._updateMovie(testMovie).then(res => {\n      expect(res).to.be.an('object')\n      foundStub.restore()\n      updateStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#_updateMovie} */\n  it('should update a given movie', done => {\n    const foundStub = sinon.stub(movieHelper.Model, 'findOne')\n    foundStub.returns(testMovie)\n    const updateStub = sinon.stub(movieHelper.Model, 'findOneAndUpdate')\n    delete testMovie.torrents\n    updateStub.returns(testMovie)\n\n    movieHelper._updateMovie(testMovie).then(res => {\n      expect(res).to.be.an('object')\n      foundStub.restore()\n      updateStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#_updateMovie} */\n  it('should catch and print an error', done => {\n    const foundStub = sinon.stub(movieHelper.Model, 'findOne')\n    foundStub.throws()\n\n    movieHelper._updateMovie(testMovie).then(res => {\n      expect(res).to.be.undefined\n      foundStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#addTorrents} */\n  it('should add torrents to a movie', done => {\n    const torrent = {\n      url: 'test url',\n      peers: 0,\n      seeds: 0,\n      provider: 'test'\n    }\n    const torrents = {\n      en: {\n        '720p': torrent,\n        '1080p': torrent\n      }\n    }\n\n    const foundStub = sinon.stub(movieHelper.Model, 'findOne')\n    foundStub.returns(testMovie)\n\n    testMovie.torrents = {}\n    movieHelper.addTorrents(testMovie, torrents).then(res => {\n      expect(res).to.be.an('object')\n      foundStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#_getTmdbImages} */\n  it('should fail to get movie images from TMDB', done => {\n    const image = [{\n      iso_639_1: null,\n      file_path: null\n    }]\n    const stub = sinon.stub(tmdb.movie, 'images')\n    stub.resolves({\n      posters: image,\n      backdrops: image\n    })\n\n    movieHelper._getTmdbImages()\n      .then(done)\n      .catch(err => {\n        expect(err).to.be.an('Error')\n        stub.restore()\n\n        done()\n      })\n  })\n\n  /** @test {MovieHelper#_getTmdbImages} */\n  it('should get movie images from TMDB', done => {\n    movieHelper._getTmdbImages(10195)\n      .then(res => abstractHelperTests.testImages(res, done))\n      .catch(done)\n  })\n\n  /** @test {MovieHelper#_getOmdbImages} */\n  it('should get movie images from OMDB', done => {\n    movieHelper._getOmdbImages('tt1431045')\n      .then(res => abstractHelperTests.testImages(res, done))\n      .catch(done)\n  })\n\n  /** @test {MovieHelper#_getOmdbImages} */\n  it('should fail to get movie images from OMDB', done => {\n    const images = {\n      Poster: null\n    }\n    const stub = sinon.stub(omdb, 'byId')\n    stub.resolves(images)\n\n    movieHelper._getOmdbImages('')\n      .then(done)\n      .catch(err => {\n        expect(err).to.be.an('Error')\n        stub.restore()\n\n        done()\n      })\n  })\n\n  /** @test {MovieHelper#_getFanartImages} */\n  it('should get movie images from Fanart', done => {\n    movieHelper._getFanartImages(10195)\n      .then(res => abstractHelperTests.testImages(res, done))\n      .catch(done)\n  })\n\n  /** @test {MovieHelper#_getFanartImages} */\n  it(`should fail to get movie images from Fanart`, done => {\n    abstractHelperTests.testGetFanartImages({\n      hdmovieclearart: [{\n        url: 'url'\n      }]\n    }, 'movie', fanart, movieHelper, done)\n  })\n\n  /** @test {MovieHelper#_getFanartImages} */\n  it(`should fail to get movie images from Fanart`, done => {\n    abstractHelperTests.testGetFanartImages(\n      {}, 'movie', fanart, movieHelper, done\n    )\n  })\n\n  /** @test {MovieHelper#getImages} */\n  it('should get movie images from various sources', done => {\n    movieHelper.getImages({\n      imdbId: 'tt1431045',\n      tmdbId: 10195\n    }).then(res => abstractHelperTests.testImages(res, done))\n      .catch(done)\n  })\n\n  /** @test {MovieHelper#getImages} */\n  it('should get movie images from various sources', done => {\n    const stub = sinon.stub(omdb, 'byId')\n    stub.throws()\n\n    movieHelper.getImages({\n      imdbId: 'tt1431045',\n      tmdbId: 10195\n    }).then(res => {\n      stub.restore()\n      return abstractHelperTests.testImages(res, done)\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#getTraktInfo} */\n  it('should get info from Trakt and make a new movie object with 0 watching', done => {\n    const stub = sinon.stub(trakt.movies, 'watching')\n    stub.resolves()\n\n    movieHelper.getTraktInfo('deadpool-2016').then(res => {\n      expect(res).to.be.an('object')\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#getTraktInfo} */\n  it('should get info from Trakt and make a new movie object with no genres', done => {\n    const stub = sinon.stub(trakt.movies, 'summary')\n    stub.resolves({\n      ids: {\n        imdb: 'imdb',\n        tmdb: 'tmdb'\n      },\n      released: '2016-01-01',\n      genres: undefined\n    })\n\n    movieHelper.getTraktInfo('deadpool-2016').then(res => {\n      expect(res).to.be.an('object')\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#getTraktInfo} */\n  it('should not get info from Trakt', done => {\n    const stub = sinon.stub(trakt.movies, 'summary')\n    stub.resolves(null)\n\n    movieHelper.getTraktInfo('deadpool-2016').then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieHelper#getTraktInfo} */\n  it('should not get info from Trakt', done => {\n    const stub = sinon.stub(trakt.movies, 'summary')\n    stub.throws()\n\n    movieHelper.getTraktInfo('deadpool-2016').then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Hook for tearing down the MovieHelper tests.\n   * @type {Function}\n   */\n  after(done => {\n    database.disconnect()\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/helpers/MovieHelper.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "access": null,
    "description": "MovieHelper",
    "lineNumber": 25,
    "testTargets": [
      "MovieHelper"
    ]
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it94",
    "access": null,
    "description": "should update the torrent for an existing movie",
    "lineNumber": 62,
    "testTargets": [
      "MovieHelper#_updateTorrent"
    ]
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it95",
    "access": null,
    "description": "should update the torrent for an existing movie",
    "lineNumber": 71,
    "testTargets": [
      "MovieHelper#_updateTorrent"
    ]
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it96",
    "access": null,
    "description": "should update the torrent for an existing movie",
    "lineNumber": 84,
    "testTargets": [
      "MovieHelper#_updateTorrent"
    ]
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it97",
    "access": null,
    "description": "should update the torrent for an existing movie",
    "lineNumber": 94,
    "testTargets": [
      "MovieHelper#_updateTorrent"
    ]
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it98",
    "access": null,
    "description": "should update the torrent for an existing movie",
    "lineNumber": 104,
    "testTargets": [
      "MovieHelper#_updateTorrent"
    ]
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it99",
    "access": null,
    "description": "should update the torrent for an existing movie",
    "lineNumber": 114,
    "testTargets": [
      "MovieHelper#_updateTorrent"
    ]
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it100",
    "access": null,
    "description": "should update the torrent for an existing movie",
    "lineNumber": 124,
    "testTargets": [
      "MovieHelper#_updateTorrent"
    ]
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it101",
    "access": null,
    "description": "should save a given movie",
    "lineNumber": 135,
    "testTargets": [
      "MovieHelper#_updateMovie"
    ]
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it102",
    "access": null,
    "description": "should update a given movie",
    "lineNumber": 148,
    "testTargets": [
      "MovieHelper#_updateMovie"
    ]
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it103",
    "access": null,
    "description": "should update a given movie",
    "lineNumber": 164,
    "testTargets": [
      "MovieHelper#_updateMovie"
    ]
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it104",
    "access": null,
    "description": "should catch and print an error",
    "lineNumber": 181,
    "testTargets": [
      "MovieHelper#_updateMovie"
    ]
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it105",
    "access": null,
    "description": "should add torrents to a movie",
    "lineNumber": 194,
    "testTargets": [
      "MovieHelper#addTorrents"
    ]
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it106",
    "access": null,
    "description": "should fail to get movie images from TMDB",
    "lineNumber": 221,
    "testTargets": [
      "MovieHelper#_getTmdbImages"
    ]
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it107",
    "access": null,
    "description": "should get movie images from TMDB",
    "lineNumber": 243,
    "testTargets": [
      "MovieHelper#_getTmdbImages"
    ]
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it108",
    "access": null,
    "description": "should get movie images from OMDB",
    "lineNumber": 250,
    "testTargets": [
      "MovieHelper#_getOmdbImages"
    ]
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it109",
    "access": null,
    "description": "should fail to get movie images from OMDB",
    "lineNumber": 257,
    "testTargets": [
      "MovieHelper#_getOmdbImages"
    ]
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it110",
    "access": null,
    "description": "should get movie images from Fanart",
    "lineNumber": 275,
    "testTargets": [
      "MovieHelper#_getFanartImages"
    ]
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it111",
    "access": null,
    "lineNumber": 282,
    "testTargets": [
      "MovieHelper#_getFanartImages"
    ]
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it112",
    "access": null,
    "lineNumber": 291,
    "testTargets": [
      "MovieHelper#_getFanartImages"
    ]
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it113",
    "access": null,
    "description": "should get movie images from various sources",
    "lineNumber": 298,
    "testTargets": [
      "MovieHelper#getImages"
    ]
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it114",
    "access": null,
    "description": "should get movie images from various sources",
    "lineNumber": 307,
    "testTargets": [
      "MovieHelper#getImages"
    ]
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it115",
    "access": null,
    "description": "should get info from Trakt and make a new movie object with 0 watching",
    "lineNumber": 321,
    "testTargets": [
      "MovieHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it116",
    "access": null,
    "description": "should get info from Trakt and make a new movie object with no genres",
    "lineNumber": 334,
    "testTargets": [
      "MovieHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it117",
    "access": null,
    "description": "should not get info from Trakt",
    "lineNumber": 354,
    "testTargets": [
      "MovieHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/scraper/helpers/MovieHelper.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/MovieHelper.spec.js~describe93.it118",
    "access": null,
    "description": "should not get info from Trakt",
    "lineNumber": 367,
    "testTargets": [
      "MovieHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 467,
    "kind": "testFile",
    "name": "test/scraper/helpers/ShowHelper.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\n/* eslint-disable quote-props */\nimport { expect } from 'chai'\nimport {\n  Database,\n  PopApi\n} from 'pop-api'\nimport sinon from 'sinon'\n\nimport testShow from '../../data/show.json'\nimport { logger } from '..'\nimport { Show } from '../../../src/models'\nimport { ShowHelper } from '../../../src/scraper/helpers'\nimport {\n  fanart,\n  trakt,\n  tmdb,\n  tvdb\n} from '../../../src/scraper/apiModules'\nimport { name } from '../../../package.json'\nimport * as abstractHelperTests from './AbstractHelper.spec'\n\n/** @test {ShowHelper} */\ndescribe('ShowHelper', () => {\n  /**\n   * A mock torrent object.\n   * @type {Object}\n   */\n  const torrent: Object = {\n    '1': {\n      '1': {\n        '480p': {\n          url: 'url',\n          seeds: 0,\n          peers: 0,\n          provider: 'test'\n        }\n      },\n      '2': {\n        '720p': {\n          url: 'url',\n          seeds: 0,\n          peers: 0,\n          provider: 'test'\n        }\n      }\n    }\n  }\n\n  /**\n   * A mock datebased torrent object.\n   * @type {Object}\n   */\n  const torrentDatebased: Object = {\n    '2016': {\n      '10-02': {\n        '480p': {\n          url: 'url',\n          seeds: 0,\n          peers: 0,\n          provider: 'test'\n        }\n      },\n      '10-09': {\n        '720p': {\n          url: 'url',\n          seeds: 0,\n          peers: 0,\n          provider: 'test'\n        }\n      }\n    }\n  }\n\n  /**\n   * The show helper to test.\n   * @type {ShowHelper}\n   */\n  let showHelper: ShowHelper\n\n  /**\n   * The database middleware to connect to MongoDB.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * Hook for setting up the ShowHelper tests.\n   * @type {Function}\n   */\n  before(done => {\n    if (!global.logger) {\n      global.logger = logger\n    }\n\n    showHelper = new ShowHelper({\n      name: 'ShowHelper',\n      Model: Show\n    })\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => Show.remove({}))\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {ShowHelper#_updateNumSeasons} */\n  it.skip('should update the number of seasons for a show', () => {\n    expect(true).to.be.true\n  })\n\n  /** @test {ShowHelper#_updateEpisode} */\n  it('should update an episode for an existing ', () => {\n    const matching = JSON.parse(JSON.stringify(testShow.episodes[0]))\n    const episode = JSON.parse(JSON.stringify(testShow.episodes[0]))\n    const show = JSON.parse(JSON.stringify(testShow))\n\n    let res = showHelper._updateEpisode(matching, episode, show, '480p')\n    expect(res).to.be.an('object')\n    res = showHelper._updateEpisode(matching, episode, show, '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {ShowHelper#_updateEpisode} */\n  it('should update an episode for an existing ', () => {\n    const matching = JSON.parse(JSON.stringify(testShow.episodes[0]))\n    const episode = JSON.parse(JSON.stringify(testShow.episodes[0]))\n    const show = JSON.parse(JSON.stringify(testShow))\n\n    episode.torrents['480p'] = {\n      seeds: 0,\n      url: 'test'\n    }\n    const res = showHelper._updateEpisode(matching, episode, show, '480p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {ShowHelper#_updateEpisode} */\n  it('should update an episode for an existing ', () => {\n    const matching = JSON.parse(JSON.stringify(testShow.episodes[0]))\n    const episode = JSON.parse(JSON.stringify(testShow.episodes[0]))\n    const show = JSON.parse(JSON.stringify(testShow))\n\n    matching.torrents = {}\n    let res = showHelper._updateEpisode(matching, episode, show, '480p')\n    expect(res).to.be.an('object')\n    res = showHelper._updateEpisode(matching, episode, show, '720p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {ShowHelper#_updateEpisode} */\n  it('should update an episode for an existing ', () => {\n    const matching = JSON.parse(JSON.stringify(testShow.episodes[0]))\n    const episode = JSON.parse(JSON.stringify(testShow.episodes[0]))\n    const show = JSON.parse(JSON.stringify(testShow))\n\n    episode.torrents = {}\n    const res = showHelper._updateEpisode(matching, episode, show, '480p')\n    expect(res).to.be.an('object')\n  })\n\n  /** @test {ShowHelper#_updateEpisodes} */\n  it('should save a given show', done => {\n    const foundStub = sinon.stub(showHelper.Model, 'findOne')\n    foundStub.returns(null)\n\n    showHelper._updateEpisodes(testShow).then(res => {\n      expect(res).to.be.an('object')\n      foundStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_updateEpisodes} */\n  it('should update a given show', done => {\n    const foundStub = sinon.stub(showHelper.Model, 'findOne')\n    foundStub.returns(testShow)\n    const updateStub = sinon.stub(showHelper.Model, 'findOneAndUpdate')\n    updateStub.returns(testShow)\n\n    showHelper._updateEpisodes(testShow).then(res => {\n      expect(res).to.be.an('object')\n      foundStub.restore()\n      updateStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_updateEpisodes} */\n  it('should update a given show', done => {\n    const found = JSON.parse(JSON.stringify(testShow))\n    found.episodes[0].first_aired = Date.now()\n    found.episodes[0].episode = 10\n\n    const foundStub = sinon.stub(showHelper.Model, 'findOne')\n    foundStub.returns(found)\n    const updateStub = sinon.stub(showHelper.Model, 'findOneAndUpdate')\n    updateStub.returns(testShow)\n\n    showHelper._updateEpisodes(testShow).then(res => {\n      expect(res).to.be.an('object')\n      foundStub.restore()\n      updateStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_updateEpisodes} */\n  it('should catch and print an error', done => {\n    const foundStub = sinon.stub(showHelper.Model, 'findOne')\n    foundStub.throws()\n\n    showHelper._updateEpisodes(testShow).then(res => {\n      expect(res).to.be.undefined\n      foundStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_addSeasonalSeason} */\n  it('should add a seasonal season to a show', done => {\n    const show = JSON.parse(JSON.stringify(testShow))\n    show.latest_episode = 0\n\n    showHelper._addSeasonalSeason(show, torrent, 1, 'westworld').then(res => {\n      expect(res).to.be.undefined\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_addSeasonalSeason} */\n  it('should add a seasonal season to a show', done => {\n    const show = JSON.parse(JSON.stringify(testShow))\n\n    showHelper._addSeasonalSeason(show, torrent, 1, 'westworld').then(res => {\n      expect(res).to.be.undefined\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_addSeasonalSeason} */\n  it('should add a seasonal season to a show', done => {\n    const show = JSON.parse(JSON.stringify(testShow))\n    const stub = sinon.stub(trakt.seasons, 'season')\n    stub.rejects()\n\n    showHelper._addSeasonalSeason(show, torrent, 1, 'westworld').then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_addDateBasedSeason} */\n  it('should add a date based season to a show', done => {\n    const show = JSON.parse(JSON.stringify(testShow))\n    show.latest_episode = 0\n    show.tvdb_id = 296762\n\n    showHelper._addDateBasedSeason(show, {\n      'dateBased': true,\n      ...torrentDatebased\n    }, 2016).then(res => {\n      expect(res).to.be.undefined\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_addDateBasedSeason} */\n  it('should not add a datebased season of episode 0', done => {\n    const show = JSON.parse(JSON.stringify(testShow))\n    show.tvdb_id = 296762\n\n    const stub = sinon.stub(tvdb, 'getSeriesAllById')\n    const tvdbShow = {\n      firstAired: '2016-10-02',\n      episodes: [{\n        airedEpisodeNumber: 0,\n        airedSeason: 1,\n        episodeName: 'Chestnut',\n        firstAired: '2016-10-09',\n        id: 5748834,\n        overview: 'A pair of guests â first-timer William, and repeat visitor Logan â arrive at Westworld with different expectations and agendas. Bernard  and Quality Assurance head Theresa Cullen debate whether a recent host anomaly is contagious. Meanwhile, behavior engineer Elsie Hughes tweaks the emotions of Maeve, a madam in Sweetwaterâs brothel, in order to avoid a recall. Cocky programmer Lee Sizemore pitches his latest narrative to the team, but Dr. Ford has other ideas. The Man in Black conscripts a condemned man, Lawrence, to help him uncover Westworldâs deepest secrets.'\n      }]\n    }\n    stub.resolves(tvdbShow)\n\n    showHelper._addDateBasedSeason(show, {\n      'dateBased': true,\n      ...torrentDatebased\n    }, 2016).then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_addDateBasedSeason} */\n  it('should catch an error when adding a datebased season', done => {\n    const show = JSON.parse(JSON.stringify(testShow))\n    show.tvdb_id = 296762\n\n    const stub = sinon.stub(tvdb, 'getSeriesAllById')\n    stub.throws()\n\n    showHelper._addDateBasedSeason(show, {\n      'dateBased': true,\n      ...torrentDatebased\n    }, 2016).then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#addEpisodes} */\n  it('should add episodes to a seasonal show', done => {\n    const stub = sinon.stub(showHelper, '_updateEpisodes')\n    stub.resolves()\n\n    showHelper.addEpisodes(testShow, {\n      'dateBased': true,\n      ...torrent\n    }, testShow.slug).then(res => {\n      expect(true).to.be.true\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#addEpisodes} */\n  it('should add episodes to a datebased show', done => {\n    const stub = sinon.stub(showHelper, '_updateEpisodes')\n    stub.resolves()\n\n    showHelper.addEpisodes(testShow, torrent, testShow.slug).then(res => {\n      expect(true).to.be.true\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#addEpisodes} */\n  it('should throw an error when adding episodes', done => {\n    const stub = sinon.stub(showHelper, '_addSeasonalSeason')\n    stub.throws()\n\n    showHelper.addEpisodes(testShow, torrent, testShow.slug).then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#_getTmdbImages} */\n  it('should fail to get show images from TMDB', done => {\n    const image = [{\n      iso_639_1: null,\n      file_path: null\n    }]\n    const stub = sinon.stub(tmdb.tv, 'images')\n    stub.resolves({\n      posters: image,\n      backdrops: image\n    })\n\n    showHelper._getTmdbImages()\n      .then(done)\n      .catch(err => {\n        expect(err).to.be.an('Error')\n        stub.restore()\n\n        done()\n      })\n  })\n\n  /** @test {ShowHelper#_getTvdbImages} */\n  it('should get show images from TVDB', done => {\n    showHelper._getTvdbImages(296762)\n      .then(res => abstractHelperTests.testImages(res, done))\n      .catch(done)\n  })\n\n  /** @test {ShowHelper#_getTvdbImages} */\n  it('should fail to get show images from TVDB', done => {\n    const stub = sinon.stub(tvdb, 'getSeriesById')\n    stub.resolves({\n      banner: null\n    })\n\n    showHelper._getTvdbImages(296762)\n      .then(done)\n      .catch(err => {\n        expect(err).to.be.an('Error')\n        stub.restore()\n\n        done()\n      })\n  })\n\n  /** @test {ShowHelper#_getFanartImages} */\n  it('should get show images from Fanart', done => {\n    showHelper._getFanartImages(75682)\n      .then(res => abstractHelperTests.testImages(res, done))\n      .catch(done)\n  })\n\n  /** @test {ShowHelper#_getFanartImages} */\n  it(`should fail to get show images from Fanart`, done => {\n    abstractHelperTests.testGetFanartImages({\n      clearart: [{\n        url: 'url'\n      }]\n    }, 'show', fanart, showHelper, done)\n  })\n\n  /** @test {ShowHelper#_getFanartImages} */\n  it(`should fail to get show images from Fanart`, done => {\n    abstractHelperTests.testGetFanartImages(\n      {}, 'show', fanart, showHelper, done\n    )\n  })\n\n  /** @test {ShowHelper#getImages} */\n  it('should get show images from various sources', done => {\n    showHelper.getImages({\n      tmdbId: 75682,\n      tvdbId: 296762\n    }).then(res => abstractHelperTests.testImages(res, done))\n      .catch(done)\n  })\n\n  /** @test {ShowHelper#getTraktInfo} */\n  it('should get info from Trakt and make a new show object', done => {\n    showHelper.getTraktInfo('westworld').then(res => {\n      expect(res).to.be.an('object')\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#getTraktInfo} */\n  it('should get info from Trakt and make a new show object with 0 watching', done => {\n    const stub = sinon.stub(trakt.shows, 'watching')\n    stub.resolves()\n\n    showHelper.getTraktInfo('westworld').then(res => {\n      expect(res).to.be.an('object')\n\n      stub.restore()\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#getTraktInfo} */\n  it('should get info from Trakt and make a new shows object with no genres', done => {\n    const stub = sinon.stub(trakt.shows, 'summary')\n    stub.returns(Promise.resolve({\n      ids: {\n        imdb: 'imdb',\n        tmdb: 'tmdb',\n        tvdb: 'tvdb'\n      },\n      airs: {\n        day: 'day',\n        time: 'time'\n      },\n      released: '2016-01-01',\n      genres: undefined\n    }))\n\n    showHelper.getTraktInfo('westworld').then(res => {\n      expect(res).to.be.an('object')\n\n      stub.restore()\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#getTraktInfo} */\n  it('should not get info from Trakt', done => {\n    const stub = sinon.stub(trakt.shows, 'summary')\n    stub.throws()\n\n    showHelper.getTraktInfo('westworld').then(res => {\n      expect(res).to.be.undefined\n\n      stub.restore()\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#getTraktInfo} */\n  it('should not get info from Trakt', done => {\n    const stub = sinon.stub(trakt.shows, 'summary')\n    stub.resolves({\n      ids: {\n        imdb: null\n      }\n    })\n\n    showHelper.getTraktInfo('westworld').then(res => {\n      expect(res).to.be.undefined\n\n      stub.restore()\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowHelper#getTraktInfo} */\n  it('should not get info from Trakt', done => {\n    const stub = sinon.stub(trakt.shows, 'summary')\n    stub.resolves(null)\n\n    showHelper.getTraktInfo('westworld').then(res => {\n      expect(res).to.be.undefined\n\n      stub.restore()\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Hook for tearing down the ShowHelper tests.\n   * @type {Function}\n   */\n  after(done => {\n    database.disconnect()\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/helpers/ShowHelper.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "access": null,
    "description": "ShowHelper",
    "lineNumber": 26,
    "testTargets": [
      "ShowHelper"
    ]
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it120",
    "access": null,
    "description": "should update an episode for an existing ",
    "lineNumber": 118,
    "testTargets": [
      "ShowHelper#_updateEpisode"
    ]
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it121",
    "access": null,
    "description": "should update an episode for an existing ",
    "lineNumber": 130,
    "testTargets": [
      "ShowHelper#_updateEpisode"
    ]
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it122",
    "access": null,
    "description": "should update an episode for an existing ",
    "lineNumber": 144,
    "testTargets": [
      "ShowHelper#_updateEpisode"
    ]
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it123",
    "access": null,
    "description": "should update an episode for an existing ",
    "lineNumber": 157,
    "testTargets": [
      "ShowHelper#_updateEpisode"
    ]
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it124",
    "access": null,
    "description": "should save a given show",
    "lineNumber": 168,
    "testTargets": [
      "ShowHelper#_updateEpisodes"
    ]
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it125",
    "access": null,
    "description": "should update a given show",
    "lineNumber": 181,
    "testTargets": [
      "ShowHelper#_updateEpisodes"
    ]
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it126",
    "access": null,
    "description": "should update a given show",
    "lineNumber": 197,
    "testTargets": [
      "ShowHelper#_updateEpisodes"
    ]
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it127",
    "access": null,
    "description": "should catch and print an error",
    "lineNumber": 217,
    "testTargets": [
      "ShowHelper#_updateEpisodes"
    ]
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it128",
    "access": null,
    "description": "should add a seasonal season to a show",
    "lineNumber": 230,
    "testTargets": [
      "ShowHelper#_addSeasonalSeason"
    ]
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it129",
    "access": null,
    "description": "should add a seasonal season to a show",
    "lineNumber": 241,
    "testTargets": [
      "ShowHelper#_addSeasonalSeason"
    ]
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it130",
    "access": null,
    "description": "should add a seasonal season to a show",
    "lineNumber": 251,
    "testTargets": [
      "ShowHelper#_addSeasonalSeason"
    ]
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it131",
    "access": null,
    "description": "should add a date based season to a show",
    "lineNumber": 265,
    "testTargets": [
      "ShowHelper#_addDateBasedSeason"
    ]
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it132",
    "access": null,
    "description": "should not add a datebased season of episode 0",
    "lineNumber": 280,
    "testTargets": [
      "ShowHelper#_addDateBasedSeason"
    ]
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it133",
    "access": null,
    "description": "should catch an error when adding a datebased season",
    "lineNumber": 310,
    "testTargets": [
      "ShowHelper#_addDateBasedSeason"
    ]
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it134",
    "access": null,
    "description": "should add episodes to a seasonal show",
    "lineNumber": 329,
    "testTargets": [
      "ShowHelper#addEpisodes"
    ]
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it135",
    "access": null,
    "description": "should add episodes to a datebased show",
    "lineNumber": 345,
    "testTargets": [
      "ShowHelper#addEpisodes"
    ]
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it136",
    "access": null,
    "description": "should throw an error when adding episodes",
    "lineNumber": 358,
    "testTargets": [
      "ShowHelper#addEpisodes"
    ]
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it137",
    "access": null,
    "description": "should fail to get show images from TMDB",
    "lineNumber": 371,
    "testTargets": [
      "ShowHelper#_getTmdbImages"
    ]
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it138",
    "access": null,
    "description": "should get show images from TVDB",
    "lineNumber": 393,
    "testTargets": [
      "ShowHelper#_getTvdbImages"
    ]
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it139",
    "access": null,
    "description": "should fail to get show images from TVDB",
    "lineNumber": 400,
    "testTargets": [
      "ShowHelper#_getTvdbImages"
    ]
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it140",
    "access": null,
    "description": "should get show images from Fanart",
    "lineNumber": 417,
    "testTargets": [
      "ShowHelper#_getFanartImages"
    ]
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it141",
    "access": null,
    "lineNumber": 424,
    "testTargets": [
      "ShowHelper#_getFanartImages"
    ]
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it142",
    "access": null,
    "lineNumber": 433,
    "testTargets": [
      "ShowHelper#_getFanartImages"
    ]
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it143",
    "access": null,
    "description": "should get show images from various sources",
    "lineNumber": 440,
    "testTargets": [
      "ShowHelper#getImages"
    ]
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it144",
    "access": null,
    "description": "should get info from Trakt and make a new show object",
    "lineNumber": 449,
    "testTargets": [
      "ShowHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it145",
    "access": null,
    "description": "should get info from Trakt and make a new show object with 0 watching",
    "lineNumber": 457,
    "testTargets": [
      "ShowHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it146",
    "access": null,
    "description": "should get info from Trakt and make a new shows object with no genres",
    "lineNumber": 470,
    "testTargets": [
      "ShowHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it147",
    "access": null,
    "description": "should not get info from Trakt",
    "lineNumber": 495,
    "testTargets": [
      "ShowHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it148",
    "access": null,
    "description": "should not get info from Trakt",
    "lineNumber": 508,
    "testTargets": [
      "ShowHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/scraper/helpers/ShowHelper.spec.js~describe119",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/helpers/ShowHelper.spec.js~describe119.it149",
    "access": null,
    "description": "should not get info from Trakt",
    "lineNumber": 525,
    "testTargets": [
      "ShowHelper#getTraktInfo"
    ]
  },
  {
    "__docId__": 499,
    "kind": "testFile",
    "name": "test/scraper/providers/BaseProvider.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport sinon from 'sinon'\nimport { expect } from 'chai'\nimport { PopApiScraper } from 'pop-api-scraper'\n\nimport BaseProvider from '../../../src/scraper/providers/BaseProvider'\n// import { katMovieConfig } from '../../../src/scraper/configs/movieConfigs'\nimport { logger } from '..'\nimport { nyaaCommieConfig } from '../../../src/scraper/configs/showConfigs'\nimport { ytsConfig } from '../../../src/scraper/configs/ytsConfigs'\n\n/** @test {BaseProvider} */\ndescribe('BaseProvider', () => {\n  /**\n   * The base provider to test.\n   * @type {BaseProvider}\n   */\n  let baseProvider: BaseProvider\n\n  /**\n   * Hook for setting up the BaseProvider tests.\n   * @type {Function}\n   */\n  before(() => {\n    if (!global.logger) {\n      global.logger = logger\n    }\n\n    baseProvider = new BaseProvider(PopApiScraper, {\n      configs: [ytsConfig]\n    })\n  })\n\n  /** @test {BaseProvider.Types} */\n  it('should check if BaseProvider has a static ContentTypes attributes', () => {\n    expect(BaseProvider.ContentTypes).to.exist\n    expect(BaseProvider.ContentTypes).to.be.an('object')\n  })\n\n  /** @test {BaseProvider#_getMovieContent} */\n  it('should not get any movie content', done => {\n    baseProvider.setConfig(nyaaCommieConfig)\n    const stub = sinon.stub(baseProvider.helper, 'getTraktInfo')\n    stub.resolves(null)\n\n    baseProvider._getMovieContent({\n      episodes: {\n        // @flow-ignore\n        0: {}\n      }\n    }).then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {BaseProvider#_getShowContent} */\n  it('should not get any show content', done => {\n    baseProvider.setConfig(nyaaCommieConfig)\n    const stub = sinon.stub(baseProvider.helper, 'getTraktInfo')\n    stub.resolves(null)\n\n    baseProvider._getShowContent({}).then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {BaseProvider#getContent} */\n  it('should return an error ', done => {\n    baseProvider.contentType = 'faulty'\n    baseProvider.getContent({})\n      .then(done)\n      .catch(err => {\n        expect(err).to.be.an('Error')\n        done()\n      })\n  })\n\n  /** @test {BaseProvider#extractContent} */\n  it('should throw an error when calling the extractContent method', () => {\n    expect(baseProvider.extractContent.bind({}, {})).to\n      .throw('Using default method: \\'extractContent\\'')\n  })\n\n  /** @test {BaseProvider#getContentData} */\n  it('should not get info from a given torrent object', () => {\n    baseProvider.regexps = [{\n      regex: /\\d+/g\n    }]\n    const contentData = baseProvider.getContentData({\n      torrent: {\n        title: 'faulty'\n      }\n    })\n\n    expect(contentData).to.be.undefined\n  })\n\n  /** @test {BaseProvider#attachtTorrent} */\n  it('should throw an error when calling the attachTorrent method', () => {\n    expect(baseProvider.attachTorrent.bind({}, {})).to\n      .throw('Using default method: \\'attachTorrent\\'')\n  })\n\n  /** @test {BaseProvider#getAllContent} */\n  it('should throw an error when calling the getAllContent method', () => {\n    expect(baseProvider.getAllContent.bind({}, {})).to\n      .throw('Using default method: \\'getAllContent\\'')\n    expect(baseProvider.getAllContent.bind({}, {\n      lang: 'de'\n    })).to.throw('Using default method: \\'getAllContent\\'')\n  })\n\n  /** @test {BaseProvider#getAllTorrents} */\n  it('should get the results of all the torrents', done => {\n    baseProvider.setConfig(ytsConfig)\n    const stub = sinon.stub(baseProvider.api, 'search')\n    stub.resolves({\n      results: [{}]\n    })\n\n    baseProvider.getAllTorrents(1).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.equal(1)\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {BaseProvider#getAllTorrents} */\n  it('should get no torrents to concatenate', done => {\n    baseProvider.setConfig(ytsConfig)\n    const stub = sinon.stub(baseProvider.api, 'search')\n    stub.resolves([])\n\n    baseProvider.getAllTorrents(1).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.equal(0)\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Helper function to test the `getTotalPages` method with different\n   * providers.\n   * @param {!Object} config - The config to test with.\n   * @returns {undefined}\n   */\n  function executeTotalPages(config: Object): void {\n    /** @test {BaseProvider#getTotalPages} */\n    it('should return a the number of the total pages to scrape', done => {\n      baseProvider = new BaseProvider(PopApiScraper, {\n        configs: [config]\n      })\n      baseProvider.setConfig(config)\n\n      baseProvider.getTotalPages().then(res => {\n        expect(res).to.be.a('number')\n        done()\n      }).catch(done)\n    })\n  }\n\n  [\n    nyaaCommieConfig,\n    // katMovieConfig,\n    ytsConfig\n  ].map(executeTotalPages)\n\n  /** @test {BaseProvider#getTotalPages} */\n  it('should return a the number of the total pages to scrape', done => {\n    const stub = sinon.stub(baseProvider.api, 'search')\n    stub.resolves({\n      total_pages: 1\n    })\n\n    baseProvider.getTotalPages().then(res => {\n      expect(res).to.be.a('number')\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {BaseProvider#setConfig} */\n  it('should set the configuration to scrape', () => {\n    baseProvider.setConfig(ytsConfig)\n\n    expect(baseProvider.api).to.exist\n    expect(baseProvider.api).to.be.an('object')\n    expect(baseProvider.name).to.exist\n    expect(baseProvider.name).to.be.a('string')\n    expect(baseProvider.contentType).to.exist\n    expect(baseProvider.contentType).to.be.a('string')\n    expect(baseProvider.helper).to.exist\n    expect(baseProvider.helper).to.be.an('object')\n    // expect(baseProvider.query).to.exist\n    // expect(baseProvider.query).to.be.an('object')\n    // expect(baseProvider.regexps).to.exist\n    // expect(baseProvider.regexps).to.be.an('array')\n  })\n\n  /** @test {BaseProvider#scrapeConfig} */\n  it('should not be able to get the total pages to scrape', done => {\n    const stub = sinon.stub(baseProvider, 'getTotalPages')\n    stub.resolves(null)\n\n    baseProvider.scrapeConfig(ytsConfig).then(res => {\n      expect(res).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {BaseProvider#scrapeConfig} */\n  it('should throw and catch an error to continue', done => {\n    const stub = sinon.stub(baseProvider, 'getTotalPages')\n    stub.rejects()\n\n    baseProvider.scrapeConfig(ytsConfig)\n      .then(done)\n      .catch(err => {\n        expect(err).to.be.undefined\n        stub.restore()\n\n        done()\n      })\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/providers/BaseProvider.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "describe150",
    "testId": 150,
    "memberof": "test/scraper/providers/BaseProvider.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "access": null,
    "description": "BaseProvider",
    "lineNumber": 15,
    "testTargets": [
      "BaseProvider"
    ]
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it151",
    "access": null,
    "description": "should check if BaseProvider has a static ContentTypes attributes",
    "lineNumber": 37,
    "testTargets": [
      "BaseProvider.Types"
    ]
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it152",
    "access": null,
    "description": "should not get any movie content",
    "lineNumber": 43,
    "testTargets": [
      "BaseProvider#_getMovieContent"
    ]
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it153",
    "access": null,
    "description": "should not get any show content",
    "lineNumber": 62,
    "testTargets": [
      "BaseProvider#_getShowContent"
    ]
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it154",
    "access": null,
    "description": "should return an error ",
    "lineNumber": 76,
    "testTargets": [
      "BaseProvider#getContent"
    ]
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it155",
    "access": null,
    "description": "should throw an error when calling the extractContent method",
    "lineNumber": 87,
    "testTargets": [
      "BaseProvider#extractContent"
    ]
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it156",
    "access": null,
    "description": "should not get info from a given torrent object",
    "lineNumber": 93,
    "testTargets": [
      "BaseProvider#getContentData"
    ]
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it157",
    "access": null,
    "description": "should throw an error when calling the attachTorrent method",
    "lineNumber": 107,
    "testTargets": [
      "BaseProvider#attachtTorrent"
    ]
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it158",
    "access": null,
    "description": "should throw an error when calling the getAllContent method",
    "lineNumber": 113,
    "testTargets": [
      "BaseProvider#getAllContent"
    ]
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it159",
    "access": null,
    "description": "should get the results of all the torrents",
    "lineNumber": 122,
    "testTargets": [
      "BaseProvider#getAllTorrents"
    ]
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it160",
    "access": null,
    "description": "should get no torrents to concatenate",
    "lineNumber": 139,
    "testTargets": [
      "BaseProvider#getAllTorrents"
    ]
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it161",
    "access": null,
    "description": "should return a the number of the total pages to scrape",
    "lineNumber": 161,
    "testTargets": [
      "BaseProvider#getTotalPages"
    ]
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it162",
    "access": null,
    "description": "should return a the number of the total pages to scrape",
    "lineNumber": 181,
    "testTargets": [
      "BaseProvider#getTotalPages"
    ]
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it163",
    "access": null,
    "description": "should set the configuration to scrape",
    "lineNumber": 196,
    "testTargets": [
      "BaseProvider#setConfig"
    ]
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it164",
    "access": null,
    "description": "should not be able to get the total pages to scrape",
    "lineNumber": 214,
    "testTargets": [
      "BaseProvider#scrapeConfig"
    ]
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/scraper/providers/BaseProvider.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BaseProvider.spec.js~describe150.it165",
    "access": null,
    "description": "should throw and catch an error to continue",
    "lineNumber": 227,
    "testTargets": [
      "BaseProvider#scrapeConfig"
    ]
  },
  {
    "__docId__": 516,
    "kind": "testFile",
    "name": "test/scraper/providers/BulkProvider.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport sinon from 'sinon'\nimport { expect } from 'chai'\nimport {\n  Database,\n  PopApi\n} from 'pop-api'\nimport { PopApiScraper } from 'pop-api-scraper'\n\nimport BulkProvider from '../../../src/scraper/providers/BulkProvider'\nimport { eztvConfig } from '../../../src/scraper/configs/bulkConfigs'\nimport { logger } from '..'\nimport { name } from '../../../package.json'\n\n/** @test {BulkProvider} */\ndescribe('BulkProvider', () => {\n  /**\n   * The bulk provider to test.\n   * @type {BulkProvider}\n   */\n  let bulkProvider: BulkProvider\n\n  /**\n   * The database middleware from 'pop-api'.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * Hook for setting up the BulkProvider tests.\n   * @type {Function}\n   */\n  before(done => {\n    if (!global.logger) {\n      global.logger = logger\n    }\n\n    bulkProvider = new BulkProvider(PopApiScraper, {\n      configs: [eztvConfig]\n    })\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {BulkProvider#scrapeConfig} */\n  it('should return a list of all the inserted torrents', done => {\n    bulkProvider.setConfig(eztvConfig)\n    const stub = sinon.stub(bulkProvider.api, 'getAll')\n    stub.resolves([{\n      show: 'Westworld',\n      id: 1913,\n      slug: 'westworld'\n    }])\n\n    bulkProvider.scrapeConfig(eztvConfig).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.be.at.least(1)\n\n      stub.restore()\n      done()\n    }).catch(done)\n  })\n\n  /** @test {BulkProvider#scrapeConfig} */\n  it('should throw and catch an error while scraping', done => {\n    bulkProvider.setConfig(eztvConfig)\n    const stub = sinon.stub(bulkProvider.api, 'getAll')\n    stub.resolves([{}])\n\n    bulkProvider.scrapeConfig(eztvConfig).then(res => {\n      expect(res).to.be.an('array')\n      expect(res[0]).to.be.undefined\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Hook for tearing down the YtsProvider tests.\n   * @type {Function}\n   */\n  after(done => {\n    database.disconnect()\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/providers/BulkProvider.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "test/scraper/providers/BulkProvider.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/providers/BulkProvider.spec.js~describe166",
    "access": null,
    "description": "BulkProvider",
    "lineNumber": 18,
    "testTargets": [
      "BulkProvider"
    ]
  },
  {
    "__docId__": 518,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/scraper/providers/BulkProvider.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BulkProvider.spec.js~describe166.it167",
    "access": null,
    "description": "should return a list of all the inserted torrents",
    "lineNumber": 53,
    "testTargets": [
      "BulkProvider#scrapeConfig"
    ]
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/scraper/providers/BulkProvider.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/BulkProvider.spec.js~describe166.it168",
    "access": null,
    "description": "should throw and catch an error while scraping",
    "lineNumber": 72,
    "testTargets": [
      "BulkProvider#scrapeConfig"
    ]
  },
  {
    "__docId__": 520,
    "kind": "testFile",
    "name": "test/scraper/providers/MovieProvider.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport sinon from 'sinon'\nimport { expect } from 'chai'\nimport {\n  Database,\n  PopApi\n} from 'pop-api'\nimport { PopApiScraper } from 'pop-api-scraper'\n\nimport MovieProvider from '../../../src/scraper/providers/MovieProvider'\nimport movieMap from '../../../src/scraper/providers/maps/movieMap'\nimport { logger } from '..'\nimport { katMovieConfig } from '../../../src/scraper/configs/movieConfigs'\nimport { name } from '../../../package.json'\n\n/** @test {MovieProvider} */\ndescribe('MovieProvider', () => {\n  /**\n   * The movie provider to test.\n   * @type {Movie}\n   */\n  let movieProvider: MovieProvider\n\n  /**\n   * The database middleware from 'pop-api'.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * Hook for setting up the MovieProvider tests.\n   * @type {Function}\n   */\n  before(done => {\n    if (!global.logger) {\n      global.logger = logger\n    }\n\n    movieProvider = new MovieProvider(PopApiScraper, {\n      configs: [katMovieConfig]\n    })\n    movieProvider.setConfig(katMovieConfig)\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {MovieProvider#extractContent} */\n  it('should extract movie information based on a regex', () => {\n    movieMap.testpool = 'deadpool'\n    const content = movieProvider.extractContent({\n      torrent: {\n        title: 'Testpool   2016 BluRay 1080p x264 AAC 5 1 - Hon3y'\n      },\n      regex: {\n        regex: /(.*).(\\d{4})\\D+(\\d{3,4}p)/i\n      },\n      lang: 'en'\n    })\n\n    if (content) {\n      expect(content).to.be.an('object')\n      expect(content.movieTitle).to.be.a('string')\n      expect(content.slug).to.be.a('string')\n      expect(content.slugYear).to.be.a('string')\n      expect(content.year).to.be.a('number')\n      expect(content.quality).to.be.a('string')\n      expect(content.language).to.be.a('string')\n      expect(content.type).to.be.a('string')\n      expect(content.torrents).to.be.an('object')\n    } else {\n      expect(true).to.be.false\n    }\n  })\n\n  /** @test {MovieProvider#attachTorrent} */\n  it('should create a new movie object with a torrent attached', () => {\n    let movie = {\n      torrents: {}\n    }\n\n    movie = movieProvider.attachTorrent({\n      movie,\n      torrent: {},\n      quality: '720p',\n      lang: 'en'\n    })\n    expect(movie.torrents.en).to.exist\n    expect(movie.torrents.en['720p']).to.exist\n    movie = movieProvider.attachTorrent({\n      movie,\n      torrent: {},\n      quality: '720p',\n      lang: 'en'\n    })\n    expect(movie.torrents.en).to.exist\n    expect(movie.torrents.en['720p']).to.exist\n  })\n\n  /** @test {MovieProvider#getAllContent} */\n  it('should get no content from an empty torrents array', done => {\n    movieProvider.getAllContent({\n      torrents: [null]\n    }).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.equal(0)\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieProvider#getAllContent} */\n  it('should get no content from a filled torrents array', done => {\n    movieProvider.getAllContent({\n      torrents: [{\n        title: 'faulty'\n      }]\n    }).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.equal(0)\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieProvider#getAllContent} */\n  it('should merge the torrent objects into one', done => {\n    movieProvider.getAllContent({\n      torrents: [{\n        title: 'Deadpool 2016 BluRay 1080p x264 AAC 5 1 - Hon3y'\n      }, {\n        title: 'Deadpool 2016 BluRay 720p x264 AAC 5 1 - Hon3y'\n      }]\n    }).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.equal(1)\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {MovieProvider#scrapeConfig} */\n  it.skip('should return a list of all the inserted torrents', done => {\n    const stub = sinon.stub(movieProvider, 'getTotalPages')\n    stub.resolves(1)\n\n    movieProvider.scrapeConfig(katMovieConfig).then(res => {\n      if (res) {\n        expect(res).to.be.an('array')\n        expect(res.length).to.be.at.least(1)\n      } else {\n        expect(true).to.be.false\n      }\n      stub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Hook for tearing down the MovieProvider tests.\n   * @type {Function}\n   */\n  after(done => {\n    database.disconnect()\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/providers/MovieProvider.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/scraper/providers/MovieProvider.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/providers/MovieProvider.spec.js~describe169",
    "access": null,
    "description": "MovieProvider",
    "lineNumber": 19,
    "testTargets": [
      "MovieProvider"
    ]
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/scraper/providers/MovieProvider.spec.js~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/MovieProvider.spec.js~describe169.it170",
    "access": null,
    "description": "should extract movie information based on a regex",
    "lineNumber": 55,
    "testTargets": [
      "MovieProvider#extractContent"
    ]
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/scraper/providers/MovieProvider.spec.js~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/MovieProvider.spec.js~describe169.it171",
    "access": null,
    "description": "should create a new movie object with a torrent attached",
    "lineNumber": 83,
    "testTargets": [
      "MovieProvider#attachTorrent"
    ]
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/scraper/providers/MovieProvider.spec.js~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/MovieProvider.spec.js~describe169.it172",
    "access": null,
    "description": "should get no content from an empty torrents array",
    "lineNumber": 107,
    "testTargets": [
      "MovieProvider#getAllContent"
    ]
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/scraper/providers/MovieProvider.spec.js~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/MovieProvider.spec.js~describe169.it173",
    "access": null,
    "description": "should get no content from a filled torrents array",
    "lineNumber": 119,
    "testTargets": [
      "MovieProvider#getAllContent"
    ]
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/scraper/providers/MovieProvider.spec.js~describe169",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/MovieProvider.spec.js~describe169.it174",
    "access": null,
    "description": "should merge the torrent objects into one",
    "lineNumber": 133,
    "testTargets": [
      "MovieProvider#getAllContent"
    ]
  },
  {
    "__docId__": 527,
    "kind": "testFile",
    "name": "test/scraper/providers/ShowProvider.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport sinon from 'sinon'\nimport { expect } from 'chai'\nimport {\n  Database,\n  PopApi\n} from 'pop-api'\nimport { PopApiScraper } from 'pop-api-scraper'\n\nimport ShowProvider from '../../../src/scraper/providers/ShowProvider'\nimport showMap from '../../../src/scraper/providers/maps/showMap'\nimport { logger } from '..'\nimport { nyaaCommieConfig } from '../../../src/scraper/configs/showConfigs'\nimport { name } from '../../../package.json'\n\n/** @test {ShowProvider} */\ndescribe('ShowProvider', () => {\n  /**\n   * The show provider to test.\n   * @type {ShowProvider}\n   */\n  let showProvider: ShowProvider\n\n  /**\n   * The database middleware from 'pop-api'.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * Hook for setting up the ShowProvider tests.\n   * @type {Function}\n   */\n  before(done => {\n    if (!global.logger) {\n      global.logger = logger\n    }\n\n    showProvider = new ShowProvider(PopApiScraper, {\n      configs: [nyaaCommieConfig]\n    })\n    showProvider.setConfig(nyaaCommieConfig)\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => done())\n      .catch(done)\n  })\n\n  /**\n   * Test the attributes of an object returned by the `_extractContent method.\n   * @param {!Object|undefined} content - The content object to test.\n   * @param {!string} type - The type of the season and episode.\n   * @returns {void}\n   */\n  function testContentAttributes(content: Object | void, type: string): void {\n    if (content) {\n      expect(content).to.be.an('object')\n      expect(content.showTitle).to.be.a('string')\n      expect(content.slug).to.be.a('string')\n      expect(content.season).to.be.a(type)\n      expect(content.episode).to.be.a(type)\n      expect(content.quality).to.be.a('string')\n      expect(content.dateBased).to.be.a('boolean')\n      expect(content.episodes).to.be.an('object')\n      expect(content.type).to.be.a('string')\n    } else {\n      expect(true).to.be.false\n    }\n  }\n\n  /** @test {ShowProvider#extractContent} */\n  it('should extract show information based on a seasonal regex', () => {\n    showMap.testworld = 'westworld'\n    const content = showProvider.extractContent({\n      torrent: {\n        title: 'Testworld S01E06 720p HDTV x264-FLEET [eztv]',\n        seeds: 1,\n        peers: 1\n      },\n      regex: {\n        regex: /(.*).[sS](\\d{2})[eE](\\d{2})/i,\n        dateBased: false\n      }\n    })\n\n    testContentAttributes(content, 'string')\n  })\n\n  /** @test {ShowProvider#extractContent} */\n  it('should extract show information based on a datebased regex', () => {\n    const content = showProvider.extractContent({\n      torrent: {\n        title: 'Jimmy Fallon 2017 10 10 Mandy Moore 720p HDTV x264-CROOKS [eztv]',\n        seeds: 1,\n        peers: 1\n      },\n      regex: {\n        regex: /(.*).(\\d{4}).(\\d{2}.\\d{2})/i,\n        dateBased: true\n      }\n    })\n\n    testContentAttributes(content, 'number')\n  })\n\n  /** @test {ShowProvider#extractContent} */\n  it('should not extract show information based on a regex', () => {\n    const content = showProvider.extractContent({\n      torrent: {\n        title: 'faulty'\n      },\n      regex: {\n        regex: /(.*).[sS](\\d{2})[eE](\\d{2})/i\n      }\n    })\n\n    expect(content).to.be.undefined\n  })\n\n  /** @test {ShowProvider#attachTorrent} */\n  it('should create a new show object with a torrent attached', () => {\n    let show = showProvider.attachTorrent({\n      show: {\n        showTitle: 'repack',\n        episodes: {}\n      },\n      torrent: {\n        seeds: 2\n      },\n      season: 1,\n      episode: 1,\n      quality: '480p'\n    })\n    expect(show).to.be.an('object')\n\n    show.showTitle = 'test'\n    show = showProvider.attachTorrent({\n      show,\n      torrent: {\n        seeds: 1\n      },\n      season: 1,\n      episode: 1,\n      quality: '480p'\n    })\n    expect(show).to.be.an('object')\n  })\n\n  /** @test {ShowProvider#getAllContent} */\n  it('should get no content from an empty torrents array', done => {\n    showProvider.getAllContent({\n      torrents: [null]\n    }).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.equal(0)\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowProvider#getAllContent} */\n  it('should get no content from a filled torrents array', done => {\n    showProvider.getAllContent({\n      torrents: [{\n        title: 'faulty'\n      }]\n    }).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.equal(0)\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowProvider#getAllContent} */\n  it('should merge the torrent objects into one', done => {\n    showProvider.getAllContent({\n      torrents: [{\n        title: 'Westworld S01E06 720p HDTV x264-FLEET [eztv]'\n      }, {\n        title: 'Westworld S01E07 720p HDTV x264-FLEET [eztv]'\n      }]\n    }).then(res => {\n      expect(res).to.be.an('array')\n      expect(res.length).to.equal(1)\n\n      done()\n    }).catch(done)\n  })\n\n  /** @test {ShowProvider#scrapeConfig} */\n  it('should return a list of all the inserted torrents', done => {\n    const stub = sinon.stub(showProvider, 'getTotalPages')\n    stub.resolves(1)\n\n    showProvider.scrapeConfig(nyaaCommieConfig).then(res => {\n      if (res) {\n        expect(res).to.be.an('array')\n        expect(res.length).to.be.at.least(1)\n      } else {\n        expect(true).to.be.false\n      }\n\n      stub.restore()\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Hook for tearing down the ShowProvider tests.\n   * @type {Function}\n   */\n  after(done => {\n    database.disconnect()\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/providers/ShowProvider.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "test/scraper/providers/ShowProvider.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "access": null,
    "description": "ShowProvider",
    "lineNumber": 19,
    "testTargets": [
      "ShowProvider"
    ]
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175.it176",
    "access": null,
    "description": "should extract show information based on a seasonal regex",
    "lineNumber": 77,
    "testTargets": [
      "ShowProvider#extractContent"
    ]
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175.it177",
    "access": null,
    "description": "should extract show information based on a datebased regex",
    "lineNumber": 95,
    "testTargets": [
      "ShowProvider#extractContent"
    ]
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175.it178",
    "access": null,
    "description": "should not extract show information based on a regex",
    "lineNumber": 112,
    "testTargets": [
      "ShowProvider#extractContent"
    ]
  },
  {
    "__docId__": 532,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175.it179",
    "access": null,
    "description": "should create a new show object with a torrent attached",
    "lineNumber": 126,
    "testTargets": [
      "ShowProvider#attachTorrent"
    ]
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175.it180",
    "access": null,
    "description": "should get no content from an empty torrents array",
    "lineNumber": 155,
    "testTargets": [
      "ShowProvider#getAllContent"
    ]
  },
  {
    "__docId__": 534,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175.it181",
    "access": null,
    "description": "should get no content from a filled torrents array",
    "lineNumber": 167,
    "testTargets": [
      "ShowProvider#getAllContent"
    ]
  },
  {
    "__docId__": 535,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175.it182",
    "access": null,
    "description": "should merge the torrent objects into one",
    "lineNumber": 181,
    "testTargets": [
      "ShowProvider#getAllContent"
    ]
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "test/scraper/providers/ShowProvider.spec.js~describe175",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/ShowProvider.spec.js~describe175.it183",
    "access": null,
    "description": "should return a list of all the inserted torrents",
    "lineNumber": 197,
    "testTargets": [
      "ShowProvider#scrapeConfig"
    ]
  },
  {
    "__docId__": 537,
    "kind": "testFile",
    "name": "test/scraper/providers/YtsProvider.spec.js",
    "content": "// Import the necessary modules.\n// @flow\n/* eslint-disable no-unused-expressions */\nimport sinon from 'sinon'\nimport { expect } from 'chai'\nimport {\n  Database,\n  PopApi\n} from 'pop-api'\nimport { PopApiScraper } from 'pop-api-scraper'\n\nimport YtsProvider from '../../../src/scraper/providers/YtsProvider'\nimport { logger } from '..'\nimport { ytsConfig } from '../../../src/scraper/configs/ytsConfigs'\nimport { name } from '../../../package.json'\n\n/** @test {YtsProvider} */\ndescribe('YtsProvider', () => {\n  /**\n   * The yts provider to test.\n   * @type {YtsProvider}\n   */\n  let ytsProvider: YtsProvider\n\n  /**\n   * The database middleware from 'pop-api'.\n   * @type {Database}\n   */\n  let database: Database\n\n  /**\n   * The torrent object to test with.\n   * @type {Object}\n   */\n  let torrent: Object\n\n  /**\n   * Hook for setting up the YtsProvider tests.\n   * @type {Function}\n   */\n  before(done => {\n    if (!global.logger) {\n      global.logger = logger\n    }\n\n    ytsProvider = new YtsProvider(PopApiScraper, {\n      configs: [ytsConfig]\n    })\n    torrent = {\n      hash: 'hash',\n      quality: '720p',\n      size: '700 Mb',\n      size_bytes: 123456789\n    }\n\n    database = new Database(PopApi, {\n      database: name\n    })\n    database.connect()\n      .then(() => done())\n      .catch(done)\n  })\n\n  /** @test {YtsProvider#extractContent} */\n  it('should extract movie information form a YTS object', () => {\n    const movie = ytsProvider.extractContent({\n      torrent: {\n        title: 'title',\n        imdb_code: 'tt123456',\n        year: 1234,\n        torrents: [torrent]\n      }\n    })\n    expect(movie).to.be.an('object')\n  })\n\n  /** @test {YtsProvider#getContentData} */\n  it('should get movie data from a given torrent', () => {\n    let data = ytsProvider.getContentData({\n      torrent: {\n        torrents: [torrent],\n        imdb_code: 'tt123456',\n        language: 'english'\n      },\n      lang: 'de'\n    })\n    expect(data).to.be.an('object')\n\n    data = ytsProvider.getContentData({\n      torrent: {\n        torrents: [torrent],\n        imdb_code: 'tt123456',\n        language: 'faulty'\n      }\n    })\n    expect(data).to.be.undefined\n  })\n\n  /** @test {YtsProvider#scrapeConfig} */\n  it('should return a list of all the inserted torrents', done => {\n    const stub = sinon.stub(ytsProvider, 'getTotalPages')\n    stub.resolves(1)\n\n    // const apiStub = sinon.stub(ytsProvider.api, 'search')\n    // stub.resolves()\n\n    ytsProvider.scrapeConfig(ytsConfig).then(res => {\n      if (res) {\n        expect(res).to.be.an('array')\n        expect(res.length).to.be.at.least(1)\n      } else {\n        expect(true).to.be.false\n      }\n      stub.restore()\n      // apiStub.restore()\n\n      done()\n    }).catch(done)\n  })\n\n  /**\n   * Hook for tearing down the YtsProvider tests.\n   * @type {Function}\n   */\n  after(done => {\n    database.disconnect()\n      .then(() => done())\n      .catch(done)\n  })\n})\n",
    "static": true,
    "longname": "/Users/maxwellnderitu/WebstormProjects/popcorn-api/test/scraper/providers/YtsProvider.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 538,
    "kind": "test",
    "name": "describe184",
    "testId": 184,
    "memberof": "test/scraper/providers/YtsProvider.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/scraper/providers/YtsProvider.spec.js~describe184",
    "access": null,
    "description": "YtsProvider",
    "lineNumber": 18,
    "testTargets": [
      "YtsProvider"
    ]
  },
  {
    "__docId__": 539,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/scraper/providers/YtsProvider.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/YtsProvider.spec.js~describe184.it185",
    "access": null,
    "description": "should extract movie information form a YTS object",
    "lineNumber": 65,
    "testTargets": [
      "YtsProvider#extractContent"
    ]
  },
  {
    "__docId__": 540,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/scraper/providers/YtsProvider.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/YtsProvider.spec.js~describe184.it186",
    "access": null,
    "description": "should get movie data from a given torrent",
    "lineNumber": 78,
    "testTargets": [
      "YtsProvider#getContentData"
    ]
  },
  {
    "__docId__": 541,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "test/scraper/providers/YtsProvider.spec.js~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "test/scraper/providers/YtsProvider.spec.js~describe184.it187",
    "access": null,
    "description": "should return a list of all the inserted torrents",
    "lineNumber": 100,
    "testTargets": [
      "YtsProvider#scrapeConfig"
    ]
  }
]